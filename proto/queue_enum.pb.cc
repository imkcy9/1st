// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: queue_enum.proto

#include "queue_enum.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_queue_5fenum_2eproto {
void InitDefaults() {
}

const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[3];
const ::google::protobuf::uint32 TableStruct::offsets[1] = {};
static const ::google::protobuf::internal::MigrationSchema* schemas = NULL;
static const ::google::protobuf::Message* const* file_default_instances = NULL;

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "queue_enum.proto", schemas, file_default_instances, TableStruct::offsets,
      NULL, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\020queue_enum.proto*\247\004\n\013RequestType\022\033\n\027RE"
      "QUESTTYPE_GETAPITYPES\020\000\022\035\n\031REQUESTTYPE_G"
      "ETAPIVERSION\020\001\022\032\n\026REQUESTTYPE_GETAPINAME"
      "\020\002\022\026\n\022REQUESTTYPE_CREATE\020\003\022\027\n\023REQUESTTYP"
      "E_RELEASE\020\004\022\030\n\024REQUESTTYPE_REGISTER\020\005\022\026\n"
      "\022REQUESTTYPE_CONFIG\020\006\022\027\n\023REQUESTTYPE_CON"
      "NECT\020\007\022\032\n\026REQUESTTYPE_DISCONNECT\020\010\022\025\n\021RE"
      "QUESTTYPE_CLEAR\020\t\022\027\n\023REQUESTTYPE_PROCESS"
      "\020\n\022\031\n\025REQUESTTYPE_SUBSCRIBE\020\013\022\033\n\027REQUEST"
      "TYPE_UNSUBSCRIBE\020\014\022\036\n\032REQUESTTYPE_SUBSCR"
      "IBEQUOTE\020\r\022 \n\034REQUESTTYPE_UNSUBSCRIBEQUO"
      "TE\020\016\022\036\n\032REQUESTTYPE_REQORDERINSERT\020\017\022\036\n\032"
      "REQUESTTYPE_REQQUOTEINSERT\020\020\022\036\n\032REQUESTT"
      "YPE_REQORDERACTION\020\021\022\036\n\032REQUESTTYPE_REQQ"
      "UOTEACTION\020\022*\251\003\n\tQueryType\022\036\n\032QUERYTYPE_"
      "REQQRYINSTRUMENT\020\000\022\"\n\036QUERYTYPE_REQQRYTR"
      "ADINGACCOUNT\020\001\022$\n QUERYTYPE_REQQRYINVEST"
      "ORPOSITION\020\002\022\031\n\025QUERYTYPE_REQQRYORDER\020\003\022"
      "\031\n\025QUERYTYPE_REQQRYTRADE\020\004\022\031\n\025QUERYTYPE_"
      "REQQRYQUOTE\020\005\022,\n(QUERYTYPE_REQQRYINSTRUM"
      "ENTCOMMISSIONRATE\020\006\022(\n$QUERYTYPE_REQQRYI"
      "NSTRUMENTMARGINRATE\020\007\022\"\n\036QUERYTYPE_REQQR"
      "YSETTLEMENTINFO\020\t\022\034\n\030QUERYTYPE_REQQRYINV"
      "ESTOR\020\n\022#\n\037QUERYTYPE_REQQRYHISTORICALTIC"
      "KS\020\013\022\"\n\036QUERYTYPE_REQQRYHISTORICALBARS\020\014"
      "*\316\005\n\014ResponseType\022#\n\037RESPONSETYPE_ONCONN"
      "ECTIONSTATUS\020\000\022\033\n\027RESPONSETYPE_ONRTNERRO"
      "R\020\001\022\026\n\022RESPONSETYPE_ONLOG\020\002\022%\n!RESPONSET"
      "YPE_ONRTNDEPTHMARKETDATA\020\003\022#\n\037RESPONSETY"
      "PE_ONRSPQRYINSTRUMENT\020\004\022\'\n#RESPONSETYPE_"
      "ONRSPQRYTRADINGACCOUNT\020\005\022)\n%RESPONSETYPE"
      "_ONRSPQRYINVESTORPOSITION\020\006\022\'\n#RESPONSET"
      "YPE_ONRSPQRYSETTLEMENTINFO\020\007\022\036\n\032RESPONSE"
      "TYPE_ONRSPQRYORDER\020\010\022\036\n\032RESPONSETYPE_ONR"
      "SPQRYTRADE\020\t\022\036\n\032RESPONSETYPE_ONRSPQRYQUO"
      "TE\020\n\022\033\n\027RESPONSETYPE_ONRTNORDER\020\013\022\033\n\027RES"
      "PONSETYPE_ONRTNTRADE\020\014\022\033\n\027RESPONSETYPE_O"
      "NRTNQUOTE\020\r\022\"\n\036RESPONSETYPE_ONRTNQUOTERE"
      "QUEST\020\016\022(\n$RESPONSETYPE_ONRSPQRYHISTORIC"
      "ALTICKS\020\017\022\'\n#RESPONSETYPE_ONRSPQRYHISTOR"
      "ICALBARS\020\020\022!\n\035RESPONSETYPE_ONRSPQRYINVES"
      "TOR\020\021\022&\n\"RESPONSETYPE_ONRTNINSTRUMENTSTA"
      "TUS\020\022\022\"\n\036RESPONSETYPE_ONFILTERSUBSCRIBE\020"
      "\023b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1729);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "queue_enum.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_queue_5fenum_2eproto
const ::google::protobuf::EnumDescriptor* RequestType_descriptor() {
  protobuf_queue_5fenum_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_queue_5fenum_2eproto::file_level_enum_descriptors[0];
}
bool RequestType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* QueryType_descriptor() {
  protobuf_queue_5fenum_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_queue_5fenum_2eproto::file_level_enum_descriptors[1];
}
bool QueryType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ResponseType_descriptor() {
  protobuf_queue_5fenum_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_queue_5fenum_2eproto::file_level_enum_descriptors[2];
}
bool ResponseType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
