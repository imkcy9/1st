// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: trader.proto

#ifndef PROTOBUF_INCLUDED_trader_2eproto
#define PROTOBUF_INCLUDED_trader_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "enum.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_trader_2eproto 

namespace protobuf_trader_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[18];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_trader_2eproto
namespace LT {
class AccountField;
class AccountFieldDefaultTypeInternal;
extern AccountFieldDefaultTypeInternal _AccountField_default_instance_;
class DepthField;
class DepthFieldDefaultTypeInternal;
extern DepthFieldDefaultTypeInternal _DepthField_default_instance_;
class DepthMarketDataNField;
class DepthMarketDataNFieldDefaultTypeInternal;
extern DepthMarketDataNFieldDefaultTypeInternal _DepthMarketDataNField_default_instance_;
class ErrorField;
class ErrorFieldDefaultTypeInternal;
extern ErrorFieldDefaultTypeInternal _ErrorField_default_instance_;
class InstrumentField;
class InstrumentFieldDefaultTypeInternal;
extern InstrumentFieldDefaultTypeInternal _InstrumentField_default_instance_;
class InstrumentStatusField;
class InstrumentStatusFieldDefaultTypeInternal;
extern InstrumentStatusFieldDefaultTypeInternal _InstrumentStatusField_default_instance_;
class InvestorField;
class InvestorFieldDefaultTypeInternal;
extern InvestorFieldDefaultTypeInternal _InvestorField_default_instance_;
class LogField;
class LogFieldDefaultTypeInternal;
extern LogFieldDefaultTypeInternal _LogField_default_instance_;
class OrderField;
class OrderFieldDefaultTypeInternal;
extern OrderFieldDefaultTypeInternal _OrderField_default_instance_;
class PositionField;
class PositionFieldDefaultTypeInternal;
extern PositionFieldDefaultTypeInternal _PositionField_default_instance_;
class QuoteField;
class QuoteFieldDefaultTypeInternal;
extern QuoteFieldDefaultTypeInternal _QuoteField_default_instance_;
class QuoteRequestField;
class QuoteRequestFieldDefaultTypeInternal;
extern QuoteRequestFieldDefaultTypeInternal _QuoteRequestField_default_instance_;
class ReqQueryField;
class ReqQueryFieldDefaultTypeInternal;
extern ReqQueryFieldDefaultTypeInternal _ReqQueryField_default_instance_;
class RspUserLoginField;
class RspUserLoginFieldDefaultTypeInternal;
extern RspUserLoginFieldDefaultTypeInternal _RspUserLoginField_default_instance_;
class ServerInfoField;
class ServerInfoFieldDefaultTypeInternal;
extern ServerInfoFieldDefaultTypeInternal _ServerInfoField_default_instance_;
class SettlementInfoField;
class SettlementInfoFieldDefaultTypeInternal;
extern SettlementInfoFieldDefaultTypeInternal _SettlementInfoField_default_instance_;
class TradeField;
class TradeFieldDefaultTypeInternal;
extern TradeFieldDefaultTypeInternal _TradeField_default_instance_;
class UserInfoField;
class UserInfoFieldDefaultTypeInternal;
extern UserInfoFieldDefaultTypeInternal _UserInfoField_default_instance_;
}  // namespace LT
namespace google {
namespace protobuf {
template<> ::LT::AccountField* Arena::CreateMaybeMessage<::LT::AccountField>(Arena*);
template<> ::LT::DepthField* Arena::CreateMaybeMessage<::LT::DepthField>(Arena*);
template<> ::LT::DepthMarketDataNField* Arena::CreateMaybeMessage<::LT::DepthMarketDataNField>(Arena*);
template<> ::LT::ErrorField* Arena::CreateMaybeMessage<::LT::ErrorField>(Arena*);
template<> ::LT::InstrumentField* Arena::CreateMaybeMessage<::LT::InstrumentField>(Arena*);
template<> ::LT::InstrumentStatusField* Arena::CreateMaybeMessage<::LT::InstrumentStatusField>(Arena*);
template<> ::LT::InvestorField* Arena::CreateMaybeMessage<::LT::InvestorField>(Arena*);
template<> ::LT::LogField* Arena::CreateMaybeMessage<::LT::LogField>(Arena*);
template<> ::LT::OrderField* Arena::CreateMaybeMessage<::LT::OrderField>(Arena*);
template<> ::LT::PositionField* Arena::CreateMaybeMessage<::LT::PositionField>(Arena*);
template<> ::LT::QuoteField* Arena::CreateMaybeMessage<::LT::QuoteField>(Arena*);
template<> ::LT::QuoteRequestField* Arena::CreateMaybeMessage<::LT::QuoteRequestField>(Arena*);
template<> ::LT::ReqQueryField* Arena::CreateMaybeMessage<::LT::ReqQueryField>(Arena*);
template<> ::LT::RspUserLoginField* Arena::CreateMaybeMessage<::LT::RspUserLoginField>(Arena*);
template<> ::LT::ServerInfoField* Arena::CreateMaybeMessage<::LT::ServerInfoField>(Arena*);
template<> ::LT::SettlementInfoField* Arena::CreateMaybeMessage<::LT::SettlementInfoField>(Arena*);
template<> ::LT::TradeField* Arena::CreateMaybeMessage<::LT::TradeField>(Arena*);
template<> ::LT::UserInfoField* Arena::CreateMaybeMessage<::LT::UserInfoField>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace LT {

// ===================================================================

class ReqQueryField : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LT.ReqQueryField) */ {
 public:
  ReqQueryField();
  virtual ~ReqQueryField();

  ReqQueryField(const ReqQueryField& from);

  inline ReqQueryField& operator=(const ReqQueryField& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqQueryField(ReqQueryField&& from) noexcept
    : ReqQueryField() {
    *this = ::std::move(from);
  }

  inline ReqQueryField& operator=(ReqQueryField&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqQueryField& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqQueryField* internal_default_instance() {
    return reinterpret_cast<const ReqQueryField*>(
               &_ReqQueryField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ReqQueryField* other);
  friend void swap(ReqQueryField& a, ReqQueryField& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqQueryField* New() const final {
    return CreateMaybeMessage<ReqQueryField>(NULL);
  }

  ReqQueryField* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReqQueryField>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReqQueryField& from);
  void MergeFrom(const ReqQueryField& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqQueryField* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string instrument_name = 1;
  void clear_instrument_name();
  static const int kInstrumentNameFieldNumber = 1;
  const ::std::string& instrument_name() const;
  void set_instrument_name(const ::std::string& value);
  #if LANG_CXX11
  void set_instrument_name(::std::string&& value);
  #endif
  void set_instrument_name(const char* value);
  void set_instrument_name(const char* value, size_t size);
  ::std::string* mutable_instrument_name();
  ::std::string* release_instrument_name();
  void set_allocated_instrument_name(::std::string* instrument_name);

  // string symbol = 2;
  void clear_symbol();
  static const int kSymbolFieldNumber = 2;
  const ::std::string& symbol() const;
  void set_symbol(const ::std::string& value);
  #if LANG_CXX11
  void set_symbol(::std::string&& value);
  #endif
  void set_symbol(const char* value);
  void set_symbol(const char* value, size_t size);
  ::std::string* mutable_symbol();
  ::std::string* release_symbol();
  void set_allocated_symbol(::std::string* symbol);

  // string instrument_id = 3;
  void clear_instrument_id();
  static const int kInstrumentIdFieldNumber = 3;
  const ::std::string& instrument_id() const;
  void set_instrument_id(const ::std::string& value);
  #if LANG_CXX11
  void set_instrument_id(::std::string&& value);
  #endif
  void set_instrument_id(const char* value);
  void set_instrument_id(const char* value, size_t size);
  ::std::string* mutable_instrument_id();
  ::std::string* release_instrument_id();
  void set_allocated_instrument_id(::std::string* instrument_id);

  // string exchange_id = 4;
  void clear_exchange_id();
  static const int kExchangeIdFieldNumber = 4;
  const ::std::string& exchange_id() const;
  void set_exchange_id(const ::std::string& value);
  #if LANG_CXX11
  void set_exchange_id(::std::string&& value);
  #endif
  void set_exchange_id(const char* value);
  void set_exchange_id(const char* value, size_t size);
  ::std::string* mutable_exchange_id();
  ::std::string* release_exchange_id();
  void set_allocated_exchange_id(::std::string* exchange_id);

  // string client_id = 5;
  void clear_client_id();
  static const int kClientIdFieldNumber = 5;
  const ::std::string& client_id() const;
  void set_client_id(const ::std::string& value);
  #if LANG_CXX11
  void set_client_id(::std::string&& value);
  #endif
  void set_client_id(const char* value);
  void set_client_id(const char* value, size_t size);
  ::std::string* mutable_client_id();
  ::std::string* release_client_id();
  void set_allocated_client_id(::std::string* client_id);

  // string account_id = 6;
  void clear_account_id();
  static const int kAccountIdFieldNumber = 6;
  const ::std::string& account_id() const;
  void set_account_id(const ::std::string& value);
  #if LANG_CXX11
  void set_account_id(::std::string&& value);
  #endif
  void set_account_id(const char* value);
  void set_account_id(const char* value, size_t size);
  ::std::string* mutable_account_id();
  ::std::string* release_account_id();
  void set_allocated_account_id(::std::string* account_id);

  // string currency_id = 7;
  void clear_currency_id();
  static const int kCurrencyIdFieldNumber = 7;
  const ::std::string& currency_id() const;
  void set_currency_id(const ::std::string& value);
  #if LANG_CXX11
  void set_currency_id(::std::string&& value);
  #endif
  void set_currency_id(const char* value);
  void set_currency_id(const char* value, size_t size);
  ::std::string* mutable_currency_id();
  ::std::string* release_currency_id();
  void set_allocated_currency_id(::std::string* currency_id);

  // string char64_id = 12;
  void clear_char64_id();
  static const int kChar64IdFieldNumber = 12;
  const ::std::string& char64_id() const;
  void set_char64_id(const ::std::string& value);
  #if LANG_CXX11
  void set_char64_id(::std::string&& value);
  #endif
  void set_char64_id(const char* value);
  void set_char64_id(const char* value, size_t size);
  ::std::string* mutable_char64_id();
  ::std::string* release_char64_id();
  void set_allocated_char64_id(::std::string* char64_id);

  // string char64_position_index = 14;
  void clear_char64_position_index();
  static const int kChar64PositionIndexFieldNumber = 14;
  const ::std::string& char64_position_index() const;
  void set_char64_position_index(const ::std::string& value);
  #if LANG_CXX11
  void set_char64_position_index(::std::string&& value);
  #endif
  void set_char64_position_index(const char* value);
  void set_char64_position_index(const char* value, size_t size);
  ::std::string* mutable_char64_position_index();
  ::std::string* release_char64_position_index();
  void set_allocated_char64_position_index(::std::string* char64_position_index);

  // string portfolio_id1 = 16;
  void clear_portfolio_id1();
  static const int kPortfolioId1FieldNumber = 16;
  const ::std::string& portfolio_id1() const;
  void set_portfolio_id1(const ::std::string& value);
  #if LANG_CXX11
  void set_portfolio_id1(::std::string&& value);
  #endif
  void set_portfolio_id1(const char* value);
  void set_portfolio_id1(const char* value, size_t size);
  ::std::string* mutable_portfolio_id1();
  ::std::string* release_portfolio_id1();
  void set_allocated_portfolio_id1(::std::string* portfolio_id1);

  // string portfolio_id2 = 17;
  void clear_portfolio_id2();
  static const int kPortfolioId2FieldNumber = 17;
  const ::std::string& portfolio_id2() const;
  void set_portfolio_id2(const ::std::string& value);
  #if LANG_CXX11
  void set_portfolio_id2(::std::string&& value);
  #endif
  void set_portfolio_id2(const char* value);
  void set_portfolio_id2(const char* value, size_t size);
  ::std::string* mutable_portfolio_id2();
  ::std::string* release_portfolio_id2();
  void set_allocated_portfolio_id2(::std::string* portfolio_id2);

  // string portfolio_id3 = 18;
  void clear_portfolio_id3();
  static const int kPortfolioId3FieldNumber = 18;
  const ::std::string& portfolio_id3() const;
  void set_portfolio_id3(const ::std::string& value);
  #if LANG_CXX11
  void set_portfolio_id3(::std::string&& value);
  #endif
  void set_portfolio_id3(const char* value);
  void set_portfolio_id3(const char* value, size_t size);
  ::std::string* mutable_portfolio_id3();
  ::std::string* release_portfolio_id3();
  void set_allocated_portfolio_id3(::std::string* portfolio_id3);

  // int32 date_start = 8;
  void clear_date_start();
  static const int kDateStartFieldNumber = 8;
  ::google::protobuf::int32 date_start() const;
  void set_date_start(::google::protobuf::int32 value);

  // int32 date_end = 9;
  void clear_date_end();
  static const int kDateEndFieldNumber = 9;
  ::google::protobuf::int32 date_end() const;
  void set_date_end(::google::protobuf::int32 value);

  // int32 time_start = 10;
  void clear_time_start();
  static const int kTimeStartFieldNumber = 10;
  ::google::protobuf::int32 time_start() const;
  void set_time_start(::google::protobuf::int32 value);

  // int32 time_end = 11;
  void clear_time_end();
  static const int kTimeEndFieldNumber = 11;
  ::google::protobuf::int32 time_end() const;
  void set_time_end(::google::protobuf::int32 value);

  // int32 int32_id = 13;
  void clear_int32_id();
  static const int kInt32IdFieldNumber = 13;
  ::google::protobuf::int32 int32_id() const;
  void set_int32_id(::google::protobuf::int32 value);

  // int32 int32_position_index = 15;
  void clear_int32_position_index();
  static const int kInt32PositionIndexFieldNumber = 15;
  ::google::protobuf::int32 int32_position_index() const;
  void set_int32_position_index(::google::protobuf::int32 value);

  // .LT.BusinessType business = 19;
  void clear_business();
  static const int kBusinessFieldNumber = 19;
  ::LT::BusinessType business() const;
  void set_business(::LT::BusinessType value);

  // @@protoc_insertion_point(class_scope:LT.ReqQueryField)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr instrument_name_;
  ::google::protobuf::internal::ArenaStringPtr symbol_;
  ::google::protobuf::internal::ArenaStringPtr instrument_id_;
  ::google::protobuf::internal::ArenaStringPtr exchange_id_;
  ::google::protobuf::internal::ArenaStringPtr client_id_;
  ::google::protobuf::internal::ArenaStringPtr account_id_;
  ::google::protobuf::internal::ArenaStringPtr currency_id_;
  ::google::protobuf::internal::ArenaStringPtr char64_id_;
  ::google::protobuf::internal::ArenaStringPtr char64_position_index_;
  ::google::protobuf::internal::ArenaStringPtr portfolio_id1_;
  ::google::protobuf::internal::ArenaStringPtr portfolio_id2_;
  ::google::protobuf::internal::ArenaStringPtr portfolio_id3_;
  ::google::protobuf::int32 date_start_;
  ::google::protobuf::int32 date_end_;
  ::google::protobuf::int32 time_start_;
  ::google::protobuf::int32 time_end_;
  ::google::protobuf::int32 int32_id_;
  ::google::protobuf::int32 int32_position_index_;
  int business_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_trader_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PositionField : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LT.PositionField) */ {
 public:
  PositionField();
  virtual ~PositionField();

  PositionField(const PositionField& from);

  inline PositionField& operator=(const PositionField& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PositionField(PositionField&& from) noexcept
    : PositionField() {
    *this = ::std::move(from);
  }

  inline PositionField& operator=(PositionField&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PositionField& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PositionField* internal_default_instance() {
    return reinterpret_cast<const PositionField*>(
               &_PositionField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(PositionField* other);
  friend void swap(PositionField& a, PositionField& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PositionField* New() const final {
    return CreateMaybeMessage<PositionField>(NULL);
  }

  PositionField* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PositionField>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PositionField& from);
  void MergeFrom(const PositionField& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PositionField* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string instrument_name = 1;
  void clear_instrument_name();
  static const int kInstrumentNameFieldNumber = 1;
  const ::std::string& instrument_name() const;
  void set_instrument_name(const ::std::string& value);
  #if LANG_CXX11
  void set_instrument_name(::std::string&& value);
  #endif
  void set_instrument_name(const char* value);
  void set_instrument_name(const char* value, size_t size);
  ::std::string* mutable_instrument_name();
  ::std::string* release_instrument_name();
  void set_allocated_instrument_name(::std::string* instrument_name);

  // string symbol = 2;
  void clear_symbol();
  static const int kSymbolFieldNumber = 2;
  const ::std::string& symbol() const;
  void set_symbol(const ::std::string& value);
  #if LANG_CXX11
  void set_symbol(::std::string&& value);
  #endif
  void set_symbol(const char* value);
  void set_symbol(const char* value, size_t size);
  ::std::string* mutable_symbol();
  ::std::string* release_symbol();
  void set_allocated_symbol(::std::string* symbol);

  // string instrument_id = 3;
  void clear_instrument_id();
  static const int kInstrumentIdFieldNumber = 3;
  const ::std::string& instrument_id() const;
  void set_instrument_id(const ::std::string& value);
  #if LANG_CXX11
  void set_instrument_id(::std::string&& value);
  #endif
  void set_instrument_id(const char* value);
  void set_instrument_id(const char* value, size_t size);
  ::std::string* mutable_instrument_id();
  ::std::string* release_instrument_id();
  void set_allocated_instrument_id(::std::string* instrument_id);

  // string exchange_id = 4;
  void clear_exchange_id();
  static const int kExchangeIdFieldNumber = 4;
  const ::std::string& exchange_id() const;
  void set_exchange_id(const ::std::string& value);
  #if LANG_CXX11
  void set_exchange_id(::std::string&& value);
  #endif
  void set_exchange_id(const char* value);
  void set_exchange_id(const char* value, size_t size);
  ::std::string* mutable_exchange_id();
  ::std::string* release_exchange_id();
  void set_allocated_exchange_id(::std::string* exchange_id);

  // string client_id = 5;
  void clear_client_id();
  static const int kClientIdFieldNumber = 5;
  const ::std::string& client_id() const;
  void set_client_id(const ::std::string& value);
  #if LANG_CXX11
  void set_client_id(::std::string&& value);
  #endif
  void set_client_id(const char* value);
  void set_client_id(const char* value, size_t size);
  ::std::string* mutable_client_id();
  ::std::string* release_client_id();
  void set_allocated_client_id(::std::string* client_id);

  // string account_id = 6;
  void clear_account_id();
  static const int kAccountIdFieldNumber = 6;
  const ::std::string& account_id() const;
  void set_account_id(const ::std::string& value);
  #if LANG_CXX11
  void set_account_id(::std::string&& value);
  #endif
  void set_account_id(const char* value);
  void set_account_id(const char* value, size_t size);
  ::std::string* mutable_account_id();
  ::std::string* release_account_id();
  void set_allocated_account_id(::std::string* account_id);

  // string id = 19;
  void clear_id();
  static const int kIdFieldNumber = 19;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string portfolio_id1 = 20;
  void clear_portfolio_id1();
  static const int kPortfolioId1FieldNumber = 20;
  const ::std::string& portfolio_id1() const;
  void set_portfolio_id1(const ::std::string& value);
  #if LANG_CXX11
  void set_portfolio_id1(::std::string&& value);
  #endif
  void set_portfolio_id1(const char* value);
  void set_portfolio_id1(const char* value, size_t size);
  ::std::string* mutable_portfolio_id1();
  ::std::string* release_portfolio_id1();
  void set_allocated_portfolio_id1(::std::string* portfolio_id1);

  // string portfolio_id2 = 21;
  void clear_portfolio_id2();
  static const int kPortfolioId2FieldNumber = 21;
  const ::std::string& portfolio_id2() const;
  void set_portfolio_id2(const ::std::string& value);
  #if LANG_CXX11
  void set_portfolio_id2(::std::string&& value);
  #endif
  void set_portfolio_id2(const char* value);
  void set_portfolio_id2(const char* value, size_t size);
  ::std::string* mutable_portfolio_id2();
  ::std::string* release_portfolio_id2();
  void set_allocated_portfolio_id2(::std::string* portfolio_id2);

  // string portfolio_id3 = 22;
  void clear_portfolio_id3();
  static const int kPortfolioId3FieldNumber = 22;
  const ::std::string& portfolio_id3() const;
  void set_portfolio_id3(const ::std::string& value);
  #if LANG_CXX11
  void set_portfolio_id3(::std::string&& value);
  #endif
  void set_portfolio_id3(const char* value);
  void set_portfolio_id3(const char* value, size_t size);
  ::std::string* mutable_portfolio_id3();
  ::std::string* release_portfolio_id3();
  void set_allocated_portfolio_id3(::std::string* portfolio_id3);

  // .LT.PositionSide side = 7;
  void clear_side();
  static const int kSideFieldNumber = 7;
  ::LT::PositionSide side() const;
  void set_side(::LT::PositionSide value);

  // .LT.HedgeFlagType hedge_flag = 8;
  void clear_hedge_flag();
  static const int kHedgeFlagFieldNumber = 8;
  ::LT::HedgeFlagType hedge_flag() const;
  void set_hedge_flag(::LT::HedgeFlagType value);

  // double position_cost = 10;
  void clear_position_cost();
  static const int kPositionCostFieldNumber = 10;
  double position_cost() const;
  void set_position_cost(double value);

  // double position = 11;
  void clear_position();
  static const int kPositionFieldNumber = 11;
  double position() const;
  void set_position(double value);

  // double today_position = 12;
  void clear_today_position();
  static const int kTodayPositionFieldNumber = 12;
  double today_position() const;
  void set_today_position(double value);

  // double history_position = 13;
  void clear_history_position();
  static const int kHistoryPositionFieldNumber = 13;
  double history_position() const;
  void set_history_position(double value);

  // double history_frozen = 14;
  void clear_history_frozen();
  static const int kHistoryFrozenFieldNumber = 14;
  double history_frozen() const;
  void set_history_frozen(double value);

  // double today_bs_position = 15;
  void clear_today_bs_position();
  static const int kTodayBsPositionFieldNumber = 15;
  double today_bs_position() const;
  void set_today_bs_position(double value);

  // double today_bs_frozen = 16;
  void clear_today_bs_frozen();
  static const int kTodayBsFrozenFieldNumber = 16;
  double today_bs_frozen() const;
  void set_today_bs_frozen(double value);

  // int32 date = 9;
  void clear_date();
  static const int kDateFieldNumber = 9;
  ::google::protobuf::int32 date() const;
  void set_date(::google::protobuf::int32 value);

  // .LT.BusinessType business = 23;
  void clear_business();
  static const int kBusinessFieldNumber = 23;
  ::LT::BusinessType business() const;
  void set_business(::LT::BusinessType value);

  // double today_pr_position = 17;
  void clear_today_pr_position();
  static const int kTodayPrPositionFieldNumber = 17;
  double today_pr_position() const;
  void set_today_pr_position(double value);

  // double today_pr_frozen = 18;
  void clear_today_pr_frozen();
  static const int kTodayPrFrozenFieldNumber = 18;
  double today_pr_frozen() const;
  void set_today_pr_frozen(double value);

  // @@protoc_insertion_point(class_scope:LT.PositionField)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr instrument_name_;
  ::google::protobuf::internal::ArenaStringPtr symbol_;
  ::google::protobuf::internal::ArenaStringPtr instrument_id_;
  ::google::protobuf::internal::ArenaStringPtr exchange_id_;
  ::google::protobuf::internal::ArenaStringPtr client_id_;
  ::google::protobuf::internal::ArenaStringPtr account_id_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr portfolio_id1_;
  ::google::protobuf::internal::ArenaStringPtr portfolio_id2_;
  ::google::protobuf::internal::ArenaStringPtr portfolio_id3_;
  int side_;
  int hedge_flag_;
  double position_cost_;
  double position_;
  double today_position_;
  double history_position_;
  double history_frozen_;
  double today_bs_position_;
  double today_bs_frozen_;
  ::google::protobuf::int32 date_;
  int business_;
  double today_pr_position_;
  double today_pr_frozen_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_trader_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class QuoteField : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LT.QuoteField) */ {
 public:
  QuoteField();
  virtual ~QuoteField();

  QuoteField(const QuoteField& from);

  inline QuoteField& operator=(const QuoteField& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QuoteField(QuoteField&& from) noexcept
    : QuoteField() {
    *this = ::std::move(from);
  }

  inline QuoteField& operator=(QuoteField&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const QuoteField& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QuoteField* internal_default_instance() {
    return reinterpret_cast<const QuoteField*>(
               &_QuoteField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(QuoteField* other);
  friend void swap(QuoteField& a, QuoteField& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QuoteField* New() const final {
    return CreateMaybeMessage<QuoteField>(NULL);
  }

  QuoteField* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<QuoteField>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const QuoteField& from);
  void MergeFrom(const QuoteField& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QuoteField* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string instrument_name = 1;
  void clear_instrument_name();
  static const int kInstrumentNameFieldNumber = 1;
  const ::std::string& instrument_name() const;
  void set_instrument_name(const ::std::string& value);
  #if LANG_CXX11
  void set_instrument_name(::std::string&& value);
  #endif
  void set_instrument_name(const char* value);
  void set_instrument_name(const char* value, size_t size);
  ::std::string* mutable_instrument_name();
  ::std::string* release_instrument_name();
  void set_allocated_instrument_name(::std::string* instrument_name);

  // string symbol = 2;
  void clear_symbol();
  static const int kSymbolFieldNumber = 2;
  const ::std::string& symbol() const;
  void set_symbol(const ::std::string& value);
  #if LANG_CXX11
  void set_symbol(::std::string&& value);
  #endif
  void set_symbol(const char* value);
  void set_symbol(const char* value, size_t size);
  ::std::string* mutable_symbol();
  ::std::string* release_symbol();
  void set_allocated_symbol(::std::string* symbol);

  // string instrument_id = 3;
  void clear_instrument_id();
  static const int kInstrumentIdFieldNumber = 3;
  const ::std::string& instrument_id() const;
  void set_instrument_id(const ::std::string& value);
  #if LANG_CXX11
  void set_instrument_id(::std::string&& value);
  #endif
  void set_instrument_id(const char* value);
  void set_instrument_id(const char* value, size_t size);
  ::std::string* mutable_instrument_id();
  ::std::string* release_instrument_id();
  void set_allocated_instrument_id(::std::string* instrument_id);

  // string exchange_id = 4;
  void clear_exchange_id();
  static const int kExchangeIdFieldNumber = 4;
  const ::std::string& exchange_id() const;
  void set_exchange_id(const ::std::string& value);
  #if LANG_CXX11
  void set_exchange_id(::std::string&& value);
  #endif
  void set_exchange_id(const char* value);
  void set_exchange_id(const char* value, size_t size);
  ::std::string* mutable_exchange_id();
  ::std::string* release_exchange_id();
  void set_allocated_exchange_id(::std::string* exchange_id);

  // string client_id = 5;
  void clear_client_id();
  static const int kClientIdFieldNumber = 5;
  const ::std::string& client_id() const;
  void set_client_id(const ::std::string& value);
  #if LANG_CXX11
  void set_client_id(::std::string&& value);
  #endif
  void set_client_id(const char* value);
  void set_client_id(const char* value, size_t size);
  ::std::string* mutable_client_id();
  ::std::string* release_client_id();
  void set_allocated_client_id(::std::string* client_id);

  // string account_id = 6;
  void clear_account_id();
  static const int kAccountIdFieldNumber = 6;
  const ::std::string& account_id() const;
  void set_account_id(const ::std::string& value);
  #if LANG_CXX11
  void set_account_id(::std::string&& value);
  #endif
  void set_account_id(const char* value);
  void set_account_id(const char* value, size_t size);
  ::std::string* mutable_account_id();
  ::std::string* release_account_id();
  void set_allocated_account_id(::std::string* account_id);

  // string quote_req_id = 17;
  void clear_quote_req_id();
  static const int kQuoteReqIdFieldNumber = 17;
  const ::std::string& quote_req_id() const;
  void set_quote_req_id(const ::std::string& value);
  #if LANG_CXX11
  void set_quote_req_id(::std::string&& value);
  #endif
  void set_quote_req_id(const char* value);
  void set_quote_req_id(const char* value, size_t size);
  ::std::string* mutable_quote_req_id();
  ::std::string* release_quote_req_id();
  void set_allocated_quote_req_id(::std::string* quote_req_id);

  // string local_id = 18;
  void clear_local_id();
  static const int kLocalIdFieldNumber = 18;
  const ::std::string& local_id() const;
  void set_local_id(const ::std::string& value);
  #if LANG_CXX11
  void set_local_id(::std::string&& value);
  #endif
  void set_local_id(const char* value);
  void set_local_id(const char* value, size_t size);
  ::std::string* mutable_local_id();
  ::std::string* release_local_id();
  void set_allocated_local_id(::std::string* local_id);

  // string id = 19;
  void clear_id();
  static const int kIdFieldNumber = 19;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string ask_id = 20;
  void clear_ask_id();
  static const int kAskIdFieldNumber = 20;
  const ::std::string& ask_id() const;
  void set_ask_id(const ::std::string& value);
  #if LANG_CXX11
  void set_ask_id(::std::string&& value);
  #endif
  void set_ask_id(const char* value);
  void set_ask_id(const char* value, size_t size);
  ::std::string* mutable_ask_id();
  ::std::string* release_ask_id();
  void set_allocated_ask_id(::std::string* ask_id);

  // string bid_id = 21;
  void clear_bid_id();
  static const int kBidIdFieldNumber = 21;
  const ::std::string& bid_id() const;
  void set_bid_id(const ::std::string& value);
  #if LANG_CXX11
  void set_bid_id(::std::string&& value);
  #endif
  void set_bid_id(const char* value);
  void set_bid_id(const char* value, size_t size);
  ::std::string* mutable_bid_id();
  ::std::string* release_bid_id();
  void set_allocated_bid_id(::std::string* bid_id);

  // string ask_order_id = 22;
  void clear_ask_order_id();
  static const int kAskOrderIdFieldNumber = 22;
  const ::std::string& ask_order_id() const;
  void set_ask_order_id(const ::std::string& value);
  #if LANG_CXX11
  void set_ask_order_id(::std::string&& value);
  #endif
  void set_ask_order_id(const char* value);
  void set_ask_order_id(const char* value, size_t size);
  ::std::string* mutable_ask_order_id();
  ::std::string* release_ask_order_id();
  void set_allocated_ask_order_id(::std::string* ask_order_id);

  // string bid_order_id = 23;
  void clear_bid_order_id();
  static const int kBidOrderIdFieldNumber = 23;
  const ::std::string& bid_order_id() const;
  void set_bid_order_id(const ::std::string& value);
  #if LANG_CXX11
  void set_bid_order_id(::std::string&& value);
  #endif
  void set_bid_order_id(const char* value);
  void set_bid_order_id(const char* value, size_t size);
  ::std::string* mutable_bid_order_id();
  ::std::string* release_bid_order_id();
  void set_allocated_bid_order_id(::std::string* bid_order_id);

  // string text = 26;
  void clear_text();
  static const int kTextFieldNumber = 26;
  const ::std::string& text() const;
  void set_text(const ::std::string& value);
  #if LANG_CXX11
  void set_text(::std::string&& value);
  #endif
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  ::std::string* mutable_text();
  ::std::string* release_text();
  void set_allocated_text(::std::string* text);

  // double ask_qty = 7;
  void clear_ask_qty();
  static const int kAskQtyFieldNumber = 7;
  double ask_qty() const;
  void set_ask_qty(double value);

  // double ask_price = 8;
  void clear_ask_price();
  static const int kAskPriceFieldNumber = 8;
  double ask_price() const;
  void set_ask_price(double value);

  // .LT.OpenCloseType ask_open_close = 9;
  void clear_ask_open_close();
  static const int kAskOpenCloseFieldNumber = 9;
  ::LT::OpenCloseType ask_open_close() const;
  void set_ask_open_close(::LT::OpenCloseType value);

  // .LT.HedgeFlagType ask_hedge_flag = 10;
  void clear_ask_hedge_flag();
  static const int kAskHedgeFlagFieldNumber = 10;
  ::LT::HedgeFlagType ask_hedge_flag() const;
  void set_ask_hedge_flag(::LT::HedgeFlagType value);

  // double bid_qty = 11;
  void clear_bid_qty();
  static const int kBidQtyFieldNumber = 11;
  double bid_qty() const;
  void set_bid_qty(double value);

  // double bid_price = 12;
  void clear_bid_price();
  static const int kBidPriceFieldNumber = 12;
  double bid_price() const;
  void set_bid_price(double value);

  // .LT.OpenCloseType bid_open_close = 13;
  void clear_bid_open_close();
  static const int kBidOpenCloseFieldNumber = 13;
  ::LT::OpenCloseType bid_open_close() const;
  void set_bid_open_close(::LT::OpenCloseType value);

  // .LT.HedgeFlagType bid_hedge_flag = 14;
  void clear_bid_hedge_flag();
  static const int kBidHedgeFlagFieldNumber = 14;
  ::LT::HedgeFlagType bid_hedge_flag() const;
  void set_bid_hedge_flag(::LT::HedgeFlagType value);

  // .LT.OrderStatus status = 15;
  void clear_status();
  static const int kStatusFieldNumber = 15;
  ::LT::OrderStatus status() const;
  void set_status(::LT::OrderStatus value);

  // .LT.ExecType exec_type = 16;
  void clear_exec_type();
  static const int kExecTypeFieldNumber = 16;
  ::LT::ExecType exec_type() const;
  void set_exec_type(::LT::ExecType value);

  // int32 xerror_id = 24;
  void clear_xerror_id();
  static const int kXerrorIdFieldNumber = 24;
  ::google::protobuf::int32 xerror_id() const;
  void set_xerror_id(::google::protobuf::int32 value);

  // int32 row_error_id = 25;
  void clear_row_error_id();
  static const int kRowErrorIdFieldNumber = 25;
  ::google::protobuf::int32 row_error_id() const;
  void set_row_error_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:LT.QuoteField)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr instrument_name_;
  ::google::protobuf::internal::ArenaStringPtr symbol_;
  ::google::protobuf::internal::ArenaStringPtr instrument_id_;
  ::google::protobuf::internal::ArenaStringPtr exchange_id_;
  ::google::protobuf::internal::ArenaStringPtr client_id_;
  ::google::protobuf::internal::ArenaStringPtr account_id_;
  ::google::protobuf::internal::ArenaStringPtr quote_req_id_;
  ::google::protobuf::internal::ArenaStringPtr local_id_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr ask_id_;
  ::google::protobuf::internal::ArenaStringPtr bid_id_;
  ::google::protobuf::internal::ArenaStringPtr ask_order_id_;
  ::google::protobuf::internal::ArenaStringPtr bid_order_id_;
  ::google::protobuf::internal::ArenaStringPtr text_;
  double ask_qty_;
  double ask_price_;
  int ask_open_close_;
  int ask_hedge_flag_;
  double bid_qty_;
  double bid_price_;
  int bid_open_close_;
  int bid_hedge_flag_;
  int status_;
  int exec_type_;
  ::google::protobuf::int32 xerror_id_;
  ::google::protobuf::int32 row_error_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_trader_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OrderField : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LT.OrderField) */ {
 public:
  OrderField();
  virtual ~OrderField();

  OrderField(const OrderField& from);

  inline OrderField& operator=(const OrderField& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OrderField(OrderField&& from) noexcept
    : OrderField() {
    *this = ::std::move(from);
  }

  inline OrderField& operator=(OrderField&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const OrderField& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OrderField* internal_default_instance() {
    return reinterpret_cast<const OrderField*>(
               &_OrderField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(OrderField* other);
  friend void swap(OrderField& a, OrderField& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OrderField* New() const final {
    return CreateMaybeMessage<OrderField>(NULL);
  }

  OrderField* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OrderField>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OrderField& from);
  void MergeFrom(const OrderField& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrderField* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string instrument_name = 1;
  void clear_instrument_name();
  static const int kInstrumentNameFieldNumber = 1;
  const ::std::string& instrument_name() const;
  void set_instrument_name(const ::std::string& value);
  #if LANG_CXX11
  void set_instrument_name(::std::string&& value);
  #endif
  void set_instrument_name(const char* value);
  void set_instrument_name(const char* value, size_t size);
  ::std::string* mutable_instrument_name();
  ::std::string* release_instrument_name();
  void set_allocated_instrument_name(::std::string* instrument_name);

  // string symbol = 2;
  void clear_symbol();
  static const int kSymbolFieldNumber = 2;
  const ::std::string& symbol() const;
  void set_symbol(const ::std::string& value);
  #if LANG_CXX11
  void set_symbol(::std::string&& value);
  #endif
  void set_symbol(const char* value);
  void set_symbol(const char* value, size_t size);
  ::std::string* mutable_symbol();
  ::std::string* release_symbol();
  void set_allocated_symbol(::std::string* symbol);

  // string instrument_id = 3;
  void clear_instrument_id();
  static const int kInstrumentIdFieldNumber = 3;
  const ::std::string& instrument_id() const;
  void set_instrument_id(const ::std::string& value);
  #if LANG_CXX11
  void set_instrument_id(::std::string&& value);
  #endif
  void set_instrument_id(const char* value);
  void set_instrument_id(const char* value, size_t size);
  ::std::string* mutable_instrument_id();
  ::std::string* release_instrument_id();
  void set_allocated_instrument_id(::std::string* instrument_id);

  // string exchange_id = 4;
  void clear_exchange_id();
  static const int kExchangeIdFieldNumber = 4;
  const ::std::string& exchange_id() const;
  void set_exchange_id(const ::std::string& value);
  #if LANG_CXX11
  void set_exchange_id(::std::string&& value);
  #endif
  void set_exchange_id(const char* value);
  void set_exchange_id(const char* value, size_t size);
  ::std::string* mutable_exchange_id();
  ::std::string* release_exchange_id();
  void set_allocated_exchange_id(::std::string* exchange_id);

  // string client_id = 5;
  void clear_client_id();
  static const int kClientIdFieldNumber = 5;
  const ::std::string& client_id() const;
  void set_client_id(const ::std::string& value);
  #if LANG_CXX11
  void set_client_id(::std::string&& value);
  #endif
  void set_client_id(const char* value);
  void set_client_id(const char* value, size_t size);
  ::std::string* mutable_client_id();
  ::std::string* release_client_id();
  void set_allocated_client_id(::std::string* client_id);

  // string account_id = 6;
  void clear_account_id();
  static const int kAccountIdFieldNumber = 6;
  const ::std::string& account_id() const;
  void set_account_id(const ::std::string& value);
  #if LANG_CXX11
  void set_account_id(::std::string&& value);
  #endif
  void set_account_id(const char* value);
  void set_account_id(const char* value, size_t size);
  ::std::string* mutable_account_id();
  ::std::string* release_account_id();
  void set_allocated_account_id(::std::string* account_id);

  // string id = 14;
  void clear_id();
  static const int kIdFieldNumber = 14;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string order_id = 15;
  void clear_order_id();
  static const int kOrderIdFieldNumber = 15;
  const ::std::string& order_id() const;
  void set_order_id(const ::std::string& value);
  #if LANG_CXX11
  void set_order_id(::std::string&& value);
  #endif
  void set_order_id(const char* value);
  void set_order_id(const char* value, size_t size);
  ::std::string* mutable_order_id();
  ::std::string* release_order_id();
  void set_allocated_order_id(::std::string* order_id);

  // string local_id = 16;
  void clear_local_id();
  static const int kLocalIdFieldNumber = 16;
  const ::std::string& local_id() const;
  void set_local_id(const ::std::string& value);
  #if LANG_CXX11
  void set_local_id(::std::string&& value);
  #endif
  void set_local_id(const char* value);
  void set_local_id(const char* value, size_t size);
  ::std::string* mutable_local_id();
  ::std::string* release_local_id();
  void set_allocated_local_id(::std::string* local_id);

  // string text = 27;
  void clear_text();
  static const int kTextFieldNumber = 27;
  const ::std::string& text() const;
  void set_text(const ::std::string& value);
  #if LANG_CXX11
  void set_text(::std::string&& value);
  #endif
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  ::std::string* mutable_text();
  ::std::string* release_text();
  void set_allocated_text(::std::string* text);

  // string reserve_char64 = 29;
  void clear_reserve_char64();
  static const int kReserveChar64FieldNumber = 29;
  const ::std::string& reserve_char64() const;
  void set_reserve_char64(const ::std::string& value);
  #if LANG_CXX11
  void set_reserve_char64(::std::string&& value);
  #endif
  void set_reserve_char64(const char* value);
  void set_reserve_char64(const char* value, size_t size);
  ::std::string* mutable_reserve_char64();
  ::std::string* release_reserve_char64();
  void set_allocated_reserve_char64(::std::string* reserve_char64);

  // string portfolio_id1 = 30;
  void clear_portfolio_id1();
  static const int kPortfolioId1FieldNumber = 30;
  const ::std::string& portfolio_id1() const;
  void set_portfolio_id1(const ::std::string& value);
  #if LANG_CXX11
  void set_portfolio_id1(::std::string&& value);
  #endif
  void set_portfolio_id1(const char* value);
  void set_portfolio_id1(const char* value, size_t size);
  ::std::string* mutable_portfolio_id1();
  ::std::string* release_portfolio_id1();
  void set_allocated_portfolio_id1(::std::string* portfolio_id1);

  // string portfolio_id2 = 31;
  void clear_portfolio_id2();
  static const int kPortfolioId2FieldNumber = 31;
  const ::std::string& portfolio_id2() const;
  void set_portfolio_id2(const ::std::string& value);
  #if LANG_CXX11
  void set_portfolio_id2(::std::string&& value);
  #endif
  void set_portfolio_id2(const char* value);
  void set_portfolio_id2(const char* value, size_t size);
  ::std::string* mutable_portfolio_id2();
  ::std::string* release_portfolio_id2();
  void set_allocated_portfolio_id2(::std::string* portfolio_id2);

  // string portfolio_id3 = 32;
  void clear_portfolio_id3();
  static const int kPortfolioId3FieldNumber = 32;
  const ::std::string& portfolio_id3() const;
  void set_portfolio_id3(const ::std::string& value);
  #if LANG_CXX11
  void set_portfolio_id3(::std::string&& value);
  #endif
  void set_portfolio_id3(const char* value);
  void set_portfolio_id3(const char* value, size_t size);
  ::std::string* mutable_portfolio_id3();
  ::std::string* release_portfolio_id3();
  void set_allocated_portfolio_id3(::std::string* portfolio_id3);

  // double qty = 8;
  void clear_qty();
  static const int kQtyFieldNumber = 8;
  double qty() const;
  void set_qty(double value);

  // .LT.OrderSide size = 7;
  void clear_size();
  static const int kSizeFieldNumber = 7;
  ::LT::OrderSide size() const;
  void set_size(::LT::OrderSide value);

  // .LT.OpenCloseType open_close = 10;
  void clear_open_close();
  static const int kOpenCloseFieldNumber = 10;
  ::LT::OpenCloseType open_close() const;
  void set_open_close(::LT::OpenCloseType value);

  // double price = 9;
  void clear_price();
  static const int kPriceFieldNumber = 9;
  double price() const;
  void set_price(double value);

  // .LT.HedgeFlagType hedge_flag = 11;
  void clear_hedge_flag();
  static const int kHedgeFlagFieldNumber = 11;
  ::LT::HedgeFlagType hedge_flag() const;
  void set_hedge_flag(::LT::HedgeFlagType value);

  // int32 date = 12;
  void clear_date();
  static const int kDateFieldNumber = 12;
  ::google::protobuf::int32 date() const;
  void set_date(::google::protobuf::int32 value);

  // int64 time = 13;
  void clear_time();
  static const int kTimeFieldNumber = 13;
  ::google::protobuf::int64 time() const;
  void set_time(::google::protobuf::int64 value);

  // double stop_px = 18;
  void clear_stop_px();
  static const int kStopPxFieldNumber = 18;
  double stop_px() const;
  void set_stop_px(double value);

  // .LT.OrderType type = 17;
  void clear_type();
  static const int kTypeFieldNumber = 17;
  ::LT::OrderType type() const;
  void set_type(::LT::OrderType value);

  // .LT.TimeInForce time_in_force = 19;
  void clear_time_in_force();
  static const int kTimeInForceFieldNumber = 19;
  ::LT::TimeInForce time_in_force() const;
  void set_time_in_force(::LT::TimeInForce value);

  // .LT.OrderStatus status = 20;
  void clear_status();
  static const int kStatusFieldNumber = 20;
  ::LT::OrderStatus status() const;
  void set_status(::LT::OrderStatus value);

  // .LT.ExecType exec_type = 21;
  void clear_exec_type();
  static const int kExecTypeFieldNumber = 21;
  ::LT::ExecType exec_type() const;
  void set_exec_type(::LT::ExecType value);

  // double leaves_qty = 22;
  void clear_leaves_qty();
  static const int kLeavesQtyFieldNumber = 22;
  double leaves_qty() const;
  void set_leaves_qty(double value);

  // double cum_qty = 23;
  void clear_cum_qty();
  static const int kCumQtyFieldNumber = 23;
  double cum_qty() const;
  void set_cum_qty(double value);

  // double avg_px = 24;
  void clear_avg_px();
  static const int kAvgPxFieldNumber = 24;
  double avg_px() const;
  void set_avg_px(double value);

  // int32 xerror_id = 25;
  void clear_xerror_id();
  static const int kXerrorIdFieldNumber = 25;
  ::google::protobuf::int32 xerror_id() const;
  void set_xerror_id(::google::protobuf::int32 value);

  // int32 raw_error_id = 26;
  void clear_raw_error_id();
  static const int kRawErrorIdFieldNumber = 26;
  ::google::protobuf::int32 raw_error_id() const;
  void set_raw_error_id(::google::protobuf::int32 value);

  // int32 reserve_int32 = 28;
  void clear_reserve_int32();
  static const int kReserveInt32FieldNumber = 28;
  ::google::protobuf::int32 reserve_int32() const;
  void set_reserve_int32(::google::protobuf::int32 value);

  // .LT.BusinessType business = 33;
  void clear_business();
  static const int kBusinessFieldNumber = 33;
  ::LT::BusinessType business() const;
  void set_business(::LT::BusinessType value);

  // @@protoc_insertion_point(class_scope:LT.OrderField)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr instrument_name_;
  ::google::protobuf::internal::ArenaStringPtr symbol_;
  ::google::protobuf::internal::ArenaStringPtr instrument_id_;
  ::google::protobuf::internal::ArenaStringPtr exchange_id_;
  ::google::protobuf::internal::ArenaStringPtr client_id_;
  ::google::protobuf::internal::ArenaStringPtr account_id_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr order_id_;
  ::google::protobuf::internal::ArenaStringPtr local_id_;
  ::google::protobuf::internal::ArenaStringPtr text_;
  ::google::protobuf::internal::ArenaStringPtr reserve_char64_;
  ::google::protobuf::internal::ArenaStringPtr portfolio_id1_;
  ::google::protobuf::internal::ArenaStringPtr portfolio_id2_;
  ::google::protobuf::internal::ArenaStringPtr portfolio_id3_;
  double qty_;
  int size_;
  int open_close_;
  double price_;
  int hedge_flag_;
  ::google::protobuf::int32 date_;
  ::google::protobuf::int64 time_;
  double stop_px_;
  int type_;
  int time_in_force_;
  int status_;
  int exec_type_;
  double leaves_qty_;
  double cum_qty_;
  double avg_px_;
  ::google::protobuf::int32 xerror_id_;
  ::google::protobuf::int32 raw_error_id_;
  ::google::protobuf::int32 reserve_int32_;
  int business_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_trader_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TradeField : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LT.TradeField) */ {
 public:
  TradeField();
  virtual ~TradeField();

  TradeField(const TradeField& from);

  inline TradeField& operator=(const TradeField& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TradeField(TradeField&& from) noexcept
    : TradeField() {
    *this = ::std::move(from);
  }

  inline TradeField& operator=(TradeField&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TradeField& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TradeField* internal_default_instance() {
    return reinterpret_cast<const TradeField*>(
               &_TradeField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(TradeField* other);
  friend void swap(TradeField& a, TradeField& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TradeField* New() const final {
    return CreateMaybeMessage<TradeField>(NULL);
  }

  TradeField* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TradeField>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TradeField& from);
  void MergeFrom(const TradeField& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TradeField* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string instrument_name = 1;
  void clear_instrument_name();
  static const int kInstrumentNameFieldNumber = 1;
  const ::std::string& instrument_name() const;
  void set_instrument_name(const ::std::string& value);
  #if LANG_CXX11
  void set_instrument_name(::std::string&& value);
  #endif
  void set_instrument_name(const char* value);
  void set_instrument_name(const char* value, size_t size);
  ::std::string* mutable_instrument_name();
  ::std::string* release_instrument_name();
  void set_allocated_instrument_name(::std::string* instrument_name);

  // string symbol = 2;
  void clear_symbol();
  static const int kSymbolFieldNumber = 2;
  const ::std::string& symbol() const;
  void set_symbol(const ::std::string& value);
  #if LANG_CXX11
  void set_symbol(::std::string&& value);
  #endif
  void set_symbol(const char* value);
  void set_symbol(const char* value, size_t size);
  ::std::string* mutable_symbol();
  ::std::string* release_symbol();
  void set_allocated_symbol(::std::string* symbol);

  // string instrument_id = 3;
  void clear_instrument_id();
  static const int kInstrumentIdFieldNumber = 3;
  const ::std::string& instrument_id() const;
  void set_instrument_id(const ::std::string& value);
  #if LANG_CXX11
  void set_instrument_id(::std::string&& value);
  #endif
  void set_instrument_id(const char* value);
  void set_instrument_id(const char* value, size_t size);
  ::std::string* mutable_instrument_id();
  ::std::string* release_instrument_id();
  void set_allocated_instrument_id(::std::string* instrument_id);

  // string exchange_id = 4;
  void clear_exchange_id();
  static const int kExchangeIdFieldNumber = 4;
  const ::std::string& exchange_id() const;
  void set_exchange_id(const ::std::string& value);
  #if LANG_CXX11
  void set_exchange_id(::std::string&& value);
  #endif
  void set_exchange_id(const char* value);
  void set_exchange_id(const char* value, size_t size);
  ::std::string* mutable_exchange_id();
  ::std::string* release_exchange_id();
  void set_allocated_exchange_id(::std::string* exchange_id);

  // string client_id = 5;
  void clear_client_id();
  static const int kClientIdFieldNumber = 5;
  const ::std::string& client_id() const;
  void set_client_id(const ::std::string& value);
  #if LANG_CXX11
  void set_client_id(::std::string&& value);
  #endif
  void set_client_id(const char* value);
  void set_client_id(const char* value, size_t size);
  ::std::string* mutable_client_id();
  ::std::string* release_client_id();
  void set_allocated_client_id(::std::string* client_id);

  // string account_id = 6;
  void clear_account_id();
  static const int kAccountIdFieldNumber = 6;
  const ::std::string& account_id() const;
  void set_account_id(const ::std::string& value);
  #if LANG_CXX11
  void set_account_id(::std::string&& value);
  #endif
  void set_account_id(const char* value);
  void set_account_id(const char* value, size_t size);
  ::std::string* mutable_account_id();
  ::std::string* release_account_id();
  void set_allocated_account_id(::std::string* account_id);

  // string id = 14;
  void clear_id();
  static const int kIdFieldNumber = 14;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string tradeid = 15;
  void clear_tradeid();
  static const int kTradeidFieldNumber = 15;
  const ::std::string& tradeid() const;
  void set_tradeid(const ::std::string& value);
  #if LANG_CXX11
  void set_tradeid(::std::string&& value);
  #endif
  void set_tradeid(const char* value);
  void set_tradeid(const char* value, size_t size);
  ::std::string* mutable_tradeid();
  ::std::string* release_tradeid();
  void set_allocated_tradeid(::std::string* tradeid);

  // string reservechar64 = 18;
  void clear_reservechar64();
  static const int kReservechar64FieldNumber = 18;
  const ::std::string& reservechar64() const;
  void set_reservechar64(const ::std::string& value);
  #if LANG_CXX11
  void set_reservechar64(::std::string&& value);
  #endif
  void set_reservechar64(const char* value);
  void set_reservechar64(const char* value, size_t size);
  ::std::string* mutable_reservechar64();
  ::std::string* release_reservechar64();
  void set_allocated_reservechar64(::std::string* reservechar64);

  // string portfolioid1 = 19;
  void clear_portfolioid1();
  static const int kPortfolioid1FieldNumber = 19;
  const ::std::string& portfolioid1() const;
  void set_portfolioid1(const ::std::string& value);
  #if LANG_CXX11
  void set_portfolioid1(::std::string&& value);
  #endif
  void set_portfolioid1(const char* value);
  void set_portfolioid1(const char* value, size_t size);
  ::std::string* mutable_portfolioid1();
  ::std::string* release_portfolioid1();
  void set_allocated_portfolioid1(::std::string* portfolioid1);

  // string portfolioid2 = 20;
  void clear_portfolioid2();
  static const int kPortfolioid2FieldNumber = 20;
  const ::std::string& portfolioid2() const;
  void set_portfolioid2(const ::std::string& value);
  #if LANG_CXX11
  void set_portfolioid2(::std::string&& value);
  #endif
  void set_portfolioid2(const char* value);
  void set_portfolioid2(const char* value, size_t size);
  ::std::string* mutable_portfolioid2();
  ::std::string* release_portfolioid2();
  void set_allocated_portfolioid2(::std::string* portfolioid2);

  // string portfolioid3 = 21;
  void clear_portfolioid3();
  static const int kPortfolioid3FieldNumber = 21;
  const ::std::string& portfolioid3() const;
  void set_portfolioid3(const ::std::string& value);
  #if LANG_CXX11
  void set_portfolioid3(::std::string&& value);
  #endif
  void set_portfolioid3(const char* value);
  void set_portfolioid3(const char* value, size_t size);
  ::std::string* mutable_portfolioid3();
  ::std::string* release_portfolioid3();
  void set_allocated_portfolioid3(::std::string* portfolioid3);

  // double qty = 8;
  void clear_qty();
  static const int kQtyFieldNumber = 8;
  double qty() const;
  void set_qty(double value);

  // .LT.OrderSide side = 7;
  void clear_side();
  static const int kSideFieldNumber = 7;
  ::LT::OrderSide side() const;
  void set_side(::LT::OrderSide value);

  // .LT.OpenCloseType open_close = 10;
  void clear_open_close();
  static const int kOpenCloseFieldNumber = 10;
  ::LT::OpenCloseType open_close() const;
  void set_open_close(::LT::OpenCloseType value);

  // double price = 9;
  void clear_price();
  static const int kPriceFieldNumber = 9;
  double price() const;
  void set_price(double value);

  // .LT.HedgeFlagType hedge_flag = 11;
  void clear_hedge_flag();
  static const int kHedgeFlagFieldNumber = 11;
  ::LT::HedgeFlagType hedge_flag() const;
  void set_hedge_flag(::LT::HedgeFlagType value);

  // int32 date = 12;
  void clear_date();
  static const int kDateFieldNumber = 12;
  ::google::protobuf::int32 date() const;
  void set_date(::google::protobuf::int32 value);

  // int64 time = 13;
  void clear_time();
  static const int kTimeFieldNumber = 13;
  ::google::protobuf::int64 time() const;
  void set_time(::google::protobuf::int64 value);

  // double commission = 16;
  void clear_commission();
  static const int kCommissionFieldNumber = 16;
  double commission() const;
  void set_commission(double value);

  // int32 reserveint32 = 17;
  void clear_reserveint32();
  static const int kReserveint32FieldNumber = 17;
  ::google::protobuf::int32 reserveint32() const;
  void set_reserveint32(::google::protobuf::int32 value);

  // .LT.BusinessType business = 22;
  void clear_business();
  static const int kBusinessFieldNumber = 22;
  ::LT::BusinessType business() const;
  void set_business(::LT::BusinessType value);

  // @@protoc_insertion_point(class_scope:LT.TradeField)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr instrument_name_;
  ::google::protobuf::internal::ArenaStringPtr symbol_;
  ::google::protobuf::internal::ArenaStringPtr instrument_id_;
  ::google::protobuf::internal::ArenaStringPtr exchange_id_;
  ::google::protobuf::internal::ArenaStringPtr client_id_;
  ::google::protobuf::internal::ArenaStringPtr account_id_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr tradeid_;
  ::google::protobuf::internal::ArenaStringPtr reservechar64_;
  ::google::protobuf::internal::ArenaStringPtr portfolioid1_;
  ::google::protobuf::internal::ArenaStringPtr portfolioid2_;
  ::google::protobuf::internal::ArenaStringPtr portfolioid3_;
  double qty_;
  int side_;
  int open_close_;
  double price_;
  int hedge_flag_;
  ::google::protobuf::int32 date_;
  ::google::protobuf::int64 time_;
  double commission_;
  ::google::protobuf::int32 reserveint32_;
  int business_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_trader_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ServerInfoField : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LT.ServerInfoField) */ {
 public:
  ServerInfoField();
  virtual ~ServerInfoField();

  ServerInfoField(const ServerInfoField& from);

  inline ServerInfoField& operator=(const ServerInfoField& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServerInfoField(ServerInfoField&& from) noexcept
    : ServerInfoField() {
    *this = ::std::move(from);
  }

  inline ServerInfoField& operator=(ServerInfoField&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerInfoField& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerInfoField* internal_default_instance() {
    return reinterpret_cast<const ServerInfoField*>(
               &_ServerInfoField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(ServerInfoField* other);
  friend void swap(ServerInfoField& a, ServerInfoField& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServerInfoField* New() const final {
    return CreateMaybeMessage<ServerInfoField>(NULL);
  }

  ServerInfoField* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ServerInfoField>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ServerInfoField& from);
  void MergeFrom(const ServerInfoField& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerInfoField* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string broker_id = 9;
  void clear_broker_id();
  static const int kBrokerIdFieldNumber = 9;
  const ::std::string& broker_id() const;
  void set_broker_id(const ::std::string& value);
  #if LANG_CXX11
  void set_broker_id(::std::string&& value);
  #endif
  void set_broker_id(const char* value);
  void set_broker_id(const char* value, size_t size);
  ::std::string* mutable_broker_id();
  ::std::string* release_broker_id();
  void set_allocated_broker_id(::std::string* broker_id);

  // string user_product_info = 10;
  void clear_user_product_info();
  static const int kUserProductInfoFieldNumber = 10;
  const ::std::string& user_product_info() const;
  void set_user_product_info(const ::std::string& value);
  #if LANG_CXX11
  void set_user_product_info(::std::string&& value);
  #endif
  void set_user_product_info(const char* value);
  void set_user_product_info(const char* value, size_t size);
  ::std::string* mutable_user_product_info();
  ::std::string* release_user_product_info();
  void set_allocated_user_product_info(::std::string* user_product_info);

  // string authcode = 11;
  void clear_authcode();
  static const int kAuthcodeFieldNumber = 11;
  const ::std::string& authcode() const;
  void set_authcode(const ::std::string& value);
  #if LANG_CXX11
  void set_authcode(::std::string&& value);
  #endif
  void set_authcode(const char* value);
  void set_authcode(const char* value, size_t size);
  ::std::string* mutable_authcode();
  ::std::string* release_authcode();
  void set_allocated_authcode(::std::string* authcode);

  // string address = 12;
  void clear_address();
  static const int kAddressFieldNumber = 12;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  #if LANG_CXX11
  void set_address(::std::string&& value);
  #endif
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // string config_path = 13;
  void clear_config_path();
  static const int kConfigPathFieldNumber = 13;
  const ::std::string& config_path() const;
  void set_config_path(const ::std::string& value);
  #if LANG_CXX11
  void set_config_path(::std::string&& value);
  #endif
  void set_config_path(const char* value);
  void set_config_path(const char* value, size_t size);
  ::std::string* mutable_config_path();
  ::std::string* release_config_path();
  void set_allocated_config_path(::std::string* config_path);

  // string extinfo = 14;
  void clear_extinfo();
  static const int kExtinfoFieldNumber = 14;
  const ::std::string& extinfo() const;
  void set_extinfo(const ::std::string& value);
  #if LANG_CXX11
  void set_extinfo(::std::string&& value);
  #endif
  void set_extinfo(const char* value);
  void set_extinfo(const char* value, size_t size);
  ::std::string* mutable_extinfo();
  ::std::string* release_extinfo();
  void set_allocated_extinfo(::std::string* extinfo);

  // bool is_using_udp = 1;
  void clear_is_using_udp();
  static const int kIsUsingUdpFieldNumber = 1;
  bool is_using_udp() const;
  void set_is_using_udp(bool value);

  // bool is_multicast = 2;
  void clear_is_multicast();
  static const int kIsMulticastFieldNumber = 2;
  bool is_multicast() const;
  void set_is_multicast(bool value);

  // int32 topicid = 3;
  void clear_topicid();
  static const int kTopicidFieldNumber = 3;
  ::google::protobuf::int32 topicid() const;
  void set_topicid(::google::protobuf::int32 value);

  // int32 port = 4;
  void clear_port();
  static const int kPortFieldNumber = 4;
  ::google::protobuf::int32 port() const;
  void set_port(::google::protobuf::int32 value);

  // .LT.ResumeType marketdata_topic_resume_type = 5;
  void clear_marketdata_topic_resume_type();
  static const int kMarketdataTopicResumeTypeFieldNumber = 5;
  ::LT::ResumeType marketdata_topic_resume_type() const;
  void set_marketdata_topic_resume_type(::LT::ResumeType value);

  // .LT.ResumeType private_topic_resume_type = 6;
  void clear_private_topic_resume_type();
  static const int kPrivateTopicResumeTypeFieldNumber = 6;
  ::LT::ResumeType private_topic_resume_type() const;
  void set_private_topic_resume_type(::LT::ResumeType value);

  // .LT.ResumeType public_topic_resume_type = 7;
  void clear_public_topic_resume_type();
  static const int kPublicTopicResumeTypeFieldNumber = 7;
  ::LT::ResumeType public_topic_resume_type() const;
  void set_public_topic_resume_type(::LT::ResumeType value);

  // .LT.ResumeType user_topic_resume_type = 8;
  void clear_user_topic_resume_type();
  static const int kUserTopicResumeTypeFieldNumber = 8;
  ::LT::ResumeType user_topic_resume_type() const;
  void set_user_topic_resume_type(::LT::ResumeType value);

  // @@protoc_insertion_point(class_scope:LT.ServerInfoField)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr broker_id_;
  ::google::protobuf::internal::ArenaStringPtr user_product_info_;
  ::google::protobuf::internal::ArenaStringPtr authcode_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  ::google::protobuf::internal::ArenaStringPtr config_path_;
  ::google::protobuf::internal::ArenaStringPtr extinfo_;
  bool is_using_udp_;
  bool is_multicast_;
  ::google::protobuf::int32 topicid_;
  ::google::protobuf::int32 port_;
  int marketdata_topic_resume_type_;
  int private_topic_resume_type_;
  int public_topic_resume_type_;
  int user_topic_resume_type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_trader_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserInfoField : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LT.UserInfoField) */ {
 public:
  UserInfoField();
  virtual ~UserInfoField();

  UserInfoField(const UserInfoField& from);

  inline UserInfoField& operator=(const UserInfoField& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserInfoField(UserInfoField&& from) noexcept
    : UserInfoField() {
    *this = ::std::move(from);
  }

  inline UserInfoField& operator=(UserInfoField&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserInfoField& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserInfoField* internal_default_instance() {
    return reinterpret_cast<const UserInfoField*>(
               &_UserInfoField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(UserInfoField* other);
  friend void swap(UserInfoField& a, UserInfoField& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserInfoField* New() const final {
    return CreateMaybeMessage<UserInfoField>(NULL);
  }

  UserInfoField* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserInfoField>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserInfoField& from);
  void MergeFrom(const UserInfoField& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserInfoField* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string user_id = 1;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  #if LANG_CXX11
  void set_user_id(::std::string&& value);
  #endif
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);

  // string password = 2;
  void clear_password();
  static const int kPasswordFieldNumber = 2;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // string extinfo_string = 3;
  void clear_extinfo_string();
  static const int kExtinfoStringFieldNumber = 3;
  const ::std::string& extinfo_string() const;
  void set_extinfo_string(const ::std::string& value);
  #if LANG_CXX11
  void set_extinfo_string(::std::string&& value);
  #endif
  void set_extinfo_string(const char* value);
  void set_extinfo_string(const char* value, size_t size);
  ::std::string* mutable_extinfo_string();
  ::std::string* release_extinfo_string();
  void set_allocated_extinfo_string(::std::string* extinfo_string);

  // int32 extinfo_int32 = 4;
  void clear_extinfo_int32();
  static const int kExtinfoInt32FieldNumber = 4;
  ::google::protobuf::int32 extinfo_int32() const;
  void set_extinfo_int32(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:LT.UserInfoField)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  ::google::protobuf::internal::ArenaStringPtr extinfo_string_;
  ::google::protobuf::int32 extinfo_int32_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_trader_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ErrorField : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LT.ErrorField) */ {
 public:
  ErrorField();
  virtual ~ErrorField();

  ErrorField(const ErrorField& from);

  inline ErrorField& operator=(const ErrorField& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ErrorField(ErrorField&& from) noexcept
    : ErrorField() {
    *this = ::std::move(from);
  }

  inline ErrorField& operator=(ErrorField&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ErrorField& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ErrorField* internal_default_instance() {
    return reinterpret_cast<const ErrorField*>(
               &_ErrorField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(ErrorField* other);
  friend void swap(ErrorField& a, ErrorField& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ErrorField* New() const final {
    return CreateMaybeMessage<ErrorField>(NULL);
  }

  ErrorField* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ErrorField>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ErrorField& from);
  void MergeFrom(const ErrorField& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ErrorField* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string text = 3;
  void clear_text();
  static const int kTextFieldNumber = 3;
  const ::std::string& text() const;
  void set_text(const ::std::string& value);
  #if LANG_CXX11
  void set_text(::std::string&& value);
  #endif
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  ::std::string* mutable_text();
  ::std::string* release_text();
  void set_allocated_text(::std::string* text);

  // string source = 4;
  void clear_source();
  static const int kSourceFieldNumber = 4;
  const ::std::string& source() const;
  void set_source(const ::std::string& value);
  #if LANG_CXX11
  void set_source(::std::string&& value);
  #endif
  void set_source(const char* value);
  void set_source(const char* value, size_t size);
  ::std::string* mutable_source();
  ::std::string* release_source();
  void set_allocated_source(::std::string* source);

  // int32 xerror_id = 1;
  void clear_xerror_id();
  static const int kXerrorIdFieldNumber = 1;
  ::google::protobuf::int32 xerror_id() const;
  void set_xerror_id(::google::protobuf::int32 value);

  // int32 raw_errorid = 2;
  void clear_raw_errorid();
  static const int kRawErroridFieldNumber = 2;
  ::google::protobuf::int32 raw_errorid() const;
  void set_raw_errorid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:LT.ErrorField)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr text_;
  ::google::protobuf::internal::ArenaStringPtr source_;
  ::google::protobuf::int32 xerror_id_;
  ::google::protobuf::int32 raw_errorid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_trader_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LogField : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LT.LogField) */ {
 public:
  LogField();
  virtual ~LogField();

  LogField(const LogField& from);

  inline LogField& operator=(const LogField& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LogField(LogField&& from) noexcept
    : LogField() {
    *this = ::std::move(from);
  }

  inline LogField& operator=(LogField&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LogField& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogField* internal_default_instance() {
    return reinterpret_cast<const LogField*>(
               &_LogField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(LogField* other);
  friend void swap(LogField& a, LogField& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LogField* New() const final {
    return CreateMaybeMessage<LogField>(NULL);
  }

  LogField* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LogField>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LogField& from);
  void MergeFrom(const LogField& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogField* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string message = 2;
  void clear_message();
  static const int kMessageFieldNumber = 2;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // .LT.LogLevel level = 1;
  void clear_level();
  static const int kLevelFieldNumber = 1;
  ::LT::LogLevel level() const;
  void set_level(::LT::LogLevel value);

  // @@protoc_insertion_point(class_scope:LT.LogField)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  int level_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_trader_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RspUserLoginField : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LT.RspUserLoginField) */ {
 public:
  RspUserLoginField();
  virtual ~RspUserLoginField();

  RspUserLoginField(const RspUserLoginField& from);

  inline RspUserLoginField& operator=(const RspUserLoginField& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RspUserLoginField(RspUserLoginField&& from) noexcept
    : RspUserLoginField() {
    *this = ::std::move(from);
  }

  inline RspUserLoginField& operator=(RspUserLoginField&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RspUserLoginField& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RspUserLoginField* internal_default_instance() {
    return reinterpret_cast<const RspUserLoginField*>(
               &_RspUserLoginField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(RspUserLoginField* other);
  friend void swap(RspUserLoginField& a, RspUserLoginField& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RspUserLoginField* New() const final {
    return CreateMaybeMessage<RspUserLoginField>(NULL);
  }

  RspUserLoginField* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RspUserLoginField>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RspUserLoginField& from);
  void MergeFrom(const RspUserLoginField& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RspUserLoginField* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string session_id = 4;
  void clear_session_id();
  static const int kSessionIdFieldNumber = 4;
  const ::std::string& session_id() const;
  void set_session_id(const ::std::string& value);
  #if LANG_CXX11
  void set_session_id(::std::string&& value);
  #endif
  void set_session_id(const char* value);
  void set_session_id(const char* value, size_t size);
  ::std::string* mutable_session_id();
  ::std::string* release_session_id();
  void set_allocated_session_id(::std::string* session_id);

  // string user_id = 5;
  void clear_user_id();
  static const int kUserIdFieldNumber = 5;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  #if LANG_CXX11
  void set_user_id(::std::string&& value);
  #endif
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);

  // string accountid = 6;
  void clear_accountid();
  static const int kAccountidFieldNumber = 6;
  const ::std::string& accountid() const;
  void set_accountid(const ::std::string& value);
  #if LANG_CXX11
  void set_accountid(::std::string&& value);
  #endif
  void set_accountid(const char* value);
  void set_accountid(const char* value, size_t size);
  ::std::string* mutable_accountid();
  ::std::string* release_accountid();
  void set_allocated_accountid(::std::string* accountid);

  // string investor_name = 7;
  void clear_investor_name();
  static const int kInvestorNameFieldNumber = 7;
  const ::std::string& investor_name() const;
  void set_investor_name(const ::std::string& value);
  #if LANG_CXX11
  void set_investor_name(::std::string&& value);
  #endif
  void set_investor_name(const char* value);
  void set_investor_name(const char* value, size_t size);
  ::std::string* mutable_investor_name();
  ::std::string* release_investor_name();
  void set_allocated_investor_name(::std::string* investor_name);

  // string text = 10;
  void clear_text();
  static const int kTextFieldNumber = 10;
  const ::std::string& text() const;
  void set_text(const ::std::string& value);
  #if LANG_CXX11
  void set_text(::std::string&& value);
  #endif
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  ::std::string* mutable_text();
  ::std::string* release_text();
  void set_allocated_text(::std::string* text);

  // string version = 11;
  void clear_version();
  static const int kVersionFieldNumber = 11;
  const ::std::string& version() const;
  void set_version(const ::std::string& value);
  #if LANG_CXX11
  void set_version(::std::string&& value);
  #endif
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  ::std::string* mutable_version();
  ::std::string* release_version();
  void set_allocated_version(::std::string* version);

  // string lang = 12;
  void clear_lang();
  static const int kLangFieldNumber = 12;
  const ::std::string& lang() const;
  void set_lang(const ::std::string& value);
  #if LANG_CXX11
  void set_lang(::std::string&& value);
  #endif
  void set_lang(const char* value);
  void set_lang(const char* value, size_t size);
  ::std::string* mutable_lang();
  ::std::string* release_lang();
  void set_allocated_lang(::std::string* lang);

  // int64 trading_day = 1;
  void clear_trading_day();
  static const int kTradingDayFieldNumber = 1;
  ::google::protobuf::int64 trading_day() const;
  void set_trading_day(::google::protobuf::int64 value);

  // int64 login_time = 2;
  void clear_login_time();
  static const int kLoginTimeFieldNumber = 2;
  ::google::protobuf::int64 login_time() const;
  void set_login_time(::google::protobuf::int64 value);

  // int32 xerror_id = 8;
  void clear_xerror_id();
  static const int kXerrorIdFieldNumber = 8;
  ::google::protobuf::int32 xerror_id() const;
  void set_xerror_id(::google::protobuf::int32 value);

  // int32 raw_errorid = 9;
  void clear_raw_errorid();
  static const int kRawErroridFieldNumber = 9;
  ::google::protobuf::int32 raw_errorid() const;
  void set_raw_errorid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:LT.RspUserLoginField)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr session_id_;
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  ::google::protobuf::internal::ArenaStringPtr accountid_;
  ::google::protobuf::internal::ArenaStringPtr investor_name_;
  ::google::protobuf::internal::ArenaStringPtr text_;
  ::google::protobuf::internal::ArenaStringPtr version_;
  ::google::protobuf::internal::ArenaStringPtr lang_;
  ::google::protobuf::int64 trading_day_;
  ::google::protobuf::int64 login_time_;
  ::google::protobuf::int32 xerror_id_;
  ::google::protobuf::int32 raw_errorid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_trader_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DepthMarketDataNField : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LT.DepthMarketDataNField) */ {
 public:
  DepthMarketDataNField();
  virtual ~DepthMarketDataNField();

  DepthMarketDataNField(const DepthMarketDataNField& from);

  inline DepthMarketDataNField& operator=(const DepthMarketDataNField& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DepthMarketDataNField(DepthMarketDataNField&& from) noexcept
    : DepthMarketDataNField() {
    *this = ::std::move(from);
  }

  inline DepthMarketDataNField& operator=(DepthMarketDataNField&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DepthMarketDataNField& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DepthMarketDataNField* internal_default_instance() {
    return reinterpret_cast<const DepthMarketDataNField*>(
               &_DepthMarketDataNField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(DepthMarketDataNField* other);
  friend void swap(DepthMarketDataNField& a, DepthMarketDataNField& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DepthMarketDataNField* New() const final {
    return CreateMaybeMessage<DepthMarketDataNField>(NULL);
  }

  DepthMarketDataNField* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DepthMarketDataNField>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DepthMarketDataNField& from);
  void MergeFrom(const DepthMarketDataNField& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DepthMarketDataNField* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string symbol = 6;
  void clear_symbol();
  static const int kSymbolFieldNumber = 6;
  const ::std::string& symbol() const;
  void set_symbol(const ::std::string& value);
  #if LANG_CXX11
  void set_symbol(::std::string&& value);
  #endif
  void set_symbol(const char* value);
  void set_symbol(const char* value, size_t size);
  ::std::string* mutable_symbol();
  ::std::string* release_symbol();
  void set_allocated_symbol(::std::string* symbol);

  // string instrument_id = 7;
  void clear_instrument_id();
  static const int kInstrumentIdFieldNumber = 7;
  const ::std::string& instrument_id() const;
  void set_instrument_id(const ::std::string& value);
  #if LANG_CXX11
  void set_instrument_id(::std::string&& value);
  #endif
  void set_instrument_id(const char* value);
  void set_instrument_id(const char* value, size_t size);
  ::std::string* mutable_instrument_id();
  ::std::string* release_instrument_id();
  void set_allocated_instrument_id(::std::string* instrument_id);

  // string exchange_id = 8;
  void clear_exchange_id();
  static const int kExchangeIdFieldNumber = 8;
  const ::std::string& exchange_id() const;
  void set_exchange_id(const ::std::string& value);
  #if LANG_CXX11
  void set_exchange_id(::std::string&& value);
  #endif
  void set_exchange_id(const char* value);
  void set_exchange_id(const char* value, size_t size);
  ::std::string* mutable_exchange_id();
  ::std::string* release_exchange_id();
  void set_allocated_exchange_id(::std::string* exchange_id);

  // int64 trading_day = 2;
  void clear_trading_day();
  static const int kTradingDayFieldNumber = 2;
  ::google::protobuf::int64 trading_day() const;
  void set_trading_day(::google::protobuf::int64 value);

  // int64 action_day = 3;
  void clear_action_day();
  static const int kActionDayFieldNumber = 3;
  ::google::protobuf::int64 action_day() const;
  void set_action_day(::google::protobuf::int64 value);

  // int64 update_time = 4;
  void clear_update_time();
  static const int kUpdateTimeFieldNumber = 4;
  ::google::protobuf::int64 update_time() const;
  void set_update_time(::google::protobuf::int64 value);

  // int64 update_millisec = 5;
  void clear_update_millisec();
  static const int kUpdateMillisecFieldNumber = 5;
  ::google::protobuf::int64 update_millisec() const;
  void set_update_millisec(::google::protobuf::int64 value);

  // int32 size = 1;
  void clear_size();
  static const int kSizeFieldNumber = 1;
  ::google::protobuf::int32 size() const;
  void set_size(::google::protobuf::int32 value);

  // .LT.ExchangeType exchange = 9;
  void clear_exchange();
  static const int kExchangeFieldNumber = 9;
  ::LT::ExchangeType exchange() const;
  void set_exchange(::LT::ExchangeType value);

  // double last_price = 10;
  void clear_last_price();
  static const int kLastPriceFieldNumber = 10;
  double last_price() const;
  void set_last_price(double value);

  // double volume = 11;
  void clear_volume();
  static const int kVolumeFieldNumber = 11;
  double volume() const;
  void set_volume(double value);

  // double turnover = 12;
  void clear_turnover();
  static const int kTurnoverFieldNumber = 12;
  double turnover() const;
  void set_turnover(double value);

  // double openinterest = 13;
  void clear_openinterest();
  static const int kOpeninterestFieldNumber = 13;
  double openinterest() const;
  void set_openinterest(double value);

  // double average_price = 14;
  void clear_average_price();
  static const int kAveragePriceFieldNumber = 14;
  double average_price() const;
  void set_average_price(double value);

  // double open_price = 15;
  void clear_open_price();
  static const int kOpenPriceFieldNumber = 15;
  double open_price() const;
  void set_open_price(double value);

  // double highest_price = 16;
  void clear_highest_price();
  static const int kHighestPriceFieldNumber = 16;
  double highest_price() const;
  void set_highest_price(double value);

  // double lowest_price = 17;
  void clear_lowest_price();
  static const int kLowestPriceFieldNumber = 17;
  double lowest_price() const;
  void set_lowest_price(double value);

  // double close_price = 18;
  void clear_close_price();
  static const int kClosePriceFieldNumber = 18;
  double close_price() const;
  void set_close_price(double value);

  // double settlement_price = 19;
  void clear_settlement_price();
  static const int kSettlementPriceFieldNumber = 19;
  double settlement_price() const;
  void set_settlement_price(double value);

  // double upperlimit_price = 20;
  void clear_upperlimit_price();
  static const int kUpperlimitPriceFieldNumber = 20;
  double upperlimit_price() const;
  void set_upperlimit_price(double value);

  // double lowerlimit_price = 21;
  void clear_lowerlimit_price();
  static const int kLowerlimitPriceFieldNumber = 21;
  double lowerlimit_price() const;
  void set_lowerlimit_price(double value);

  // double preclose_price = 22;
  void clear_preclose_price();
  static const int kPreclosePriceFieldNumber = 22;
  double preclose_price() const;
  void set_preclose_price(double value);

  // double presettlement_price = 23;
  void clear_presettlement_price();
  static const int kPresettlementPriceFieldNumber = 23;
  double presettlement_price() const;
  void set_presettlement_price(double value);

  // double preopeninterest = 24;
  void clear_preopeninterest();
  static const int kPreopeninterestFieldNumber = 24;
  double preopeninterest() const;
  void set_preopeninterest(double value);

  // .LT.TradingPhaseType trading_phase = 25;
  void clear_trading_phase();
  static const int kTradingPhaseFieldNumber = 25;
  ::LT::TradingPhaseType trading_phase() const;
  void set_trading_phase(::LT::TradingPhaseType value);

  // int32 bidcount = 26;
  void clear_bidcount();
  static const int kBidcountFieldNumber = 26;
  ::google::protobuf::int32 bidcount() const;
  void set_bidcount(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:LT.DepthMarketDataNField)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr symbol_;
  ::google::protobuf::internal::ArenaStringPtr instrument_id_;
  ::google::protobuf::internal::ArenaStringPtr exchange_id_;
  ::google::protobuf::int64 trading_day_;
  ::google::protobuf::int64 action_day_;
  ::google::protobuf::int64 update_time_;
  ::google::protobuf::int64 update_millisec_;
  ::google::protobuf::int32 size_;
  int exchange_;
  double last_price_;
  double volume_;
  double turnover_;
  double openinterest_;
  double average_price_;
  double open_price_;
  double highest_price_;
  double lowest_price_;
  double close_price_;
  double settlement_price_;
  double upperlimit_price_;
  double lowerlimit_price_;
  double preclose_price_;
  double presettlement_price_;
  double preopeninterest_;
  int trading_phase_;
  ::google::protobuf::int32 bidcount_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_trader_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DepthField : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LT.DepthField) */ {
 public:
  DepthField();
  virtual ~DepthField();

  DepthField(const DepthField& from);

  inline DepthField& operator=(const DepthField& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DepthField(DepthField&& from) noexcept
    : DepthField() {
    *this = ::std::move(from);
  }

  inline DepthField& operator=(DepthField&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DepthField& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DepthField* internal_default_instance() {
    return reinterpret_cast<const DepthField*>(
               &_DepthField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(DepthField* other);
  friend void swap(DepthField& a, DepthField& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DepthField* New() const final {
    return CreateMaybeMessage<DepthField>(NULL);
  }

  DepthField* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DepthField>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DepthField& from);
  void MergeFrom(const DepthField& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DepthField* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double price = 1;
  void clear_price();
  static const int kPriceFieldNumber = 1;
  double price() const;
  void set_price(double value);

  // double size = 2;
  void clear_size();
  static const int kSizeFieldNumber = 2;
  double size() const;
  void set_size(double value);

  // double count = 3;
  void clear_count();
  static const int kCountFieldNumber = 3;
  double count() const;
  void set_count(double value);

  // @@protoc_insertion_point(class_scope:LT.DepthField)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double price_;
  double size_;
  double count_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_trader_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class InstrumentField : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LT.InstrumentField) */ {
 public:
  InstrumentField();
  virtual ~InstrumentField();

  InstrumentField(const InstrumentField& from);

  inline InstrumentField& operator=(const InstrumentField& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InstrumentField(InstrumentField&& from) noexcept
    : InstrumentField() {
    *this = ::std::move(from);
  }

  inline InstrumentField& operator=(InstrumentField&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const InstrumentField& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InstrumentField* internal_default_instance() {
    return reinterpret_cast<const InstrumentField*>(
               &_InstrumentField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(InstrumentField* other);
  friend void swap(InstrumentField& a, InstrumentField& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InstrumentField* New() const final {
    return CreateMaybeMessage<InstrumentField>(NULL);
  }

  InstrumentField* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<InstrumentField>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const InstrumentField& from);
  void MergeFrom(const InstrumentField& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InstrumentField* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string instrument_name = 1;
  void clear_instrument_name();
  static const int kInstrumentNameFieldNumber = 1;
  const ::std::string& instrument_name() const;
  void set_instrument_name(const ::std::string& value);
  #if LANG_CXX11
  void set_instrument_name(::std::string&& value);
  #endif
  void set_instrument_name(const char* value);
  void set_instrument_name(const char* value, size_t size);
  ::std::string* mutable_instrument_name();
  ::std::string* release_instrument_name();
  void set_allocated_instrument_name(::std::string* instrument_name);

  // string symbol = 2;
  void clear_symbol();
  static const int kSymbolFieldNumber = 2;
  const ::std::string& symbol() const;
  void set_symbol(const ::std::string& value);
  #if LANG_CXX11
  void set_symbol(::std::string&& value);
  #endif
  void set_symbol(const char* value);
  void set_symbol(const char* value, size_t size);
  ::std::string* mutable_symbol();
  ::std::string* release_symbol();
  void set_allocated_symbol(::std::string* symbol);

  // string instrument_id = 3;
  void clear_instrument_id();
  static const int kInstrumentIdFieldNumber = 3;
  const ::std::string& instrument_id() const;
  void set_instrument_id(const ::std::string& value);
  #if LANG_CXX11
  void set_instrument_id(::std::string&& value);
  #endif
  void set_instrument_id(const char* value);
  void set_instrument_id(const char* value, size_t size);
  ::std::string* mutable_instrument_id();
  ::std::string* release_instrument_id();
  void set_allocated_instrument_id(::std::string* instrument_id);

  // string exchange_id = 4;
  void clear_exchange_id();
  static const int kExchangeIdFieldNumber = 4;
  const ::std::string& exchange_id() const;
  void set_exchange_id(const ::std::string& value);
  #if LANG_CXX11
  void set_exchange_id(::std::string&& value);
  #endif
  void set_exchange_id(const char* value);
  void set_exchange_id(const char* value, size_t size);
  ::std::string* mutable_exchange_id();
  ::std::string* release_exchange_id();
  void set_allocated_exchange_id(::std::string* exchange_id);

  // string client_id = 5;
  void clear_client_id();
  static const int kClientIdFieldNumber = 5;
  const ::std::string& client_id() const;
  void set_client_id(const ::std::string& value);
  #if LANG_CXX11
  void set_client_id(::std::string&& value);
  #endif
  void set_client_id(const char* value);
  void set_client_id(const char* value, size_t size);
  ::std::string* mutable_client_id();
  ::std::string* release_client_id();
  void set_allocated_client_id(::std::string* client_id);

  // string account_id = 6;
  void clear_account_id();
  static const int kAccountIdFieldNumber = 6;
  const ::std::string& account_id() const;
  void set_account_id(const ::std::string& value);
  #if LANG_CXX11
  void set_account_id(::std::string&& value);
  #endif
  void set_account_id(const char* value);
  void set_account_id(const char* value, size_t size);
  ::std::string* mutable_account_id();
  ::std::string* release_account_id();
  void set_allocated_account_id(::std::string* account_id);

  // string exchange_instid = 7;
  void clear_exchange_instid();
  static const int kExchangeInstidFieldNumber = 7;
  const ::std::string& exchange_instid() const;
  void set_exchange_instid(const ::std::string& value);
  #if LANG_CXX11
  void set_exchange_instid(::std::string&& value);
  #endif
  void set_exchange_instid(const char* value);
  void set_exchange_instid(const char* value, size_t size);
  ::std::string* mutable_exchange_instid();
  ::std::string* release_exchange_instid();
  void set_allocated_exchange_instid(::std::string* exchange_instid);

  // string product_id = 14;
  void clear_product_id();
  static const int kProductIdFieldNumber = 14;
  const ::std::string& product_id() const;
  void set_product_id(const ::std::string& value);
  #if LANG_CXX11
  void set_product_id(::std::string&& value);
  #endif
  void set_product_id(const char* value);
  void set_product_id(const char* value, size_t size);
  ::std::string* mutable_product_id();
  ::std::string* release_product_id();
  void set_allocated_product_id(::std::string* product_id);

  // string underlying_instrid = 15;
  void clear_underlying_instrid();
  static const int kUnderlyingInstridFieldNumber = 15;
  const ::std::string& underlying_instrid() const;
  void set_underlying_instrid(const ::std::string& value);
  #if LANG_CXX11
  void set_underlying_instrid(::std::string&& value);
  #endif
  void set_underlying_instrid(const char* value);
  void set_underlying_instrid(const char* value, size_t size);
  ::std::string* mutable_underlying_instrid();
  ::std::string* release_underlying_instrid();
  void set_allocated_underlying_instrid(::std::string* underlying_instrid);

  // .LT.InstrumentType type = 8;
  void clear_type();
  static const int kTypeFieldNumber = 8;
  ::LT::InstrumentType type() const;
  void set_type(::LT::InstrumentType value);

  // int32 volume_multiple = 9;
  void clear_volume_multiple();
  static const int kVolumeMultipleFieldNumber = 9;
  ::google::protobuf::int32 volume_multiple() const;
  void set_volume_multiple(::google::protobuf::int32 value);

  // double price_tick = 10;
  void clear_price_tick();
  static const int kPriceTickFieldNumber = 10;
  double price_tick() const;
  void set_price_tick(double value);

  // double strike_price = 12;
  void clear_strike_price();
  static const int kStrikePriceFieldNumber = 12;
  double strike_price() const;
  void set_strike_price(double value);

  // int32 expire_date = 11;
  void clear_expire_date();
  static const int kExpireDateFieldNumber = 11;
  ::google::protobuf::int32 expire_date() const;
  void set_expire_date(::google::protobuf::int32 value);

  // .LT.PutCall options_type = 13;
  void clear_options_type();
  static const int kOptionsTypeFieldNumber = 13;
  ::LT::PutCall options_type() const;
  void set_options_type(::LT::PutCall value);

  // .LT.InstLifePhaseType instlife_phase = 16;
  void clear_instlife_phase();
  static const int kInstlifePhaseFieldNumber = 16;
  ::LT::InstLifePhaseType instlife_phase() const;
  void set_instlife_phase(::LT::InstLifePhaseType value);

  // @@protoc_insertion_point(class_scope:LT.InstrumentField)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr instrument_name_;
  ::google::protobuf::internal::ArenaStringPtr symbol_;
  ::google::protobuf::internal::ArenaStringPtr instrument_id_;
  ::google::protobuf::internal::ArenaStringPtr exchange_id_;
  ::google::protobuf::internal::ArenaStringPtr client_id_;
  ::google::protobuf::internal::ArenaStringPtr account_id_;
  ::google::protobuf::internal::ArenaStringPtr exchange_instid_;
  ::google::protobuf::internal::ArenaStringPtr product_id_;
  ::google::protobuf::internal::ArenaStringPtr underlying_instrid_;
  int type_;
  ::google::protobuf::int32 volume_multiple_;
  double price_tick_;
  double strike_price_;
  ::google::protobuf::int32 expire_date_;
  int options_type_;
  int instlife_phase_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_trader_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AccountField : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LT.AccountField) */ {
 public:
  AccountField();
  virtual ~AccountField();

  AccountField(const AccountField& from);

  inline AccountField& operator=(const AccountField& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AccountField(AccountField&& from) noexcept
    : AccountField() {
    *this = ::std::move(from);
  }

  inline AccountField& operator=(AccountField&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AccountField& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AccountField* internal_default_instance() {
    return reinterpret_cast<const AccountField*>(
               &_AccountField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(AccountField* other);
  friend void swap(AccountField& a, AccountField& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AccountField* New() const final {
    return CreateMaybeMessage<AccountField>(NULL);
  }

  AccountField* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AccountField>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AccountField& from);
  void MergeFrom(const AccountField& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccountField* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string client_id = 1;
  void clear_client_id();
  static const int kClientIdFieldNumber = 1;
  const ::std::string& client_id() const;
  void set_client_id(const ::std::string& value);
  #if LANG_CXX11
  void set_client_id(::std::string&& value);
  #endif
  void set_client_id(const char* value);
  void set_client_id(const char* value, size_t size);
  ::std::string* mutable_client_id();
  ::std::string* release_client_id();
  void set_allocated_client_id(::std::string* client_id);

  // string account_id = 2;
  void clear_account_id();
  static const int kAccountIdFieldNumber = 2;
  const ::std::string& account_id() const;
  void set_account_id(const ::std::string& value);
  #if LANG_CXX11
  void set_account_id(::std::string&& value);
  #endif
  void set_account_id(const char* value);
  void set_account_id(const char* value, size_t size);
  ::std::string* mutable_account_id();
  ::std::string* release_account_id();
  void set_allocated_account_id(::std::string* account_id);

  // string currency_id = 3;
  void clear_currency_id();
  static const int kCurrencyIdFieldNumber = 3;
  const ::std::string& currency_id() const;
  void set_currency_id(const ::std::string& value);
  #if LANG_CXX11
  void set_currency_id(::std::string&& value);
  #endif
  void set_currency_id(const char* value);
  void set_currency_id(const char* value, size_t size);
  ::std::string* mutable_currency_id();
  ::std::string* release_currency_id();
  void set_allocated_currency_id(::std::string* currency_id);

  // double pre_balance = 4;
  void clear_pre_balance();
  static const int kPreBalanceFieldNumber = 4;
  double pre_balance() const;
  void set_pre_balance(double value);

  // double curr_margin = 5;
  void clear_curr_margin();
  static const int kCurrMarginFieldNumber = 5;
  double curr_margin() const;
  void set_curr_margin(double value);

  // double close_profit = 6;
  void clear_close_profit();
  static const int kCloseProfitFieldNumber = 6;
  double close_profit() const;
  void set_close_profit(double value);

  // double position_profit = 7;
  void clear_position_profit();
  static const int kPositionProfitFieldNumber = 7;
  double position_profit() const;
  void set_position_profit(double value);

  // double balance = 8;
  void clear_balance();
  static const int kBalanceFieldNumber = 8;
  double balance() const;
  void set_balance(double value);

  // double available = 9;
  void clear_available();
  static const int kAvailableFieldNumber = 9;
  double available() const;
  void set_available(double value);

  // double deposit = 10;
  void clear_deposit();
  static const int kDepositFieldNumber = 10;
  double deposit() const;
  void set_deposit(double value);

  // double withdraw = 11;
  void clear_withdraw();
  static const int kWithdrawFieldNumber = 11;
  double withdraw() const;
  void set_withdraw(double value);

  // double withdrawquota = 12;
  void clear_withdrawquota();
  static const int kWithdrawquotaFieldNumber = 12;
  double withdrawquota() const;
  void set_withdrawquota(double value);

  // double frozen_transfer_fee = 13;
  void clear_frozen_transfer_fee();
  static const int kFrozenTransferFeeFieldNumber = 13;
  double frozen_transfer_fee() const;
  void set_frozen_transfer_fee(double value);

  // double frozen_stamp_tax = 14;
  void clear_frozen_stamp_tax();
  static const int kFrozenStampTaxFieldNumber = 14;
  double frozen_stamp_tax() const;
  void set_frozen_stamp_tax(double value);

  // double frozen_commission = 15;
  void clear_frozen_commission();
  static const int kFrozenCommissionFieldNumber = 15;
  double frozen_commission() const;
  void set_frozen_commission(double value);

  // double frozen_cash = 16;
  void clear_frozen_cash();
  static const int kFrozenCashFieldNumber = 16;
  double frozen_cash() const;
  void set_frozen_cash(double value);

  // double transfer_fee = 17;
  void clear_transfer_fee();
  static const int kTransferFeeFieldNumber = 17;
  double transfer_fee() const;
  void set_transfer_fee(double value);

  // double stamp_tax = 18;
  void clear_stamp_tax();
  static const int kStampTaxFieldNumber = 18;
  double stamp_tax() const;
  void set_stamp_tax(double value);

  // double commission = 19;
  void clear_commission();
  static const int kCommissionFieldNumber = 19;
  double commission() const;
  void set_commission(double value);

  // double cashin = 20;
  void clear_cashin();
  static const int kCashinFieldNumber = 20;
  double cashin() const;
  void set_cashin(double value);

  // @@protoc_insertion_point(class_scope:LT.AccountField)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr client_id_;
  ::google::protobuf::internal::ArenaStringPtr account_id_;
  ::google::protobuf::internal::ArenaStringPtr currency_id_;
  double pre_balance_;
  double curr_margin_;
  double close_profit_;
  double position_profit_;
  double balance_;
  double available_;
  double deposit_;
  double withdraw_;
  double withdrawquota_;
  double frozen_transfer_fee_;
  double frozen_stamp_tax_;
  double frozen_commission_;
  double frozen_cash_;
  double transfer_fee_;
  double stamp_tax_;
  double commission_;
  double cashin_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_trader_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class QuoteRequestField : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LT.QuoteRequestField) */ {
 public:
  QuoteRequestField();
  virtual ~QuoteRequestField();

  QuoteRequestField(const QuoteRequestField& from);

  inline QuoteRequestField& operator=(const QuoteRequestField& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QuoteRequestField(QuoteRequestField&& from) noexcept
    : QuoteRequestField() {
    *this = ::std::move(from);
  }

  inline QuoteRequestField& operator=(QuoteRequestField&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const QuoteRequestField& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QuoteRequestField* internal_default_instance() {
    return reinterpret_cast<const QuoteRequestField*>(
               &_QuoteRequestField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(QuoteRequestField* other);
  friend void swap(QuoteRequestField& a, QuoteRequestField& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QuoteRequestField* New() const final {
    return CreateMaybeMessage<QuoteRequestField>(NULL);
  }

  QuoteRequestField* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<QuoteRequestField>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const QuoteRequestField& from);
  void MergeFrom(const QuoteRequestField& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QuoteRequestField* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string symbol = 1;
  void clear_symbol();
  static const int kSymbolFieldNumber = 1;
  const ::std::string& symbol() const;
  void set_symbol(const ::std::string& value);
  #if LANG_CXX11
  void set_symbol(::std::string&& value);
  #endif
  void set_symbol(const char* value);
  void set_symbol(const char* value, size_t size);
  ::std::string* mutable_symbol();
  ::std::string* release_symbol();
  void set_allocated_symbol(::std::string* symbol);

  // string instrument_id = 2;
  void clear_instrument_id();
  static const int kInstrumentIdFieldNumber = 2;
  const ::std::string& instrument_id() const;
  void set_instrument_id(const ::std::string& value);
  #if LANG_CXX11
  void set_instrument_id(::std::string&& value);
  #endif
  void set_instrument_id(const char* value);
  void set_instrument_id(const char* value, size_t size);
  ::std::string* mutable_instrument_id();
  ::std::string* release_instrument_id();
  void set_allocated_instrument_id(::std::string* instrument_id);

  // string exchange_id = 3;
  void clear_exchange_id();
  static const int kExchangeIdFieldNumber = 3;
  const ::std::string& exchange_id() const;
  void set_exchange_id(const ::std::string& value);
  #if LANG_CXX11
  void set_exchange_id(::std::string&& value);
  #endif
  void set_exchange_id(const char* value);
  void set_exchange_id(const char* value, size_t size);
  ::std::string* mutable_exchange_id();
  ::std::string* release_exchange_id();
  void set_allocated_exchange_id(::std::string* exchange_id);

  // string quote_id = 6;
  void clear_quote_id();
  static const int kQuoteIdFieldNumber = 6;
  const ::std::string& quote_id() const;
  void set_quote_id(const ::std::string& value);
  #if LANG_CXX11
  void set_quote_id(::std::string&& value);
  #endif
  void set_quote_id(const char* value);
  void set_quote_id(const char* value, size_t size);
  ::std::string* mutable_quote_id();
  ::std::string* release_quote_id();
  void set_allocated_quote_id(::std::string* quote_id);

  // int64 quote_time = 5;
  void clear_quote_time();
  static const int kQuoteTimeFieldNumber = 5;
  ::google::protobuf::int64 quote_time() const;
  void set_quote_time(::google::protobuf::int64 value);

  // int32 trading_day = 4;
  void clear_trading_day();
  static const int kTradingDayFieldNumber = 4;
  ::google::protobuf::int32 trading_day() const;
  void set_trading_day(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:LT.QuoteRequestField)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr symbol_;
  ::google::protobuf::internal::ArenaStringPtr instrument_id_;
  ::google::protobuf::internal::ArenaStringPtr exchange_id_;
  ::google::protobuf::internal::ArenaStringPtr quote_id_;
  ::google::protobuf::int64 quote_time_;
  ::google::protobuf::int32 trading_day_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_trader_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SettlementInfoField : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LT.SettlementInfoField) */ {
 public:
  SettlementInfoField();
  virtual ~SettlementInfoField();

  SettlementInfoField(const SettlementInfoField& from);

  inline SettlementInfoField& operator=(const SettlementInfoField& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SettlementInfoField(SettlementInfoField&& from) noexcept
    : SettlementInfoField() {
    *this = ::std::move(from);
  }

  inline SettlementInfoField& operator=(SettlementInfoField&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SettlementInfoField& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SettlementInfoField* internal_default_instance() {
    return reinterpret_cast<const SettlementInfoField*>(
               &_SettlementInfoField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(SettlementInfoField* other);
  friend void swap(SettlementInfoField& a, SettlementInfoField& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SettlementInfoField* New() const final {
    return CreateMaybeMessage<SettlementInfoField>(NULL);
  }

  SettlementInfoField* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SettlementInfoField>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SettlementInfoField& from);
  void MergeFrom(const SettlementInfoField& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SettlementInfoField* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 trading_day = 2;
  void clear_trading_day();
  static const int kTradingDayFieldNumber = 2;
  ::google::protobuf::int64 trading_day() const;
  void set_trading_day(::google::protobuf::int64 value);

  // int32 size = 1;
  void clear_size();
  static const int kSizeFieldNumber = 1;
  ::google::protobuf::int32 size() const;
  void set_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:LT.SettlementInfoField)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 trading_day_;
  ::google::protobuf::int32 size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_trader_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class InvestorField : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LT.InvestorField) */ {
 public:
  InvestorField();
  virtual ~InvestorField();

  InvestorField(const InvestorField& from);

  inline InvestorField& operator=(const InvestorField& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InvestorField(InvestorField&& from) noexcept
    : InvestorField() {
    *this = ::std::move(from);
  }

  inline InvestorField& operator=(InvestorField&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const InvestorField& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InvestorField* internal_default_instance() {
    return reinterpret_cast<const InvestorField*>(
               &_InvestorField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(InvestorField* other);
  friend void swap(InvestorField& a, InvestorField& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InvestorField* New() const final {
    return CreateMaybeMessage<InvestorField>(NULL);
  }

  InvestorField* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<InvestorField>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const InvestorField& from);
  void MergeFrom(const InvestorField& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InvestorField* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string investor_id = 1;
  void clear_investor_id();
  static const int kInvestorIdFieldNumber = 1;
  const ::std::string& investor_id() const;
  void set_investor_id(const ::std::string& value);
  #if LANG_CXX11
  void set_investor_id(::std::string&& value);
  #endif
  void set_investor_id(const char* value);
  void set_investor_id(const char* value, size_t size);
  ::std::string* mutable_investor_id();
  ::std::string* release_investor_id();
  void set_allocated_investor_id(::std::string* investor_id);

  // string broker_id = 2;
  void clear_broker_id();
  static const int kBrokerIdFieldNumber = 2;
  const ::std::string& broker_id() const;
  void set_broker_id(const ::std::string& value);
  #if LANG_CXX11
  void set_broker_id(::std::string&& value);
  #endif
  void set_broker_id(const char* value);
  void set_broker_id(const char* value, size_t size);
  ::std::string* mutable_broker_id();
  ::std::string* release_broker_id();
  void set_allocated_broker_id(::std::string* broker_id);

  // string identified_cardno = 4;
  void clear_identified_cardno();
  static const int kIdentifiedCardnoFieldNumber = 4;
  const ::std::string& identified_cardno() const;
  void set_identified_cardno(const ::std::string& value);
  #if LANG_CXX11
  void set_identified_cardno(::std::string&& value);
  #endif
  void set_identified_cardno(const char* value);
  void set_identified_cardno(const char* value, size_t size);
  ::std::string* mutable_identified_cardno();
  ::std::string* release_identified_cardno();
  void set_allocated_identified_cardno(::std::string* identified_cardno);

  // string investor_name = 5;
  void clear_investor_name();
  static const int kInvestorNameFieldNumber = 5;
  const ::std::string& investor_name() const;
  void set_investor_name(const ::std::string& value);
  #if LANG_CXX11
  void set_investor_name(::std::string&& value);
  #endif
  void set_investor_name(const char* value);
  void set_investor_name(const char* value, size_t size);
  ::std::string* mutable_investor_name();
  ::std::string* release_investor_name();
  void set_allocated_investor_name(::std::string* investor_name);

  // .LT.IdCardType identified_card_type = 3;
  void clear_identified_card_type();
  static const int kIdentifiedCardTypeFieldNumber = 3;
  ::LT::IdCardType identified_card_type() const;
  void set_identified_card_type(::LT::IdCardType value);

  // @@protoc_insertion_point(class_scope:LT.InvestorField)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr investor_id_;
  ::google::protobuf::internal::ArenaStringPtr broker_id_;
  ::google::protobuf::internal::ArenaStringPtr identified_cardno_;
  ::google::protobuf::internal::ArenaStringPtr investor_name_;
  int identified_card_type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_trader_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class InstrumentStatusField : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LT.InstrumentStatusField) */ {
 public:
  InstrumentStatusField();
  virtual ~InstrumentStatusField();

  InstrumentStatusField(const InstrumentStatusField& from);

  inline InstrumentStatusField& operator=(const InstrumentStatusField& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InstrumentStatusField(InstrumentStatusField&& from) noexcept
    : InstrumentStatusField() {
    *this = ::std::move(from);
  }

  inline InstrumentStatusField& operator=(InstrumentStatusField&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const InstrumentStatusField& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InstrumentStatusField* internal_default_instance() {
    return reinterpret_cast<const InstrumentStatusField*>(
               &_InstrumentStatusField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(InstrumentStatusField* other);
  friend void swap(InstrumentStatusField& a, InstrumentStatusField& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InstrumentStatusField* New() const final {
    return CreateMaybeMessage<InstrumentStatusField>(NULL);
  }

  InstrumentStatusField* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<InstrumentStatusField>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const InstrumentStatusField& from);
  void MergeFrom(const InstrumentStatusField& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InstrumentStatusField* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string symbol = 1;
  void clear_symbol();
  static const int kSymbolFieldNumber = 1;
  const ::std::string& symbol() const;
  void set_symbol(const ::std::string& value);
  #if LANG_CXX11
  void set_symbol(::std::string&& value);
  #endif
  void set_symbol(const char* value);
  void set_symbol(const char* value, size_t size);
  ::std::string* mutable_symbol();
  ::std::string* release_symbol();
  void set_allocated_symbol(::std::string* symbol);

  // string instrument_id = 2;
  void clear_instrument_id();
  static const int kInstrumentIdFieldNumber = 2;
  const ::std::string& instrument_id() const;
  void set_instrument_id(const ::std::string& value);
  #if LANG_CXX11
  void set_instrument_id(::std::string&& value);
  #endif
  void set_instrument_id(const char* value);
  void set_instrument_id(const char* value, size_t size);
  ::std::string* mutable_instrument_id();
  ::std::string* release_instrument_id();
  void set_allocated_instrument_id(::std::string* instrument_id);

  // string exchange_id = 3;
  void clear_exchange_id();
  static const int kExchangeIdFieldNumber = 3;
  const ::std::string& exchange_id() const;
  void set_exchange_id(const ::std::string& value);
  #if LANG_CXX11
  void set_exchange_id(::std::string&& value);
  #endif
  void set_exchange_id(const char* value);
  void set_exchange_id(const char* value, size_t size);
  ::std::string* mutable_exchange_id();
  ::std::string* release_exchange_id();
  void set_allocated_exchange_id(::std::string* exchange_id);

  // int64 enter_time = 5;
  void clear_enter_time();
  static const int kEnterTimeFieldNumber = 5;
  ::google::protobuf::int64 enter_time() const;
  void set_enter_time(::google::protobuf::int64 value);

  // .LT.TradingPhaseType instrument_status = 4;
  void clear_instrument_status();
  static const int kInstrumentStatusFieldNumber = 4;
  ::LT::TradingPhaseType instrument_status() const;
  void set_instrument_status(::LT::TradingPhaseType value);

  // @@protoc_insertion_point(class_scope:LT.InstrumentStatusField)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr symbol_;
  ::google::protobuf::internal::ArenaStringPtr instrument_id_;
  ::google::protobuf::internal::ArenaStringPtr exchange_id_;
  ::google::protobuf::int64 enter_time_;
  int instrument_status_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_trader_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ReqQueryField

// string instrument_name = 1;
inline void ReqQueryField::clear_instrument_name() {
  instrument_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReqQueryField::instrument_name() const {
  // @@protoc_insertion_point(field_get:LT.ReqQueryField.instrument_name)
  return instrument_name_.GetNoArena();
}
inline void ReqQueryField::set_instrument_name(const ::std::string& value) {
  
  instrument_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LT.ReqQueryField.instrument_name)
}
#if LANG_CXX11
inline void ReqQueryField::set_instrument_name(::std::string&& value) {
  
  instrument_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LT.ReqQueryField.instrument_name)
}
#endif
inline void ReqQueryField::set_instrument_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  instrument_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LT.ReqQueryField.instrument_name)
}
inline void ReqQueryField::set_instrument_name(const char* value, size_t size) {
  
  instrument_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LT.ReqQueryField.instrument_name)
}
inline ::std::string* ReqQueryField::mutable_instrument_name() {
  
  // @@protoc_insertion_point(field_mutable:LT.ReqQueryField.instrument_name)
  return instrument_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqQueryField::release_instrument_name() {
  // @@protoc_insertion_point(field_release:LT.ReqQueryField.instrument_name)
  
  return instrument_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqQueryField::set_allocated_instrument_name(::std::string* instrument_name) {
  if (instrument_name != NULL) {
    
  } else {
    
  }
  instrument_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instrument_name);
  // @@protoc_insertion_point(field_set_allocated:LT.ReqQueryField.instrument_name)
}

// string symbol = 2;
inline void ReqQueryField::clear_symbol() {
  symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReqQueryField::symbol() const {
  // @@protoc_insertion_point(field_get:LT.ReqQueryField.symbol)
  return symbol_.GetNoArena();
}
inline void ReqQueryField::set_symbol(const ::std::string& value) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LT.ReqQueryField.symbol)
}
#if LANG_CXX11
inline void ReqQueryField::set_symbol(::std::string&& value) {
  
  symbol_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LT.ReqQueryField.symbol)
}
#endif
inline void ReqQueryField::set_symbol(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LT.ReqQueryField.symbol)
}
inline void ReqQueryField::set_symbol(const char* value, size_t size) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LT.ReqQueryField.symbol)
}
inline ::std::string* ReqQueryField::mutable_symbol() {
  
  // @@protoc_insertion_point(field_mutable:LT.ReqQueryField.symbol)
  return symbol_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqQueryField::release_symbol() {
  // @@protoc_insertion_point(field_release:LT.ReqQueryField.symbol)
  
  return symbol_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqQueryField::set_allocated_symbol(::std::string* symbol) {
  if (symbol != NULL) {
    
  } else {
    
  }
  symbol_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), symbol);
  // @@protoc_insertion_point(field_set_allocated:LT.ReqQueryField.symbol)
}

// string instrument_id = 3;
inline void ReqQueryField::clear_instrument_id() {
  instrument_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReqQueryField::instrument_id() const {
  // @@protoc_insertion_point(field_get:LT.ReqQueryField.instrument_id)
  return instrument_id_.GetNoArena();
}
inline void ReqQueryField::set_instrument_id(const ::std::string& value) {
  
  instrument_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LT.ReqQueryField.instrument_id)
}
#if LANG_CXX11
inline void ReqQueryField::set_instrument_id(::std::string&& value) {
  
  instrument_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LT.ReqQueryField.instrument_id)
}
#endif
inline void ReqQueryField::set_instrument_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  instrument_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LT.ReqQueryField.instrument_id)
}
inline void ReqQueryField::set_instrument_id(const char* value, size_t size) {
  
  instrument_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LT.ReqQueryField.instrument_id)
}
inline ::std::string* ReqQueryField::mutable_instrument_id() {
  
  // @@protoc_insertion_point(field_mutable:LT.ReqQueryField.instrument_id)
  return instrument_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqQueryField::release_instrument_id() {
  // @@protoc_insertion_point(field_release:LT.ReqQueryField.instrument_id)
  
  return instrument_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqQueryField::set_allocated_instrument_id(::std::string* instrument_id) {
  if (instrument_id != NULL) {
    
  } else {
    
  }
  instrument_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instrument_id);
  // @@protoc_insertion_point(field_set_allocated:LT.ReqQueryField.instrument_id)
}

// string exchange_id = 4;
inline void ReqQueryField::clear_exchange_id() {
  exchange_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReqQueryField::exchange_id() const {
  // @@protoc_insertion_point(field_get:LT.ReqQueryField.exchange_id)
  return exchange_id_.GetNoArena();
}
inline void ReqQueryField::set_exchange_id(const ::std::string& value) {
  
  exchange_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LT.ReqQueryField.exchange_id)
}
#if LANG_CXX11
inline void ReqQueryField::set_exchange_id(::std::string&& value) {
  
  exchange_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LT.ReqQueryField.exchange_id)
}
#endif
inline void ReqQueryField::set_exchange_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  exchange_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LT.ReqQueryField.exchange_id)
}
inline void ReqQueryField::set_exchange_id(const char* value, size_t size) {
  
  exchange_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LT.ReqQueryField.exchange_id)
}
inline ::std::string* ReqQueryField::mutable_exchange_id() {
  
  // @@protoc_insertion_point(field_mutable:LT.ReqQueryField.exchange_id)
  return exchange_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqQueryField::release_exchange_id() {
  // @@protoc_insertion_point(field_release:LT.ReqQueryField.exchange_id)
  
  return exchange_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqQueryField::set_allocated_exchange_id(::std::string* exchange_id) {
  if (exchange_id != NULL) {
    
  } else {
    
  }
  exchange_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchange_id);
  // @@protoc_insertion_point(field_set_allocated:LT.ReqQueryField.exchange_id)
}

// string client_id = 5;
inline void ReqQueryField::clear_client_id() {
  client_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReqQueryField::client_id() const {
  // @@protoc_insertion_point(field_get:LT.ReqQueryField.client_id)
  return client_id_.GetNoArena();
}
inline void ReqQueryField::set_client_id(const ::std::string& value) {
  
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LT.ReqQueryField.client_id)
}
#if LANG_CXX11
inline void ReqQueryField::set_client_id(::std::string&& value) {
  
  client_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LT.ReqQueryField.client_id)
}
#endif
inline void ReqQueryField::set_client_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LT.ReqQueryField.client_id)
}
inline void ReqQueryField::set_client_id(const char* value, size_t size) {
  
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LT.ReqQueryField.client_id)
}
inline ::std::string* ReqQueryField::mutable_client_id() {
  
  // @@protoc_insertion_point(field_mutable:LT.ReqQueryField.client_id)
  return client_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqQueryField::release_client_id() {
  // @@protoc_insertion_point(field_release:LT.ReqQueryField.client_id)
  
  return client_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqQueryField::set_allocated_client_id(::std::string* client_id) {
  if (client_id != NULL) {
    
  } else {
    
  }
  client_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_id);
  // @@protoc_insertion_point(field_set_allocated:LT.ReqQueryField.client_id)
}

// string account_id = 6;
inline void ReqQueryField::clear_account_id() {
  account_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReqQueryField::account_id() const {
  // @@protoc_insertion_point(field_get:LT.ReqQueryField.account_id)
  return account_id_.GetNoArena();
}
inline void ReqQueryField::set_account_id(const ::std::string& value) {
  
  account_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LT.ReqQueryField.account_id)
}
#if LANG_CXX11
inline void ReqQueryField::set_account_id(::std::string&& value) {
  
  account_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LT.ReqQueryField.account_id)
}
#endif
inline void ReqQueryField::set_account_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  account_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LT.ReqQueryField.account_id)
}
inline void ReqQueryField::set_account_id(const char* value, size_t size) {
  
  account_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LT.ReqQueryField.account_id)
}
inline ::std::string* ReqQueryField::mutable_account_id() {
  
  // @@protoc_insertion_point(field_mutable:LT.ReqQueryField.account_id)
  return account_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqQueryField::release_account_id() {
  // @@protoc_insertion_point(field_release:LT.ReqQueryField.account_id)
  
  return account_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqQueryField::set_allocated_account_id(::std::string* account_id) {
  if (account_id != NULL) {
    
  } else {
    
  }
  account_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account_id);
  // @@protoc_insertion_point(field_set_allocated:LT.ReqQueryField.account_id)
}

// string currency_id = 7;
inline void ReqQueryField::clear_currency_id() {
  currency_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReqQueryField::currency_id() const {
  // @@protoc_insertion_point(field_get:LT.ReqQueryField.currency_id)
  return currency_id_.GetNoArena();
}
inline void ReqQueryField::set_currency_id(const ::std::string& value) {
  
  currency_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LT.ReqQueryField.currency_id)
}
#if LANG_CXX11
inline void ReqQueryField::set_currency_id(::std::string&& value) {
  
  currency_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LT.ReqQueryField.currency_id)
}
#endif
inline void ReqQueryField::set_currency_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  currency_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LT.ReqQueryField.currency_id)
}
inline void ReqQueryField::set_currency_id(const char* value, size_t size) {
  
  currency_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LT.ReqQueryField.currency_id)
}
inline ::std::string* ReqQueryField::mutable_currency_id() {
  
  // @@protoc_insertion_point(field_mutable:LT.ReqQueryField.currency_id)
  return currency_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqQueryField::release_currency_id() {
  // @@protoc_insertion_point(field_release:LT.ReqQueryField.currency_id)
  
  return currency_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqQueryField::set_allocated_currency_id(::std::string* currency_id) {
  if (currency_id != NULL) {
    
  } else {
    
  }
  currency_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), currency_id);
  // @@protoc_insertion_point(field_set_allocated:LT.ReqQueryField.currency_id)
}

// int32 date_start = 8;
inline void ReqQueryField::clear_date_start() {
  date_start_ = 0;
}
inline ::google::protobuf::int32 ReqQueryField::date_start() const {
  // @@protoc_insertion_point(field_get:LT.ReqQueryField.date_start)
  return date_start_;
}
inline void ReqQueryField::set_date_start(::google::protobuf::int32 value) {
  
  date_start_ = value;
  // @@protoc_insertion_point(field_set:LT.ReqQueryField.date_start)
}

// int32 date_end = 9;
inline void ReqQueryField::clear_date_end() {
  date_end_ = 0;
}
inline ::google::protobuf::int32 ReqQueryField::date_end() const {
  // @@protoc_insertion_point(field_get:LT.ReqQueryField.date_end)
  return date_end_;
}
inline void ReqQueryField::set_date_end(::google::protobuf::int32 value) {
  
  date_end_ = value;
  // @@protoc_insertion_point(field_set:LT.ReqQueryField.date_end)
}

// int32 time_start = 10;
inline void ReqQueryField::clear_time_start() {
  time_start_ = 0;
}
inline ::google::protobuf::int32 ReqQueryField::time_start() const {
  // @@protoc_insertion_point(field_get:LT.ReqQueryField.time_start)
  return time_start_;
}
inline void ReqQueryField::set_time_start(::google::protobuf::int32 value) {
  
  time_start_ = value;
  // @@protoc_insertion_point(field_set:LT.ReqQueryField.time_start)
}

// int32 time_end = 11;
inline void ReqQueryField::clear_time_end() {
  time_end_ = 0;
}
inline ::google::protobuf::int32 ReqQueryField::time_end() const {
  // @@protoc_insertion_point(field_get:LT.ReqQueryField.time_end)
  return time_end_;
}
inline void ReqQueryField::set_time_end(::google::protobuf::int32 value) {
  
  time_end_ = value;
  // @@protoc_insertion_point(field_set:LT.ReqQueryField.time_end)
}

// string char64_id = 12;
inline void ReqQueryField::clear_char64_id() {
  char64_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReqQueryField::char64_id() const {
  // @@protoc_insertion_point(field_get:LT.ReqQueryField.char64_id)
  return char64_id_.GetNoArena();
}
inline void ReqQueryField::set_char64_id(const ::std::string& value) {
  
  char64_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LT.ReqQueryField.char64_id)
}
#if LANG_CXX11
inline void ReqQueryField::set_char64_id(::std::string&& value) {
  
  char64_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LT.ReqQueryField.char64_id)
}
#endif
inline void ReqQueryField::set_char64_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  char64_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LT.ReqQueryField.char64_id)
}
inline void ReqQueryField::set_char64_id(const char* value, size_t size) {
  
  char64_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LT.ReqQueryField.char64_id)
}
inline ::std::string* ReqQueryField::mutable_char64_id() {
  
  // @@protoc_insertion_point(field_mutable:LT.ReqQueryField.char64_id)
  return char64_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqQueryField::release_char64_id() {
  // @@protoc_insertion_point(field_release:LT.ReqQueryField.char64_id)
  
  return char64_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqQueryField::set_allocated_char64_id(::std::string* char64_id) {
  if (char64_id != NULL) {
    
  } else {
    
  }
  char64_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), char64_id);
  // @@protoc_insertion_point(field_set_allocated:LT.ReqQueryField.char64_id)
}

// int32 int32_id = 13;
inline void ReqQueryField::clear_int32_id() {
  int32_id_ = 0;
}
inline ::google::protobuf::int32 ReqQueryField::int32_id() const {
  // @@protoc_insertion_point(field_get:LT.ReqQueryField.int32_id)
  return int32_id_;
}
inline void ReqQueryField::set_int32_id(::google::protobuf::int32 value) {
  
  int32_id_ = value;
  // @@protoc_insertion_point(field_set:LT.ReqQueryField.int32_id)
}

// string char64_position_index = 14;
inline void ReqQueryField::clear_char64_position_index() {
  char64_position_index_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReqQueryField::char64_position_index() const {
  // @@protoc_insertion_point(field_get:LT.ReqQueryField.char64_position_index)
  return char64_position_index_.GetNoArena();
}
inline void ReqQueryField::set_char64_position_index(const ::std::string& value) {
  
  char64_position_index_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LT.ReqQueryField.char64_position_index)
}
#if LANG_CXX11
inline void ReqQueryField::set_char64_position_index(::std::string&& value) {
  
  char64_position_index_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LT.ReqQueryField.char64_position_index)
}
#endif
inline void ReqQueryField::set_char64_position_index(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  char64_position_index_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LT.ReqQueryField.char64_position_index)
}
inline void ReqQueryField::set_char64_position_index(const char* value, size_t size) {
  
  char64_position_index_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LT.ReqQueryField.char64_position_index)
}
inline ::std::string* ReqQueryField::mutable_char64_position_index() {
  
  // @@protoc_insertion_point(field_mutable:LT.ReqQueryField.char64_position_index)
  return char64_position_index_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqQueryField::release_char64_position_index() {
  // @@protoc_insertion_point(field_release:LT.ReqQueryField.char64_position_index)
  
  return char64_position_index_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqQueryField::set_allocated_char64_position_index(::std::string* char64_position_index) {
  if (char64_position_index != NULL) {
    
  } else {
    
  }
  char64_position_index_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), char64_position_index);
  // @@protoc_insertion_point(field_set_allocated:LT.ReqQueryField.char64_position_index)
}

// int32 int32_position_index = 15;
inline void ReqQueryField::clear_int32_position_index() {
  int32_position_index_ = 0;
}
inline ::google::protobuf::int32 ReqQueryField::int32_position_index() const {
  // @@protoc_insertion_point(field_get:LT.ReqQueryField.int32_position_index)
  return int32_position_index_;
}
inline void ReqQueryField::set_int32_position_index(::google::protobuf::int32 value) {
  
  int32_position_index_ = value;
  // @@protoc_insertion_point(field_set:LT.ReqQueryField.int32_position_index)
}

// string portfolio_id1 = 16;
inline void ReqQueryField::clear_portfolio_id1() {
  portfolio_id1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReqQueryField::portfolio_id1() const {
  // @@protoc_insertion_point(field_get:LT.ReqQueryField.portfolio_id1)
  return portfolio_id1_.GetNoArena();
}
inline void ReqQueryField::set_portfolio_id1(const ::std::string& value) {
  
  portfolio_id1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LT.ReqQueryField.portfolio_id1)
}
#if LANG_CXX11
inline void ReqQueryField::set_portfolio_id1(::std::string&& value) {
  
  portfolio_id1_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LT.ReqQueryField.portfolio_id1)
}
#endif
inline void ReqQueryField::set_portfolio_id1(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  portfolio_id1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LT.ReqQueryField.portfolio_id1)
}
inline void ReqQueryField::set_portfolio_id1(const char* value, size_t size) {
  
  portfolio_id1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LT.ReqQueryField.portfolio_id1)
}
inline ::std::string* ReqQueryField::mutable_portfolio_id1() {
  
  // @@protoc_insertion_point(field_mutable:LT.ReqQueryField.portfolio_id1)
  return portfolio_id1_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqQueryField::release_portfolio_id1() {
  // @@protoc_insertion_point(field_release:LT.ReqQueryField.portfolio_id1)
  
  return portfolio_id1_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqQueryField::set_allocated_portfolio_id1(::std::string* portfolio_id1) {
  if (portfolio_id1 != NULL) {
    
  } else {
    
  }
  portfolio_id1_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), portfolio_id1);
  // @@protoc_insertion_point(field_set_allocated:LT.ReqQueryField.portfolio_id1)
}

// string portfolio_id2 = 17;
inline void ReqQueryField::clear_portfolio_id2() {
  portfolio_id2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReqQueryField::portfolio_id2() const {
  // @@protoc_insertion_point(field_get:LT.ReqQueryField.portfolio_id2)
  return portfolio_id2_.GetNoArena();
}
inline void ReqQueryField::set_portfolio_id2(const ::std::string& value) {
  
  portfolio_id2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LT.ReqQueryField.portfolio_id2)
}
#if LANG_CXX11
inline void ReqQueryField::set_portfolio_id2(::std::string&& value) {
  
  portfolio_id2_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LT.ReqQueryField.portfolio_id2)
}
#endif
inline void ReqQueryField::set_portfolio_id2(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  portfolio_id2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LT.ReqQueryField.portfolio_id2)
}
inline void ReqQueryField::set_portfolio_id2(const char* value, size_t size) {
  
  portfolio_id2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LT.ReqQueryField.portfolio_id2)
}
inline ::std::string* ReqQueryField::mutable_portfolio_id2() {
  
  // @@protoc_insertion_point(field_mutable:LT.ReqQueryField.portfolio_id2)
  return portfolio_id2_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqQueryField::release_portfolio_id2() {
  // @@protoc_insertion_point(field_release:LT.ReqQueryField.portfolio_id2)
  
  return portfolio_id2_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqQueryField::set_allocated_portfolio_id2(::std::string* portfolio_id2) {
  if (portfolio_id2 != NULL) {
    
  } else {
    
  }
  portfolio_id2_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), portfolio_id2);
  // @@protoc_insertion_point(field_set_allocated:LT.ReqQueryField.portfolio_id2)
}

// string portfolio_id3 = 18;
inline void ReqQueryField::clear_portfolio_id3() {
  portfolio_id3_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReqQueryField::portfolio_id3() const {
  // @@protoc_insertion_point(field_get:LT.ReqQueryField.portfolio_id3)
  return portfolio_id3_.GetNoArena();
}
inline void ReqQueryField::set_portfolio_id3(const ::std::string& value) {
  
  portfolio_id3_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LT.ReqQueryField.portfolio_id3)
}
#if LANG_CXX11
inline void ReqQueryField::set_portfolio_id3(::std::string&& value) {
  
  portfolio_id3_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LT.ReqQueryField.portfolio_id3)
}
#endif
inline void ReqQueryField::set_portfolio_id3(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  portfolio_id3_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LT.ReqQueryField.portfolio_id3)
}
inline void ReqQueryField::set_portfolio_id3(const char* value, size_t size) {
  
  portfolio_id3_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LT.ReqQueryField.portfolio_id3)
}
inline ::std::string* ReqQueryField::mutable_portfolio_id3() {
  
  // @@protoc_insertion_point(field_mutable:LT.ReqQueryField.portfolio_id3)
  return portfolio_id3_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqQueryField::release_portfolio_id3() {
  // @@protoc_insertion_point(field_release:LT.ReqQueryField.portfolio_id3)
  
  return portfolio_id3_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqQueryField::set_allocated_portfolio_id3(::std::string* portfolio_id3) {
  if (portfolio_id3 != NULL) {
    
  } else {
    
  }
  portfolio_id3_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), portfolio_id3);
  // @@protoc_insertion_point(field_set_allocated:LT.ReqQueryField.portfolio_id3)
}

// .LT.BusinessType business = 19;
inline void ReqQueryField::clear_business() {
  business_ = 0;
}
inline ::LT::BusinessType ReqQueryField::business() const {
  // @@protoc_insertion_point(field_get:LT.ReqQueryField.business)
  return static_cast< ::LT::BusinessType >(business_);
}
inline void ReqQueryField::set_business(::LT::BusinessType value) {
  
  business_ = value;
  // @@protoc_insertion_point(field_set:LT.ReqQueryField.business)
}

// -------------------------------------------------------------------

// PositionField

// string instrument_name = 1;
inline void PositionField::clear_instrument_name() {
  instrument_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PositionField::instrument_name() const {
  // @@protoc_insertion_point(field_get:LT.PositionField.instrument_name)
  return instrument_name_.GetNoArena();
}
inline void PositionField::set_instrument_name(const ::std::string& value) {
  
  instrument_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LT.PositionField.instrument_name)
}
#if LANG_CXX11
inline void PositionField::set_instrument_name(::std::string&& value) {
  
  instrument_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LT.PositionField.instrument_name)
}
#endif
inline void PositionField::set_instrument_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  instrument_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LT.PositionField.instrument_name)
}
inline void PositionField::set_instrument_name(const char* value, size_t size) {
  
  instrument_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LT.PositionField.instrument_name)
}
inline ::std::string* PositionField::mutable_instrument_name() {
  
  // @@protoc_insertion_point(field_mutable:LT.PositionField.instrument_name)
  return instrument_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PositionField::release_instrument_name() {
  // @@protoc_insertion_point(field_release:LT.PositionField.instrument_name)
  
  return instrument_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PositionField::set_allocated_instrument_name(::std::string* instrument_name) {
  if (instrument_name != NULL) {
    
  } else {
    
  }
  instrument_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instrument_name);
  // @@protoc_insertion_point(field_set_allocated:LT.PositionField.instrument_name)
}

// string symbol = 2;
inline void PositionField::clear_symbol() {
  symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PositionField::symbol() const {
  // @@protoc_insertion_point(field_get:LT.PositionField.symbol)
  return symbol_.GetNoArena();
}
inline void PositionField::set_symbol(const ::std::string& value) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LT.PositionField.symbol)
}
#if LANG_CXX11
inline void PositionField::set_symbol(::std::string&& value) {
  
  symbol_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LT.PositionField.symbol)
}
#endif
inline void PositionField::set_symbol(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LT.PositionField.symbol)
}
inline void PositionField::set_symbol(const char* value, size_t size) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LT.PositionField.symbol)
}
inline ::std::string* PositionField::mutable_symbol() {
  
  // @@protoc_insertion_point(field_mutable:LT.PositionField.symbol)
  return symbol_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PositionField::release_symbol() {
  // @@protoc_insertion_point(field_release:LT.PositionField.symbol)
  
  return symbol_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PositionField::set_allocated_symbol(::std::string* symbol) {
  if (symbol != NULL) {
    
  } else {
    
  }
  symbol_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), symbol);
  // @@protoc_insertion_point(field_set_allocated:LT.PositionField.symbol)
}

// string instrument_id = 3;
inline void PositionField::clear_instrument_id() {
  instrument_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PositionField::instrument_id() const {
  // @@protoc_insertion_point(field_get:LT.PositionField.instrument_id)
  return instrument_id_.GetNoArena();
}
inline void PositionField::set_instrument_id(const ::std::string& value) {
  
  instrument_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LT.PositionField.instrument_id)
}
#if LANG_CXX11
inline void PositionField::set_instrument_id(::std::string&& value) {
  
  instrument_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LT.PositionField.instrument_id)
}
#endif
inline void PositionField::set_instrument_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  instrument_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LT.PositionField.instrument_id)
}
inline void PositionField::set_instrument_id(const char* value, size_t size) {
  
  instrument_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LT.PositionField.instrument_id)
}
inline ::std::string* PositionField::mutable_instrument_id() {
  
  // @@protoc_insertion_point(field_mutable:LT.PositionField.instrument_id)
  return instrument_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PositionField::release_instrument_id() {
  // @@protoc_insertion_point(field_release:LT.PositionField.instrument_id)
  
  return instrument_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PositionField::set_allocated_instrument_id(::std::string* instrument_id) {
  if (instrument_id != NULL) {
    
  } else {
    
  }
  instrument_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instrument_id);
  // @@protoc_insertion_point(field_set_allocated:LT.PositionField.instrument_id)
}

// string exchange_id = 4;
inline void PositionField::clear_exchange_id() {
  exchange_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PositionField::exchange_id() const {
  // @@protoc_insertion_point(field_get:LT.PositionField.exchange_id)
  return exchange_id_.GetNoArena();
}
inline void PositionField::set_exchange_id(const ::std::string& value) {
  
  exchange_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LT.PositionField.exchange_id)
}
#if LANG_CXX11
inline void PositionField::set_exchange_id(::std::string&& value) {
  
  exchange_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LT.PositionField.exchange_id)
}
#endif
inline void PositionField::set_exchange_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  exchange_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LT.PositionField.exchange_id)
}
inline void PositionField::set_exchange_id(const char* value, size_t size) {
  
  exchange_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LT.PositionField.exchange_id)
}
inline ::std::string* PositionField::mutable_exchange_id() {
  
  // @@protoc_insertion_point(field_mutable:LT.PositionField.exchange_id)
  return exchange_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PositionField::release_exchange_id() {
  // @@protoc_insertion_point(field_release:LT.PositionField.exchange_id)
  
  return exchange_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PositionField::set_allocated_exchange_id(::std::string* exchange_id) {
  if (exchange_id != NULL) {
    
  } else {
    
  }
  exchange_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchange_id);
  // @@protoc_insertion_point(field_set_allocated:LT.PositionField.exchange_id)
}

// string client_id = 5;
inline void PositionField::clear_client_id() {
  client_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PositionField::client_id() const {
  // @@protoc_insertion_point(field_get:LT.PositionField.client_id)
  return client_id_.GetNoArena();
}
inline void PositionField::set_client_id(const ::std::string& value) {
  
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LT.PositionField.client_id)
}
#if LANG_CXX11
inline void PositionField::set_client_id(::std::string&& value) {
  
  client_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LT.PositionField.client_id)
}
#endif
inline void PositionField::set_client_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LT.PositionField.client_id)
}
inline void PositionField::set_client_id(const char* value, size_t size) {
  
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LT.PositionField.client_id)
}
inline ::std::string* PositionField::mutable_client_id() {
  
  // @@protoc_insertion_point(field_mutable:LT.PositionField.client_id)
  return client_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PositionField::release_client_id() {
  // @@protoc_insertion_point(field_release:LT.PositionField.client_id)
  
  return client_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PositionField::set_allocated_client_id(::std::string* client_id) {
  if (client_id != NULL) {
    
  } else {
    
  }
  client_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_id);
  // @@protoc_insertion_point(field_set_allocated:LT.PositionField.client_id)
}

// string account_id = 6;
inline void PositionField::clear_account_id() {
  account_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PositionField::account_id() const {
  // @@protoc_insertion_point(field_get:LT.PositionField.account_id)
  return account_id_.GetNoArena();
}
inline void PositionField::set_account_id(const ::std::string& value) {
  
  account_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LT.PositionField.account_id)
}
#if LANG_CXX11
inline void PositionField::set_account_id(::std::string&& value) {
  
  account_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LT.PositionField.account_id)
}
#endif
inline void PositionField::set_account_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  account_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LT.PositionField.account_id)
}
inline void PositionField::set_account_id(const char* value, size_t size) {
  
  account_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LT.PositionField.account_id)
}
inline ::std::string* PositionField::mutable_account_id() {
  
  // @@protoc_insertion_point(field_mutable:LT.PositionField.account_id)
  return account_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PositionField::release_account_id() {
  // @@protoc_insertion_point(field_release:LT.PositionField.account_id)
  
  return account_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PositionField::set_allocated_account_id(::std::string* account_id) {
  if (account_id != NULL) {
    
  } else {
    
  }
  account_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account_id);
  // @@protoc_insertion_point(field_set_allocated:LT.PositionField.account_id)
}

// .LT.PositionSide side = 7;
inline void PositionField::clear_side() {
  side_ = 0;
}
inline ::LT::PositionSide PositionField::side() const {
  // @@protoc_insertion_point(field_get:LT.PositionField.side)
  return static_cast< ::LT::PositionSide >(side_);
}
inline void PositionField::set_side(::LT::PositionSide value) {
  
  side_ = value;
  // @@protoc_insertion_point(field_set:LT.PositionField.side)
}

// .LT.HedgeFlagType hedge_flag = 8;
inline void PositionField::clear_hedge_flag() {
  hedge_flag_ = 0;
}
inline ::LT::HedgeFlagType PositionField::hedge_flag() const {
  // @@protoc_insertion_point(field_get:LT.PositionField.hedge_flag)
  return static_cast< ::LT::HedgeFlagType >(hedge_flag_);
}
inline void PositionField::set_hedge_flag(::LT::HedgeFlagType value) {
  
  hedge_flag_ = value;
  // @@protoc_insertion_point(field_set:LT.PositionField.hedge_flag)
}

// int32 date = 9;
inline void PositionField::clear_date() {
  date_ = 0;
}
inline ::google::protobuf::int32 PositionField::date() const {
  // @@protoc_insertion_point(field_get:LT.PositionField.date)
  return date_;
}
inline void PositionField::set_date(::google::protobuf::int32 value) {
  
  date_ = value;
  // @@protoc_insertion_point(field_set:LT.PositionField.date)
}

// double position_cost = 10;
inline void PositionField::clear_position_cost() {
  position_cost_ = 0;
}
inline double PositionField::position_cost() const {
  // @@protoc_insertion_point(field_get:LT.PositionField.position_cost)
  return position_cost_;
}
inline void PositionField::set_position_cost(double value) {
  
  position_cost_ = value;
  // @@protoc_insertion_point(field_set:LT.PositionField.position_cost)
}

// double position = 11;
inline void PositionField::clear_position() {
  position_ = 0;
}
inline double PositionField::position() const {
  // @@protoc_insertion_point(field_get:LT.PositionField.position)
  return position_;
}
inline void PositionField::set_position(double value) {
  
  position_ = value;
  // @@protoc_insertion_point(field_set:LT.PositionField.position)
}

// double today_position = 12;
inline void PositionField::clear_today_position() {
  today_position_ = 0;
}
inline double PositionField::today_position() const {
  // @@protoc_insertion_point(field_get:LT.PositionField.today_position)
  return today_position_;
}
inline void PositionField::set_today_position(double value) {
  
  today_position_ = value;
  // @@protoc_insertion_point(field_set:LT.PositionField.today_position)
}

// double history_position = 13;
inline void PositionField::clear_history_position() {
  history_position_ = 0;
}
inline double PositionField::history_position() const {
  // @@protoc_insertion_point(field_get:LT.PositionField.history_position)
  return history_position_;
}
inline void PositionField::set_history_position(double value) {
  
  history_position_ = value;
  // @@protoc_insertion_point(field_set:LT.PositionField.history_position)
}

// double history_frozen = 14;
inline void PositionField::clear_history_frozen() {
  history_frozen_ = 0;
}
inline double PositionField::history_frozen() const {
  // @@protoc_insertion_point(field_get:LT.PositionField.history_frozen)
  return history_frozen_;
}
inline void PositionField::set_history_frozen(double value) {
  
  history_frozen_ = value;
  // @@protoc_insertion_point(field_set:LT.PositionField.history_frozen)
}

// double today_bs_position = 15;
inline void PositionField::clear_today_bs_position() {
  today_bs_position_ = 0;
}
inline double PositionField::today_bs_position() const {
  // @@protoc_insertion_point(field_get:LT.PositionField.today_bs_position)
  return today_bs_position_;
}
inline void PositionField::set_today_bs_position(double value) {
  
  today_bs_position_ = value;
  // @@protoc_insertion_point(field_set:LT.PositionField.today_bs_position)
}

// double today_bs_frozen = 16;
inline void PositionField::clear_today_bs_frozen() {
  today_bs_frozen_ = 0;
}
inline double PositionField::today_bs_frozen() const {
  // @@protoc_insertion_point(field_get:LT.PositionField.today_bs_frozen)
  return today_bs_frozen_;
}
inline void PositionField::set_today_bs_frozen(double value) {
  
  today_bs_frozen_ = value;
  // @@protoc_insertion_point(field_set:LT.PositionField.today_bs_frozen)
}

// double today_pr_position = 17;
inline void PositionField::clear_today_pr_position() {
  today_pr_position_ = 0;
}
inline double PositionField::today_pr_position() const {
  // @@protoc_insertion_point(field_get:LT.PositionField.today_pr_position)
  return today_pr_position_;
}
inline void PositionField::set_today_pr_position(double value) {
  
  today_pr_position_ = value;
  // @@protoc_insertion_point(field_set:LT.PositionField.today_pr_position)
}

// double today_pr_frozen = 18;
inline void PositionField::clear_today_pr_frozen() {
  today_pr_frozen_ = 0;
}
inline double PositionField::today_pr_frozen() const {
  // @@protoc_insertion_point(field_get:LT.PositionField.today_pr_frozen)
  return today_pr_frozen_;
}
inline void PositionField::set_today_pr_frozen(double value) {
  
  today_pr_frozen_ = value;
  // @@protoc_insertion_point(field_set:LT.PositionField.today_pr_frozen)
}

// string id = 19;
inline void PositionField::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PositionField::id() const {
  // @@protoc_insertion_point(field_get:LT.PositionField.id)
  return id_.GetNoArena();
}
inline void PositionField::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LT.PositionField.id)
}
#if LANG_CXX11
inline void PositionField::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LT.PositionField.id)
}
#endif
inline void PositionField::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LT.PositionField.id)
}
inline void PositionField::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LT.PositionField.id)
}
inline ::std::string* PositionField::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:LT.PositionField.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PositionField::release_id() {
  // @@protoc_insertion_point(field_release:LT.PositionField.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PositionField::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:LT.PositionField.id)
}

// string portfolio_id1 = 20;
inline void PositionField::clear_portfolio_id1() {
  portfolio_id1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PositionField::portfolio_id1() const {
  // @@protoc_insertion_point(field_get:LT.PositionField.portfolio_id1)
  return portfolio_id1_.GetNoArena();
}
inline void PositionField::set_portfolio_id1(const ::std::string& value) {
  
  portfolio_id1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LT.PositionField.portfolio_id1)
}
#if LANG_CXX11
inline void PositionField::set_portfolio_id1(::std::string&& value) {
  
  portfolio_id1_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LT.PositionField.portfolio_id1)
}
#endif
inline void PositionField::set_portfolio_id1(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  portfolio_id1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LT.PositionField.portfolio_id1)
}
inline void PositionField::set_portfolio_id1(const char* value, size_t size) {
  
  portfolio_id1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LT.PositionField.portfolio_id1)
}
inline ::std::string* PositionField::mutable_portfolio_id1() {
  
  // @@protoc_insertion_point(field_mutable:LT.PositionField.portfolio_id1)
  return portfolio_id1_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PositionField::release_portfolio_id1() {
  // @@protoc_insertion_point(field_release:LT.PositionField.portfolio_id1)
  
  return portfolio_id1_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PositionField::set_allocated_portfolio_id1(::std::string* portfolio_id1) {
  if (portfolio_id1 != NULL) {
    
  } else {
    
  }
  portfolio_id1_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), portfolio_id1);
  // @@protoc_insertion_point(field_set_allocated:LT.PositionField.portfolio_id1)
}

// string portfolio_id2 = 21;
inline void PositionField::clear_portfolio_id2() {
  portfolio_id2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PositionField::portfolio_id2() const {
  // @@protoc_insertion_point(field_get:LT.PositionField.portfolio_id2)
  return portfolio_id2_.GetNoArena();
}
inline void PositionField::set_portfolio_id2(const ::std::string& value) {
  
  portfolio_id2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LT.PositionField.portfolio_id2)
}
#if LANG_CXX11
inline void PositionField::set_portfolio_id2(::std::string&& value) {
  
  portfolio_id2_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LT.PositionField.portfolio_id2)
}
#endif
inline void PositionField::set_portfolio_id2(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  portfolio_id2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LT.PositionField.portfolio_id2)
}
inline void PositionField::set_portfolio_id2(const char* value, size_t size) {
  
  portfolio_id2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LT.PositionField.portfolio_id2)
}
inline ::std::string* PositionField::mutable_portfolio_id2() {
  
  // @@protoc_insertion_point(field_mutable:LT.PositionField.portfolio_id2)
  return portfolio_id2_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PositionField::release_portfolio_id2() {
  // @@protoc_insertion_point(field_release:LT.PositionField.portfolio_id2)
  
  return portfolio_id2_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PositionField::set_allocated_portfolio_id2(::std::string* portfolio_id2) {
  if (portfolio_id2 != NULL) {
    
  } else {
    
  }
  portfolio_id2_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), portfolio_id2);
  // @@protoc_insertion_point(field_set_allocated:LT.PositionField.portfolio_id2)
}

// string portfolio_id3 = 22;
inline void PositionField::clear_portfolio_id3() {
  portfolio_id3_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PositionField::portfolio_id3() const {
  // @@protoc_insertion_point(field_get:LT.PositionField.portfolio_id3)
  return portfolio_id3_.GetNoArena();
}
inline void PositionField::set_portfolio_id3(const ::std::string& value) {
  
  portfolio_id3_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LT.PositionField.portfolio_id3)
}
#if LANG_CXX11
inline void PositionField::set_portfolio_id3(::std::string&& value) {
  
  portfolio_id3_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LT.PositionField.portfolio_id3)
}
#endif
inline void PositionField::set_portfolio_id3(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  portfolio_id3_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LT.PositionField.portfolio_id3)
}
inline void PositionField::set_portfolio_id3(const char* value, size_t size) {
  
  portfolio_id3_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LT.PositionField.portfolio_id3)
}
inline ::std::string* PositionField::mutable_portfolio_id3() {
  
  // @@protoc_insertion_point(field_mutable:LT.PositionField.portfolio_id3)
  return portfolio_id3_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PositionField::release_portfolio_id3() {
  // @@protoc_insertion_point(field_release:LT.PositionField.portfolio_id3)
  
  return portfolio_id3_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PositionField::set_allocated_portfolio_id3(::std::string* portfolio_id3) {
  if (portfolio_id3 != NULL) {
    
  } else {
    
  }
  portfolio_id3_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), portfolio_id3);
  // @@protoc_insertion_point(field_set_allocated:LT.PositionField.portfolio_id3)
}

// .LT.BusinessType business = 23;
inline void PositionField::clear_business() {
  business_ = 0;
}
inline ::LT::BusinessType PositionField::business() const {
  // @@protoc_insertion_point(field_get:LT.PositionField.business)
  return static_cast< ::LT::BusinessType >(business_);
}
inline void PositionField::set_business(::LT::BusinessType value) {
  
  business_ = value;
  // @@protoc_insertion_point(field_set:LT.PositionField.business)
}

// -------------------------------------------------------------------

// QuoteField

// string instrument_name = 1;
inline void QuoteField::clear_instrument_name() {
  instrument_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QuoteField::instrument_name() const {
  // @@protoc_insertion_point(field_get:LT.QuoteField.instrument_name)
  return instrument_name_.GetNoArena();
}
inline void QuoteField::set_instrument_name(const ::std::string& value) {
  
  instrument_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LT.QuoteField.instrument_name)
}
#if LANG_CXX11
inline void QuoteField::set_instrument_name(::std::string&& value) {
  
  instrument_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LT.QuoteField.instrument_name)
}
#endif
inline void QuoteField::set_instrument_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  instrument_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LT.QuoteField.instrument_name)
}
inline void QuoteField::set_instrument_name(const char* value, size_t size) {
  
  instrument_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LT.QuoteField.instrument_name)
}
inline ::std::string* QuoteField::mutable_instrument_name() {
  
  // @@protoc_insertion_point(field_mutable:LT.QuoteField.instrument_name)
  return instrument_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QuoteField::release_instrument_name() {
  // @@protoc_insertion_point(field_release:LT.QuoteField.instrument_name)
  
  return instrument_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QuoteField::set_allocated_instrument_name(::std::string* instrument_name) {
  if (instrument_name != NULL) {
    
  } else {
    
  }
  instrument_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instrument_name);
  // @@protoc_insertion_point(field_set_allocated:LT.QuoteField.instrument_name)
}

// string symbol = 2;
inline void QuoteField::clear_symbol() {
  symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QuoteField::symbol() const {
  // @@protoc_insertion_point(field_get:LT.QuoteField.symbol)
  return symbol_.GetNoArena();
}
inline void QuoteField::set_symbol(const ::std::string& value) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LT.QuoteField.symbol)
}
#if LANG_CXX11
inline void QuoteField::set_symbol(::std::string&& value) {
  
  symbol_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LT.QuoteField.symbol)
}
#endif
inline void QuoteField::set_symbol(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LT.QuoteField.symbol)
}
inline void QuoteField::set_symbol(const char* value, size_t size) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LT.QuoteField.symbol)
}
inline ::std::string* QuoteField::mutable_symbol() {
  
  // @@protoc_insertion_point(field_mutable:LT.QuoteField.symbol)
  return symbol_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QuoteField::release_symbol() {
  // @@protoc_insertion_point(field_release:LT.QuoteField.symbol)
  
  return symbol_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QuoteField::set_allocated_symbol(::std::string* symbol) {
  if (symbol != NULL) {
    
  } else {
    
  }
  symbol_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), symbol);
  // @@protoc_insertion_point(field_set_allocated:LT.QuoteField.symbol)
}

// string instrument_id = 3;
inline void QuoteField::clear_instrument_id() {
  instrument_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QuoteField::instrument_id() const {
  // @@protoc_insertion_point(field_get:LT.QuoteField.instrument_id)
  return instrument_id_.GetNoArena();
}
inline void QuoteField::set_instrument_id(const ::std::string& value) {
  
  instrument_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LT.QuoteField.instrument_id)
}
#if LANG_CXX11
inline void QuoteField::set_instrument_id(::std::string&& value) {
  
  instrument_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LT.QuoteField.instrument_id)
}
#endif
inline void QuoteField::set_instrument_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  instrument_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LT.QuoteField.instrument_id)
}
inline void QuoteField::set_instrument_id(const char* value, size_t size) {
  
  instrument_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LT.QuoteField.instrument_id)
}
inline ::std::string* QuoteField::mutable_instrument_id() {
  
  // @@protoc_insertion_point(field_mutable:LT.QuoteField.instrument_id)
  return instrument_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QuoteField::release_instrument_id() {
  // @@protoc_insertion_point(field_release:LT.QuoteField.instrument_id)
  
  return instrument_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QuoteField::set_allocated_instrument_id(::std::string* instrument_id) {
  if (instrument_id != NULL) {
    
  } else {
    
  }
  instrument_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instrument_id);
  // @@protoc_insertion_point(field_set_allocated:LT.QuoteField.instrument_id)
}

// string exchange_id = 4;
inline void QuoteField::clear_exchange_id() {
  exchange_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QuoteField::exchange_id() const {
  // @@protoc_insertion_point(field_get:LT.QuoteField.exchange_id)
  return exchange_id_.GetNoArena();
}
inline void QuoteField::set_exchange_id(const ::std::string& value) {
  
  exchange_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LT.QuoteField.exchange_id)
}
#if LANG_CXX11
inline void QuoteField::set_exchange_id(::std::string&& value) {
  
  exchange_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LT.QuoteField.exchange_id)
}
#endif
inline void QuoteField::set_exchange_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  exchange_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LT.QuoteField.exchange_id)
}
inline void QuoteField::set_exchange_id(const char* value, size_t size) {
  
  exchange_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LT.QuoteField.exchange_id)
}
inline ::std::string* QuoteField::mutable_exchange_id() {
  
  // @@protoc_insertion_point(field_mutable:LT.QuoteField.exchange_id)
  return exchange_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QuoteField::release_exchange_id() {
  // @@protoc_insertion_point(field_release:LT.QuoteField.exchange_id)
  
  return exchange_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QuoteField::set_allocated_exchange_id(::std::string* exchange_id) {
  if (exchange_id != NULL) {
    
  } else {
    
  }
  exchange_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchange_id);
  // @@protoc_insertion_point(field_set_allocated:LT.QuoteField.exchange_id)
}

// string client_id = 5;
inline void QuoteField::clear_client_id() {
  client_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QuoteField::client_id() const {
  // @@protoc_insertion_point(field_get:LT.QuoteField.client_id)
  return client_id_.GetNoArena();
}
inline void QuoteField::set_client_id(const ::std::string& value) {
  
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LT.QuoteField.client_id)
}
#if LANG_CXX11
inline void QuoteField::set_client_id(::std::string&& value) {
  
  client_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LT.QuoteField.client_id)
}
#endif
inline void QuoteField::set_client_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LT.QuoteField.client_id)
}
inline void QuoteField::set_client_id(const char* value, size_t size) {
  
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LT.QuoteField.client_id)
}
inline ::std::string* QuoteField::mutable_client_id() {
  
  // @@protoc_insertion_point(field_mutable:LT.QuoteField.client_id)
  return client_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QuoteField::release_client_id() {
  // @@protoc_insertion_point(field_release:LT.QuoteField.client_id)
  
  return client_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QuoteField::set_allocated_client_id(::std::string* client_id) {
  if (client_id != NULL) {
    
  } else {
    
  }
  client_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_id);
  // @@protoc_insertion_point(field_set_allocated:LT.QuoteField.client_id)
}

// string account_id = 6;
inline void QuoteField::clear_account_id() {
  account_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QuoteField::account_id() const {
  // @@protoc_insertion_point(field_get:LT.QuoteField.account_id)
  return account_id_.GetNoArena();
}
inline void QuoteField::set_account_id(const ::std::string& value) {
  
  account_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LT.QuoteField.account_id)
}
#if LANG_CXX11
inline void QuoteField::set_account_id(::std::string&& value) {
  
  account_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LT.QuoteField.account_id)
}
#endif
inline void QuoteField::set_account_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  account_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LT.QuoteField.account_id)
}
inline void QuoteField::set_account_id(const char* value, size_t size) {
  
  account_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LT.QuoteField.account_id)
}
inline ::std::string* QuoteField::mutable_account_id() {
  
  // @@protoc_insertion_point(field_mutable:LT.QuoteField.account_id)
  return account_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QuoteField::release_account_id() {
  // @@protoc_insertion_point(field_release:LT.QuoteField.account_id)
  
  return account_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QuoteField::set_allocated_account_id(::std::string* account_id) {
  if (account_id != NULL) {
    
  } else {
    
  }
  account_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account_id);
  // @@protoc_insertion_point(field_set_allocated:LT.QuoteField.account_id)
}

// double ask_qty = 7;
inline void QuoteField::clear_ask_qty() {
  ask_qty_ = 0;
}
inline double QuoteField::ask_qty() const {
  // @@protoc_insertion_point(field_get:LT.QuoteField.ask_qty)
  return ask_qty_;
}
inline void QuoteField::set_ask_qty(double value) {
  
  ask_qty_ = value;
  // @@protoc_insertion_point(field_set:LT.QuoteField.ask_qty)
}

// double ask_price = 8;
inline void QuoteField::clear_ask_price() {
  ask_price_ = 0;
}
inline double QuoteField::ask_price() const {
  // @@protoc_insertion_point(field_get:LT.QuoteField.ask_price)
  return ask_price_;
}
inline void QuoteField::set_ask_price(double value) {
  
  ask_price_ = value;
  // @@protoc_insertion_point(field_set:LT.QuoteField.ask_price)
}

// .LT.OpenCloseType ask_open_close = 9;
inline void QuoteField::clear_ask_open_close() {
  ask_open_close_ = 0;
}
inline ::LT::OpenCloseType QuoteField::ask_open_close() const {
  // @@protoc_insertion_point(field_get:LT.QuoteField.ask_open_close)
  return static_cast< ::LT::OpenCloseType >(ask_open_close_);
}
inline void QuoteField::set_ask_open_close(::LT::OpenCloseType value) {
  
  ask_open_close_ = value;
  // @@protoc_insertion_point(field_set:LT.QuoteField.ask_open_close)
}

// .LT.HedgeFlagType ask_hedge_flag = 10;
inline void QuoteField::clear_ask_hedge_flag() {
  ask_hedge_flag_ = 0;
}
inline ::LT::HedgeFlagType QuoteField::ask_hedge_flag() const {
  // @@protoc_insertion_point(field_get:LT.QuoteField.ask_hedge_flag)
  return static_cast< ::LT::HedgeFlagType >(ask_hedge_flag_);
}
inline void QuoteField::set_ask_hedge_flag(::LT::HedgeFlagType value) {
  
  ask_hedge_flag_ = value;
  // @@protoc_insertion_point(field_set:LT.QuoteField.ask_hedge_flag)
}

// double bid_qty = 11;
inline void QuoteField::clear_bid_qty() {
  bid_qty_ = 0;
}
inline double QuoteField::bid_qty() const {
  // @@protoc_insertion_point(field_get:LT.QuoteField.bid_qty)
  return bid_qty_;
}
inline void QuoteField::set_bid_qty(double value) {
  
  bid_qty_ = value;
  // @@protoc_insertion_point(field_set:LT.QuoteField.bid_qty)
}

// double bid_price = 12;
inline void QuoteField::clear_bid_price() {
  bid_price_ = 0;
}
inline double QuoteField::bid_price() const {
  // @@protoc_insertion_point(field_get:LT.QuoteField.bid_price)
  return bid_price_;
}
inline void QuoteField::set_bid_price(double value) {
  
  bid_price_ = value;
  // @@protoc_insertion_point(field_set:LT.QuoteField.bid_price)
}

// .LT.OpenCloseType bid_open_close = 13;
inline void QuoteField::clear_bid_open_close() {
  bid_open_close_ = 0;
}
inline ::LT::OpenCloseType QuoteField::bid_open_close() const {
  // @@protoc_insertion_point(field_get:LT.QuoteField.bid_open_close)
  return static_cast< ::LT::OpenCloseType >(bid_open_close_);
}
inline void QuoteField::set_bid_open_close(::LT::OpenCloseType value) {
  
  bid_open_close_ = value;
  // @@protoc_insertion_point(field_set:LT.QuoteField.bid_open_close)
}

// .LT.HedgeFlagType bid_hedge_flag = 14;
inline void QuoteField::clear_bid_hedge_flag() {
  bid_hedge_flag_ = 0;
}
inline ::LT::HedgeFlagType QuoteField::bid_hedge_flag() const {
  // @@protoc_insertion_point(field_get:LT.QuoteField.bid_hedge_flag)
  return static_cast< ::LT::HedgeFlagType >(bid_hedge_flag_);
}
inline void QuoteField::set_bid_hedge_flag(::LT::HedgeFlagType value) {
  
  bid_hedge_flag_ = value;
  // @@protoc_insertion_point(field_set:LT.QuoteField.bid_hedge_flag)
}

// .LT.OrderStatus status = 15;
inline void QuoteField::clear_status() {
  status_ = 0;
}
inline ::LT::OrderStatus QuoteField::status() const {
  // @@protoc_insertion_point(field_get:LT.QuoteField.status)
  return static_cast< ::LT::OrderStatus >(status_);
}
inline void QuoteField::set_status(::LT::OrderStatus value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:LT.QuoteField.status)
}

// .LT.ExecType exec_type = 16;
inline void QuoteField::clear_exec_type() {
  exec_type_ = 0;
}
inline ::LT::ExecType QuoteField::exec_type() const {
  // @@protoc_insertion_point(field_get:LT.QuoteField.exec_type)
  return static_cast< ::LT::ExecType >(exec_type_);
}
inline void QuoteField::set_exec_type(::LT::ExecType value) {
  
  exec_type_ = value;
  // @@protoc_insertion_point(field_set:LT.QuoteField.exec_type)
}

// string quote_req_id = 17;
inline void QuoteField::clear_quote_req_id() {
  quote_req_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QuoteField::quote_req_id() const {
  // @@protoc_insertion_point(field_get:LT.QuoteField.quote_req_id)
  return quote_req_id_.GetNoArena();
}
inline void QuoteField::set_quote_req_id(const ::std::string& value) {
  
  quote_req_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LT.QuoteField.quote_req_id)
}
#if LANG_CXX11
inline void QuoteField::set_quote_req_id(::std::string&& value) {
  
  quote_req_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LT.QuoteField.quote_req_id)
}
#endif
inline void QuoteField::set_quote_req_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  quote_req_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LT.QuoteField.quote_req_id)
}
inline void QuoteField::set_quote_req_id(const char* value, size_t size) {
  
  quote_req_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LT.QuoteField.quote_req_id)
}
inline ::std::string* QuoteField::mutable_quote_req_id() {
  
  // @@protoc_insertion_point(field_mutable:LT.QuoteField.quote_req_id)
  return quote_req_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QuoteField::release_quote_req_id() {
  // @@protoc_insertion_point(field_release:LT.QuoteField.quote_req_id)
  
  return quote_req_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QuoteField::set_allocated_quote_req_id(::std::string* quote_req_id) {
  if (quote_req_id != NULL) {
    
  } else {
    
  }
  quote_req_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), quote_req_id);
  // @@protoc_insertion_point(field_set_allocated:LT.QuoteField.quote_req_id)
}

// string local_id = 18;
inline void QuoteField::clear_local_id() {
  local_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QuoteField::local_id() const {
  // @@protoc_insertion_point(field_get:LT.QuoteField.local_id)
  return local_id_.GetNoArena();
}
inline void QuoteField::set_local_id(const ::std::string& value) {
  
  local_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LT.QuoteField.local_id)
}
#if LANG_CXX11
inline void QuoteField::set_local_id(::std::string&& value) {
  
  local_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LT.QuoteField.local_id)
}
#endif
inline void QuoteField::set_local_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  local_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LT.QuoteField.local_id)
}
inline void QuoteField::set_local_id(const char* value, size_t size) {
  
  local_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LT.QuoteField.local_id)
}
inline ::std::string* QuoteField::mutable_local_id() {
  
  // @@protoc_insertion_point(field_mutable:LT.QuoteField.local_id)
  return local_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QuoteField::release_local_id() {
  // @@protoc_insertion_point(field_release:LT.QuoteField.local_id)
  
  return local_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QuoteField::set_allocated_local_id(::std::string* local_id) {
  if (local_id != NULL) {
    
  } else {
    
  }
  local_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), local_id);
  // @@protoc_insertion_point(field_set_allocated:LT.QuoteField.local_id)
}

// string id = 19;
inline void QuoteField::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QuoteField::id() const {
  // @@protoc_insertion_point(field_get:LT.QuoteField.id)
  return id_.GetNoArena();
}
inline void QuoteField::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LT.QuoteField.id)
}
#if LANG_CXX11
inline void QuoteField::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LT.QuoteField.id)
}
#endif
inline void QuoteField::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LT.QuoteField.id)
}
inline void QuoteField::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LT.QuoteField.id)
}
inline ::std::string* QuoteField::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:LT.QuoteField.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QuoteField::release_id() {
  // @@protoc_insertion_point(field_release:LT.QuoteField.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QuoteField::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:LT.QuoteField.id)
}

// string ask_id = 20;
inline void QuoteField::clear_ask_id() {
  ask_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QuoteField::ask_id() const {
  // @@protoc_insertion_point(field_get:LT.QuoteField.ask_id)
  return ask_id_.GetNoArena();
}
inline void QuoteField::set_ask_id(const ::std::string& value) {
  
  ask_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LT.QuoteField.ask_id)
}
#if LANG_CXX11
inline void QuoteField::set_ask_id(::std::string&& value) {
  
  ask_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LT.QuoteField.ask_id)
}
#endif
inline void QuoteField::set_ask_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ask_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LT.QuoteField.ask_id)
}
inline void QuoteField::set_ask_id(const char* value, size_t size) {
  
  ask_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LT.QuoteField.ask_id)
}
inline ::std::string* QuoteField::mutable_ask_id() {
  
  // @@protoc_insertion_point(field_mutable:LT.QuoteField.ask_id)
  return ask_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QuoteField::release_ask_id() {
  // @@protoc_insertion_point(field_release:LT.QuoteField.ask_id)
  
  return ask_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QuoteField::set_allocated_ask_id(::std::string* ask_id) {
  if (ask_id != NULL) {
    
  } else {
    
  }
  ask_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ask_id);
  // @@protoc_insertion_point(field_set_allocated:LT.QuoteField.ask_id)
}

// string bid_id = 21;
inline void QuoteField::clear_bid_id() {
  bid_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QuoteField::bid_id() const {
  // @@protoc_insertion_point(field_get:LT.QuoteField.bid_id)
  return bid_id_.GetNoArena();
}
inline void QuoteField::set_bid_id(const ::std::string& value) {
  
  bid_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LT.QuoteField.bid_id)
}
#if LANG_CXX11
inline void QuoteField::set_bid_id(::std::string&& value) {
  
  bid_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LT.QuoteField.bid_id)
}
#endif
inline void QuoteField::set_bid_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  bid_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LT.QuoteField.bid_id)
}
inline void QuoteField::set_bid_id(const char* value, size_t size) {
  
  bid_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LT.QuoteField.bid_id)
}
inline ::std::string* QuoteField::mutable_bid_id() {
  
  // @@protoc_insertion_point(field_mutable:LT.QuoteField.bid_id)
  return bid_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QuoteField::release_bid_id() {
  // @@protoc_insertion_point(field_release:LT.QuoteField.bid_id)
  
  return bid_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QuoteField::set_allocated_bid_id(::std::string* bid_id) {
  if (bid_id != NULL) {
    
  } else {
    
  }
  bid_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bid_id);
  // @@protoc_insertion_point(field_set_allocated:LT.QuoteField.bid_id)
}

// string ask_order_id = 22;
inline void QuoteField::clear_ask_order_id() {
  ask_order_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QuoteField::ask_order_id() const {
  // @@protoc_insertion_point(field_get:LT.QuoteField.ask_order_id)
  return ask_order_id_.GetNoArena();
}
inline void QuoteField::set_ask_order_id(const ::std::string& value) {
  
  ask_order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LT.QuoteField.ask_order_id)
}
#if LANG_CXX11
inline void QuoteField::set_ask_order_id(::std::string&& value) {
  
  ask_order_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LT.QuoteField.ask_order_id)
}
#endif
inline void QuoteField::set_ask_order_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ask_order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LT.QuoteField.ask_order_id)
}
inline void QuoteField::set_ask_order_id(const char* value, size_t size) {
  
  ask_order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LT.QuoteField.ask_order_id)
}
inline ::std::string* QuoteField::mutable_ask_order_id() {
  
  // @@protoc_insertion_point(field_mutable:LT.QuoteField.ask_order_id)
  return ask_order_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QuoteField::release_ask_order_id() {
  // @@protoc_insertion_point(field_release:LT.QuoteField.ask_order_id)
  
  return ask_order_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QuoteField::set_allocated_ask_order_id(::std::string* ask_order_id) {
  if (ask_order_id != NULL) {
    
  } else {
    
  }
  ask_order_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ask_order_id);
  // @@protoc_insertion_point(field_set_allocated:LT.QuoteField.ask_order_id)
}

// string bid_order_id = 23;
inline void QuoteField::clear_bid_order_id() {
  bid_order_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QuoteField::bid_order_id() const {
  // @@protoc_insertion_point(field_get:LT.QuoteField.bid_order_id)
  return bid_order_id_.GetNoArena();
}
inline void QuoteField::set_bid_order_id(const ::std::string& value) {
  
  bid_order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LT.QuoteField.bid_order_id)
}
#if LANG_CXX11
inline void QuoteField::set_bid_order_id(::std::string&& value) {
  
  bid_order_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LT.QuoteField.bid_order_id)
}
#endif
inline void QuoteField::set_bid_order_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  bid_order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LT.QuoteField.bid_order_id)
}
inline void QuoteField::set_bid_order_id(const char* value, size_t size) {
  
  bid_order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LT.QuoteField.bid_order_id)
}
inline ::std::string* QuoteField::mutable_bid_order_id() {
  
  // @@protoc_insertion_point(field_mutable:LT.QuoteField.bid_order_id)
  return bid_order_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QuoteField::release_bid_order_id() {
  // @@protoc_insertion_point(field_release:LT.QuoteField.bid_order_id)
  
  return bid_order_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QuoteField::set_allocated_bid_order_id(::std::string* bid_order_id) {
  if (bid_order_id != NULL) {
    
  } else {
    
  }
  bid_order_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bid_order_id);
  // @@protoc_insertion_point(field_set_allocated:LT.QuoteField.bid_order_id)
}

// int32 xerror_id = 24;
inline void QuoteField::clear_xerror_id() {
  xerror_id_ = 0;
}
inline ::google::protobuf::int32 QuoteField::xerror_id() const {
  // @@protoc_insertion_point(field_get:LT.QuoteField.xerror_id)
  return xerror_id_;
}
inline void QuoteField::set_xerror_id(::google::protobuf::int32 value) {
  
  xerror_id_ = value;
  // @@protoc_insertion_point(field_set:LT.QuoteField.xerror_id)
}

// int32 row_error_id = 25;
inline void QuoteField::clear_row_error_id() {
  row_error_id_ = 0;
}
inline ::google::protobuf::int32 QuoteField::row_error_id() const {
  // @@protoc_insertion_point(field_get:LT.QuoteField.row_error_id)
  return row_error_id_;
}
inline void QuoteField::set_row_error_id(::google::protobuf::int32 value) {
  
  row_error_id_ = value;
  // @@protoc_insertion_point(field_set:LT.QuoteField.row_error_id)
}

// string text = 26;
inline void QuoteField::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QuoteField::text() const {
  // @@protoc_insertion_point(field_get:LT.QuoteField.text)
  return text_.GetNoArena();
}
inline void QuoteField::set_text(const ::std::string& value) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LT.QuoteField.text)
}
#if LANG_CXX11
inline void QuoteField::set_text(::std::string&& value) {
  
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LT.QuoteField.text)
}
#endif
inline void QuoteField::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LT.QuoteField.text)
}
inline void QuoteField::set_text(const char* value, size_t size) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LT.QuoteField.text)
}
inline ::std::string* QuoteField::mutable_text() {
  
  // @@protoc_insertion_point(field_mutable:LT.QuoteField.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QuoteField::release_text() {
  // @@protoc_insertion_point(field_release:LT.QuoteField.text)
  
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QuoteField::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    
  } else {
    
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:LT.QuoteField.text)
}

// -------------------------------------------------------------------

// OrderField

// string instrument_name = 1;
inline void OrderField::clear_instrument_name() {
  instrument_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OrderField::instrument_name() const {
  // @@protoc_insertion_point(field_get:LT.OrderField.instrument_name)
  return instrument_name_.GetNoArena();
}
inline void OrderField::set_instrument_name(const ::std::string& value) {
  
  instrument_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LT.OrderField.instrument_name)
}
#if LANG_CXX11
inline void OrderField::set_instrument_name(::std::string&& value) {
  
  instrument_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LT.OrderField.instrument_name)
}
#endif
inline void OrderField::set_instrument_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  instrument_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LT.OrderField.instrument_name)
}
inline void OrderField::set_instrument_name(const char* value, size_t size) {
  
  instrument_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LT.OrderField.instrument_name)
}
inline ::std::string* OrderField::mutable_instrument_name() {
  
  // @@protoc_insertion_point(field_mutable:LT.OrderField.instrument_name)
  return instrument_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OrderField::release_instrument_name() {
  // @@protoc_insertion_point(field_release:LT.OrderField.instrument_name)
  
  return instrument_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OrderField::set_allocated_instrument_name(::std::string* instrument_name) {
  if (instrument_name != NULL) {
    
  } else {
    
  }
  instrument_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instrument_name);
  // @@protoc_insertion_point(field_set_allocated:LT.OrderField.instrument_name)
}

// string symbol = 2;
inline void OrderField::clear_symbol() {
  symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OrderField::symbol() const {
  // @@protoc_insertion_point(field_get:LT.OrderField.symbol)
  return symbol_.GetNoArena();
}
inline void OrderField::set_symbol(const ::std::string& value) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LT.OrderField.symbol)
}
#if LANG_CXX11
inline void OrderField::set_symbol(::std::string&& value) {
  
  symbol_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LT.OrderField.symbol)
}
#endif
inline void OrderField::set_symbol(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LT.OrderField.symbol)
}
inline void OrderField::set_symbol(const char* value, size_t size) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LT.OrderField.symbol)
}
inline ::std::string* OrderField::mutable_symbol() {
  
  // @@protoc_insertion_point(field_mutable:LT.OrderField.symbol)
  return symbol_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OrderField::release_symbol() {
  // @@protoc_insertion_point(field_release:LT.OrderField.symbol)
  
  return symbol_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OrderField::set_allocated_symbol(::std::string* symbol) {
  if (symbol != NULL) {
    
  } else {
    
  }
  symbol_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), symbol);
  // @@protoc_insertion_point(field_set_allocated:LT.OrderField.symbol)
}

// string instrument_id = 3;
inline void OrderField::clear_instrument_id() {
  instrument_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OrderField::instrument_id() const {
  // @@protoc_insertion_point(field_get:LT.OrderField.instrument_id)
  return instrument_id_.GetNoArena();
}
inline void OrderField::set_instrument_id(const ::std::string& value) {
  
  instrument_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LT.OrderField.instrument_id)
}
#if LANG_CXX11
inline void OrderField::set_instrument_id(::std::string&& value) {
  
  instrument_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LT.OrderField.instrument_id)
}
#endif
inline void OrderField::set_instrument_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  instrument_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LT.OrderField.instrument_id)
}
inline void OrderField::set_instrument_id(const char* value, size_t size) {
  
  instrument_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LT.OrderField.instrument_id)
}
inline ::std::string* OrderField::mutable_instrument_id() {
  
  // @@protoc_insertion_point(field_mutable:LT.OrderField.instrument_id)
  return instrument_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OrderField::release_instrument_id() {
  // @@protoc_insertion_point(field_release:LT.OrderField.instrument_id)
  
  return instrument_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OrderField::set_allocated_instrument_id(::std::string* instrument_id) {
  if (instrument_id != NULL) {
    
  } else {
    
  }
  instrument_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instrument_id);
  // @@protoc_insertion_point(field_set_allocated:LT.OrderField.instrument_id)
}

// string exchange_id = 4;
inline void OrderField::clear_exchange_id() {
  exchange_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OrderField::exchange_id() const {
  // @@protoc_insertion_point(field_get:LT.OrderField.exchange_id)
  return exchange_id_.GetNoArena();
}
inline void OrderField::set_exchange_id(const ::std::string& value) {
  
  exchange_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LT.OrderField.exchange_id)
}
#if LANG_CXX11
inline void OrderField::set_exchange_id(::std::string&& value) {
  
  exchange_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LT.OrderField.exchange_id)
}
#endif
inline void OrderField::set_exchange_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  exchange_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LT.OrderField.exchange_id)
}
inline void OrderField::set_exchange_id(const char* value, size_t size) {
  
  exchange_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LT.OrderField.exchange_id)
}
inline ::std::string* OrderField::mutable_exchange_id() {
  
  // @@protoc_insertion_point(field_mutable:LT.OrderField.exchange_id)
  return exchange_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OrderField::release_exchange_id() {
  // @@protoc_insertion_point(field_release:LT.OrderField.exchange_id)
  
  return exchange_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OrderField::set_allocated_exchange_id(::std::string* exchange_id) {
  if (exchange_id != NULL) {
    
  } else {
    
  }
  exchange_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchange_id);
  // @@protoc_insertion_point(field_set_allocated:LT.OrderField.exchange_id)
}

// string client_id = 5;
inline void OrderField::clear_client_id() {
  client_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OrderField::client_id() const {
  // @@protoc_insertion_point(field_get:LT.OrderField.client_id)
  return client_id_.GetNoArena();
}
inline void OrderField::set_client_id(const ::std::string& value) {
  
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LT.OrderField.client_id)
}
#if LANG_CXX11
inline void OrderField::set_client_id(::std::string&& value) {
  
  client_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LT.OrderField.client_id)
}
#endif
inline void OrderField::set_client_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LT.OrderField.client_id)
}
inline void OrderField::set_client_id(const char* value, size_t size) {
  
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LT.OrderField.client_id)
}
inline ::std::string* OrderField::mutable_client_id() {
  
  // @@protoc_insertion_point(field_mutable:LT.OrderField.client_id)
  return client_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OrderField::release_client_id() {
  // @@protoc_insertion_point(field_release:LT.OrderField.client_id)
  
  return client_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OrderField::set_allocated_client_id(::std::string* client_id) {
  if (client_id != NULL) {
    
  } else {
    
  }
  client_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_id);
  // @@protoc_insertion_point(field_set_allocated:LT.OrderField.client_id)
}

// string account_id = 6;
inline void OrderField::clear_account_id() {
  account_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OrderField::account_id() const {
  // @@protoc_insertion_point(field_get:LT.OrderField.account_id)
  return account_id_.GetNoArena();
}
inline void OrderField::set_account_id(const ::std::string& value) {
  
  account_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LT.OrderField.account_id)
}
#if LANG_CXX11
inline void OrderField::set_account_id(::std::string&& value) {
  
  account_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LT.OrderField.account_id)
}
#endif
inline void OrderField::set_account_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  account_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LT.OrderField.account_id)
}
inline void OrderField::set_account_id(const char* value, size_t size) {
  
  account_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LT.OrderField.account_id)
}
inline ::std::string* OrderField::mutable_account_id() {
  
  // @@protoc_insertion_point(field_mutable:LT.OrderField.account_id)
  return account_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OrderField::release_account_id() {
  // @@protoc_insertion_point(field_release:LT.OrderField.account_id)
  
  return account_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OrderField::set_allocated_account_id(::std::string* account_id) {
  if (account_id != NULL) {
    
  } else {
    
  }
  account_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account_id);
  // @@protoc_insertion_point(field_set_allocated:LT.OrderField.account_id)
}

// .LT.OrderSide size = 7;
inline void OrderField::clear_size() {
  size_ = 0;
}
inline ::LT::OrderSide OrderField::size() const {
  // @@protoc_insertion_point(field_get:LT.OrderField.size)
  return static_cast< ::LT::OrderSide >(size_);
}
inline void OrderField::set_size(::LT::OrderSide value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:LT.OrderField.size)
}

// double qty = 8;
inline void OrderField::clear_qty() {
  qty_ = 0;
}
inline double OrderField::qty() const {
  // @@protoc_insertion_point(field_get:LT.OrderField.qty)
  return qty_;
}
inline void OrderField::set_qty(double value) {
  
  qty_ = value;
  // @@protoc_insertion_point(field_set:LT.OrderField.qty)
}

// double price = 9;
inline void OrderField::clear_price() {
  price_ = 0;
}
inline double OrderField::price() const {
  // @@protoc_insertion_point(field_get:LT.OrderField.price)
  return price_;
}
inline void OrderField::set_price(double value) {
  
  price_ = value;
  // @@protoc_insertion_point(field_set:LT.OrderField.price)
}

// .LT.OpenCloseType open_close = 10;
inline void OrderField::clear_open_close() {
  open_close_ = 0;
}
inline ::LT::OpenCloseType OrderField::open_close() const {
  // @@protoc_insertion_point(field_get:LT.OrderField.open_close)
  return static_cast< ::LT::OpenCloseType >(open_close_);
}
inline void OrderField::set_open_close(::LT::OpenCloseType value) {
  
  open_close_ = value;
  // @@protoc_insertion_point(field_set:LT.OrderField.open_close)
}

// .LT.HedgeFlagType hedge_flag = 11;
inline void OrderField::clear_hedge_flag() {
  hedge_flag_ = 0;
}
inline ::LT::HedgeFlagType OrderField::hedge_flag() const {
  // @@protoc_insertion_point(field_get:LT.OrderField.hedge_flag)
  return static_cast< ::LT::HedgeFlagType >(hedge_flag_);
}
inline void OrderField::set_hedge_flag(::LT::HedgeFlagType value) {
  
  hedge_flag_ = value;
  // @@protoc_insertion_point(field_set:LT.OrderField.hedge_flag)
}

// int32 date = 12;
inline void OrderField::clear_date() {
  date_ = 0;
}
inline ::google::protobuf::int32 OrderField::date() const {
  // @@protoc_insertion_point(field_get:LT.OrderField.date)
  return date_;
}
inline void OrderField::set_date(::google::protobuf::int32 value) {
  
  date_ = value;
  // @@protoc_insertion_point(field_set:LT.OrderField.date)
}

// int64 time = 13;
inline void OrderField::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 OrderField::time() const {
  // @@protoc_insertion_point(field_get:LT.OrderField.time)
  return time_;
}
inline void OrderField::set_time(::google::protobuf::int64 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:LT.OrderField.time)
}

// string id = 14;
inline void OrderField::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OrderField::id() const {
  // @@protoc_insertion_point(field_get:LT.OrderField.id)
  return id_.GetNoArena();
}
inline void OrderField::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LT.OrderField.id)
}
#if LANG_CXX11
inline void OrderField::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LT.OrderField.id)
}
#endif
inline void OrderField::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LT.OrderField.id)
}
inline void OrderField::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LT.OrderField.id)
}
inline ::std::string* OrderField::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:LT.OrderField.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OrderField::release_id() {
  // @@protoc_insertion_point(field_release:LT.OrderField.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OrderField::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:LT.OrderField.id)
}

// string order_id = 15;
inline void OrderField::clear_order_id() {
  order_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OrderField::order_id() const {
  // @@protoc_insertion_point(field_get:LT.OrderField.order_id)
  return order_id_.GetNoArena();
}
inline void OrderField::set_order_id(const ::std::string& value) {
  
  order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LT.OrderField.order_id)
}
#if LANG_CXX11
inline void OrderField::set_order_id(::std::string&& value) {
  
  order_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LT.OrderField.order_id)
}
#endif
inline void OrderField::set_order_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LT.OrderField.order_id)
}
inline void OrderField::set_order_id(const char* value, size_t size) {
  
  order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LT.OrderField.order_id)
}
inline ::std::string* OrderField::mutable_order_id() {
  
  // @@protoc_insertion_point(field_mutable:LT.OrderField.order_id)
  return order_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OrderField::release_order_id() {
  // @@protoc_insertion_point(field_release:LT.OrderField.order_id)
  
  return order_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OrderField::set_allocated_order_id(::std::string* order_id) {
  if (order_id != NULL) {
    
  } else {
    
  }
  order_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), order_id);
  // @@protoc_insertion_point(field_set_allocated:LT.OrderField.order_id)
}

// string local_id = 16;
inline void OrderField::clear_local_id() {
  local_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OrderField::local_id() const {
  // @@protoc_insertion_point(field_get:LT.OrderField.local_id)
  return local_id_.GetNoArena();
}
inline void OrderField::set_local_id(const ::std::string& value) {
  
  local_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LT.OrderField.local_id)
}
#if LANG_CXX11
inline void OrderField::set_local_id(::std::string&& value) {
  
  local_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LT.OrderField.local_id)
}
#endif
inline void OrderField::set_local_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  local_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LT.OrderField.local_id)
}
inline void OrderField::set_local_id(const char* value, size_t size) {
  
  local_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LT.OrderField.local_id)
}
inline ::std::string* OrderField::mutable_local_id() {
  
  // @@protoc_insertion_point(field_mutable:LT.OrderField.local_id)
  return local_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OrderField::release_local_id() {
  // @@protoc_insertion_point(field_release:LT.OrderField.local_id)
  
  return local_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OrderField::set_allocated_local_id(::std::string* local_id) {
  if (local_id != NULL) {
    
  } else {
    
  }
  local_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), local_id);
  // @@protoc_insertion_point(field_set_allocated:LT.OrderField.local_id)
}

// .LT.OrderType type = 17;
inline void OrderField::clear_type() {
  type_ = 0;
}
inline ::LT::OrderType OrderField::type() const {
  // @@protoc_insertion_point(field_get:LT.OrderField.type)
  return static_cast< ::LT::OrderType >(type_);
}
inline void OrderField::set_type(::LT::OrderType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:LT.OrderField.type)
}

// double stop_px = 18;
inline void OrderField::clear_stop_px() {
  stop_px_ = 0;
}
inline double OrderField::stop_px() const {
  // @@protoc_insertion_point(field_get:LT.OrderField.stop_px)
  return stop_px_;
}
inline void OrderField::set_stop_px(double value) {
  
  stop_px_ = value;
  // @@protoc_insertion_point(field_set:LT.OrderField.stop_px)
}

// .LT.TimeInForce time_in_force = 19;
inline void OrderField::clear_time_in_force() {
  time_in_force_ = 0;
}
inline ::LT::TimeInForce OrderField::time_in_force() const {
  // @@protoc_insertion_point(field_get:LT.OrderField.time_in_force)
  return static_cast< ::LT::TimeInForce >(time_in_force_);
}
inline void OrderField::set_time_in_force(::LT::TimeInForce value) {
  
  time_in_force_ = value;
  // @@protoc_insertion_point(field_set:LT.OrderField.time_in_force)
}

// .LT.OrderStatus status = 20;
inline void OrderField::clear_status() {
  status_ = 0;
}
inline ::LT::OrderStatus OrderField::status() const {
  // @@protoc_insertion_point(field_get:LT.OrderField.status)
  return static_cast< ::LT::OrderStatus >(status_);
}
inline void OrderField::set_status(::LT::OrderStatus value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:LT.OrderField.status)
}

// .LT.ExecType exec_type = 21;
inline void OrderField::clear_exec_type() {
  exec_type_ = 0;
}
inline ::LT::ExecType OrderField::exec_type() const {
  // @@protoc_insertion_point(field_get:LT.OrderField.exec_type)
  return static_cast< ::LT::ExecType >(exec_type_);
}
inline void OrderField::set_exec_type(::LT::ExecType value) {
  
  exec_type_ = value;
  // @@protoc_insertion_point(field_set:LT.OrderField.exec_type)
}

// double leaves_qty = 22;
inline void OrderField::clear_leaves_qty() {
  leaves_qty_ = 0;
}
inline double OrderField::leaves_qty() const {
  // @@protoc_insertion_point(field_get:LT.OrderField.leaves_qty)
  return leaves_qty_;
}
inline void OrderField::set_leaves_qty(double value) {
  
  leaves_qty_ = value;
  // @@protoc_insertion_point(field_set:LT.OrderField.leaves_qty)
}

// double cum_qty = 23;
inline void OrderField::clear_cum_qty() {
  cum_qty_ = 0;
}
inline double OrderField::cum_qty() const {
  // @@protoc_insertion_point(field_get:LT.OrderField.cum_qty)
  return cum_qty_;
}
inline void OrderField::set_cum_qty(double value) {
  
  cum_qty_ = value;
  // @@protoc_insertion_point(field_set:LT.OrderField.cum_qty)
}

// double avg_px = 24;
inline void OrderField::clear_avg_px() {
  avg_px_ = 0;
}
inline double OrderField::avg_px() const {
  // @@protoc_insertion_point(field_get:LT.OrderField.avg_px)
  return avg_px_;
}
inline void OrderField::set_avg_px(double value) {
  
  avg_px_ = value;
  // @@protoc_insertion_point(field_set:LT.OrderField.avg_px)
}

// int32 xerror_id = 25;
inline void OrderField::clear_xerror_id() {
  xerror_id_ = 0;
}
inline ::google::protobuf::int32 OrderField::xerror_id() const {
  // @@protoc_insertion_point(field_get:LT.OrderField.xerror_id)
  return xerror_id_;
}
inline void OrderField::set_xerror_id(::google::protobuf::int32 value) {
  
  xerror_id_ = value;
  // @@protoc_insertion_point(field_set:LT.OrderField.xerror_id)
}

// int32 raw_error_id = 26;
inline void OrderField::clear_raw_error_id() {
  raw_error_id_ = 0;
}
inline ::google::protobuf::int32 OrderField::raw_error_id() const {
  // @@protoc_insertion_point(field_get:LT.OrderField.raw_error_id)
  return raw_error_id_;
}
inline void OrderField::set_raw_error_id(::google::protobuf::int32 value) {
  
  raw_error_id_ = value;
  // @@protoc_insertion_point(field_set:LT.OrderField.raw_error_id)
}

// string text = 27;
inline void OrderField::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OrderField::text() const {
  // @@protoc_insertion_point(field_get:LT.OrderField.text)
  return text_.GetNoArena();
}
inline void OrderField::set_text(const ::std::string& value) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LT.OrderField.text)
}
#if LANG_CXX11
inline void OrderField::set_text(::std::string&& value) {
  
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LT.OrderField.text)
}
#endif
inline void OrderField::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LT.OrderField.text)
}
inline void OrderField::set_text(const char* value, size_t size) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LT.OrderField.text)
}
inline ::std::string* OrderField::mutable_text() {
  
  // @@protoc_insertion_point(field_mutable:LT.OrderField.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OrderField::release_text() {
  // @@protoc_insertion_point(field_release:LT.OrderField.text)
  
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OrderField::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    
  } else {
    
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:LT.OrderField.text)
}

// int32 reserve_int32 = 28;
inline void OrderField::clear_reserve_int32() {
  reserve_int32_ = 0;
}
inline ::google::protobuf::int32 OrderField::reserve_int32() const {
  // @@protoc_insertion_point(field_get:LT.OrderField.reserve_int32)
  return reserve_int32_;
}
inline void OrderField::set_reserve_int32(::google::protobuf::int32 value) {
  
  reserve_int32_ = value;
  // @@protoc_insertion_point(field_set:LT.OrderField.reserve_int32)
}

// string reserve_char64 = 29;
inline void OrderField::clear_reserve_char64() {
  reserve_char64_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OrderField::reserve_char64() const {
  // @@protoc_insertion_point(field_get:LT.OrderField.reserve_char64)
  return reserve_char64_.GetNoArena();
}
inline void OrderField::set_reserve_char64(const ::std::string& value) {
  
  reserve_char64_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LT.OrderField.reserve_char64)
}
#if LANG_CXX11
inline void OrderField::set_reserve_char64(::std::string&& value) {
  
  reserve_char64_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LT.OrderField.reserve_char64)
}
#endif
inline void OrderField::set_reserve_char64(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  reserve_char64_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LT.OrderField.reserve_char64)
}
inline void OrderField::set_reserve_char64(const char* value, size_t size) {
  
  reserve_char64_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LT.OrderField.reserve_char64)
}
inline ::std::string* OrderField::mutable_reserve_char64() {
  
  // @@protoc_insertion_point(field_mutable:LT.OrderField.reserve_char64)
  return reserve_char64_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OrderField::release_reserve_char64() {
  // @@protoc_insertion_point(field_release:LT.OrderField.reserve_char64)
  
  return reserve_char64_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OrderField::set_allocated_reserve_char64(::std::string* reserve_char64) {
  if (reserve_char64 != NULL) {
    
  } else {
    
  }
  reserve_char64_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reserve_char64);
  // @@protoc_insertion_point(field_set_allocated:LT.OrderField.reserve_char64)
}

// string portfolio_id1 = 30;
inline void OrderField::clear_portfolio_id1() {
  portfolio_id1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OrderField::portfolio_id1() const {
  // @@protoc_insertion_point(field_get:LT.OrderField.portfolio_id1)
  return portfolio_id1_.GetNoArena();
}
inline void OrderField::set_portfolio_id1(const ::std::string& value) {
  
  portfolio_id1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LT.OrderField.portfolio_id1)
}
#if LANG_CXX11
inline void OrderField::set_portfolio_id1(::std::string&& value) {
  
  portfolio_id1_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LT.OrderField.portfolio_id1)
}
#endif
inline void OrderField::set_portfolio_id1(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  portfolio_id1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LT.OrderField.portfolio_id1)
}
inline void OrderField::set_portfolio_id1(const char* value, size_t size) {
  
  portfolio_id1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LT.OrderField.portfolio_id1)
}
inline ::std::string* OrderField::mutable_portfolio_id1() {
  
  // @@protoc_insertion_point(field_mutable:LT.OrderField.portfolio_id1)
  return portfolio_id1_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OrderField::release_portfolio_id1() {
  // @@protoc_insertion_point(field_release:LT.OrderField.portfolio_id1)
  
  return portfolio_id1_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OrderField::set_allocated_portfolio_id1(::std::string* portfolio_id1) {
  if (portfolio_id1 != NULL) {
    
  } else {
    
  }
  portfolio_id1_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), portfolio_id1);
  // @@protoc_insertion_point(field_set_allocated:LT.OrderField.portfolio_id1)
}

// string portfolio_id2 = 31;
inline void OrderField::clear_portfolio_id2() {
  portfolio_id2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OrderField::portfolio_id2() const {
  // @@protoc_insertion_point(field_get:LT.OrderField.portfolio_id2)
  return portfolio_id2_.GetNoArena();
}
inline void OrderField::set_portfolio_id2(const ::std::string& value) {
  
  portfolio_id2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LT.OrderField.portfolio_id2)
}
#if LANG_CXX11
inline void OrderField::set_portfolio_id2(::std::string&& value) {
  
  portfolio_id2_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LT.OrderField.portfolio_id2)
}
#endif
inline void OrderField::set_portfolio_id2(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  portfolio_id2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LT.OrderField.portfolio_id2)
}
inline void OrderField::set_portfolio_id2(const char* value, size_t size) {
  
  portfolio_id2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LT.OrderField.portfolio_id2)
}
inline ::std::string* OrderField::mutable_portfolio_id2() {
  
  // @@protoc_insertion_point(field_mutable:LT.OrderField.portfolio_id2)
  return portfolio_id2_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OrderField::release_portfolio_id2() {
  // @@protoc_insertion_point(field_release:LT.OrderField.portfolio_id2)
  
  return portfolio_id2_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OrderField::set_allocated_portfolio_id2(::std::string* portfolio_id2) {
  if (portfolio_id2 != NULL) {
    
  } else {
    
  }
  portfolio_id2_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), portfolio_id2);
  // @@protoc_insertion_point(field_set_allocated:LT.OrderField.portfolio_id2)
}

// string portfolio_id3 = 32;
inline void OrderField::clear_portfolio_id3() {
  portfolio_id3_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OrderField::portfolio_id3() const {
  // @@protoc_insertion_point(field_get:LT.OrderField.portfolio_id3)
  return portfolio_id3_.GetNoArena();
}
inline void OrderField::set_portfolio_id3(const ::std::string& value) {
  
  portfolio_id3_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LT.OrderField.portfolio_id3)
}
#if LANG_CXX11
inline void OrderField::set_portfolio_id3(::std::string&& value) {
  
  portfolio_id3_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LT.OrderField.portfolio_id3)
}
#endif
inline void OrderField::set_portfolio_id3(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  portfolio_id3_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LT.OrderField.portfolio_id3)
}
inline void OrderField::set_portfolio_id3(const char* value, size_t size) {
  
  portfolio_id3_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LT.OrderField.portfolio_id3)
}
inline ::std::string* OrderField::mutable_portfolio_id3() {
  
  // @@protoc_insertion_point(field_mutable:LT.OrderField.portfolio_id3)
  return portfolio_id3_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OrderField::release_portfolio_id3() {
  // @@protoc_insertion_point(field_release:LT.OrderField.portfolio_id3)
  
  return portfolio_id3_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OrderField::set_allocated_portfolio_id3(::std::string* portfolio_id3) {
  if (portfolio_id3 != NULL) {
    
  } else {
    
  }
  portfolio_id3_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), portfolio_id3);
  // @@protoc_insertion_point(field_set_allocated:LT.OrderField.portfolio_id3)
}

// .LT.BusinessType business = 33;
inline void OrderField::clear_business() {
  business_ = 0;
}
inline ::LT::BusinessType OrderField::business() const {
  // @@protoc_insertion_point(field_get:LT.OrderField.business)
  return static_cast< ::LT::BusinessType >(business_);
}
inline void OrderField::set_business(::LT::BusinessType value) {
  
  business_ = value;
  // @@protoc_insertion_point(field_set:LT.OrderField.business)
}

// -------------------------------------------------------------------

// TradeField

// string instrument_name = 1;
inline void TradeField::clear_instrument_name() {
  instrument_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TradeField::instrument_name() const {
  // @@protoc_insertion_point(field_get:LT.TradeField.instrument_name)
  return instrument_name_.GetNoArena();
}
inline void TradeField::set_instrument_name(const ::std::string& value) {
  
  instrument_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LT.TradeField.instrument_name)
}
#if LANG_CXX11
inline void TradeField::set_instrument_name(::std::string&& value) {
  
  instrument_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LT.TradeField.instrument_name)
}
#endif
inline void TradeField::set_instrument_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  instrument_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LT.TradeField.instrument_name)
}
inline void TradeField::set_instrument_name(const char* value, size_t size) {
  
  instrument_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LT.TradeField.instrument_name)
}
inline ::std::string* TradeField::mutable_instrument_name() {
  
  // @@protoc_insertion_point(field_mutable:LT.TradeField.instrument_name)
  return instrument_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TradeField::release_instrument_name() {
  // @@protoc_insertion_point(field_release:LT.TradeField.instrument_name)
  
  return instrument_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TradeField::set_allocated_instrument_name(::std::string* instrument_name) {
  if (instrument_name != NULL) {
    
  } else {
    
  }
  instrument_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instrument_name);
  // @@protoc_insertion_point(field_set_allocated:LT.TradeField.instrument_name)
}

// string symbol = 2;
inline void TradeField::clear_symbol() {
  symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TradeField::symbol() const {
  // @@protoc_insertion_point(field_get:LT.TradeField.symbol)
  return symbol_.GetNoArena();
}
inline void TradeField::set_symbol(const ::std::string& value) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LT.TradeField.symbol)
}
#if LANG_CXX11
inline void TradeField::set_symbol(::std::string&& value) {
  
  symbol_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LT.TradeField.symbol)
}
#endif
inline void TradeField::set_symbol(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LT.TradeField.symbol)
}
inline void TradeField::set_symbol(const char* value, size_t size) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LT.TradeField.symbol)
}
inline ::std::string* TradeField::mutable_symbol() {
  
  // @@protoc_insertion_point(field_mutable:LT.TradeField.symbol)
  return symbol_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TradeField::release_symbol() {
  // @@protoc_insertion_point(field_release:LT.TradeField.symbol)
  
  return symbol_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TradeField::set_allocated_symbol(::std::string* symbol) {
  if (symbol != NULL) {
    
  } else {
    
  }
  symbol_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), symbol);
  // @@protoc_insertion_point(field_set_allocated:LT.TradeField.symbol)
}

// string instrument_id = 3;
inline void TradeField::clear_instrument_id() {
  instrument_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TradeField::instrument_id() const {
  // @@protoc_insertion_point(field_get:LT.TradeField.instrument_id)
  return instrument_id_.GetNoArena();
}
inline void TradeField::set_instrument_id(const ::std::string& value) {
  
  instrument_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LT.TradeField.instrument_id)
}
#if LANG_CXX11
inline void TradeField::set_instrument_id(::std::string&& value) {
  
  instrument_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LT.TradeField.instrument_id)
}
#endif
inline void TradeField::set_instrument_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  instrument_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LT.TradeField.instrument_id)
}
inline void TradeField::set_instrument_id(const char* value, size_t size) {
  
  instrument_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LT.TradeField.instrument_id)
}
inline ::std::string* TradeField::mutable_instrument_id() {
  
  // @@protoc_insertion_point(field_mutable:LT.TradeField.instrument_id)
  return instrument_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TradeField::release_instrument_id() {
  // @@protoc_insertion_point(field_release:LT.TradeField.instrument_id)
  
  return instrument_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TradeField::set_allocated_instrument_id(::std::string* instrument_id) {
  if (instrument_id != NULL) {
    
  } else {
    
  }
  instrument_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instrument_id);
  // @@protoc_insertion_point(field_set_allocated:LT.TradeField.instrument_id)
}

// string exchange_id = 4;
inline void TradeField::clear_exchange_id() {
  exchange_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TradeField::exchange_id() const {
  // @@protoc_insertion_point(field_get:LT.TradeField.exchange_id)
  return exchange_id_.GetNoArena();
}
inline void TradeField::set_exchange_id(const ::std::string& value) {
  
  exchange_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LT.TradeField.exchange_id)
}
#if LANG_CXX11
inline void TradeField::set_exchange_id(::std::string&& value) {
  
  exchange_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LT.TradeField.exchange_id)
}
#endif
inline void TradeField::set_exchange_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  exchange_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LT.TradeField.exchange_id)
}
inline void TradeField::set_exchange_id(const char* value, size_t size) {
  
  exchange_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LT.TradeField.exchange_id)
}
inline ::std::string* TradeField::mutable_exchange_id() {
  
  // @@protoc_insertion_point(field_mutable:LT.TradeField.exchange_id)
  return exchange_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TradeField::release_exchange_id() {
  // @@protoc_insertion_point(field_release:LT.TradeField.exchange_id)
  
  return exchange_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TradeField::set_allocated_exchange_id(::std::string* exchange_id) {
  if (exchange_id != NULL) {
    
  } else {
    
  }
  exchange_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchange_id);
  // @@protoc_insertion_point(field_set_allocated:LT.TradeField.exchange_id)
}

// string client_id = 5;
inline void TradeField::clear_client_id() {
  client_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TradeField::client_id() const {
  // @@protoc_insertion_point(field_get:LT.TradeField.client_id)
  return client_id_.GetNoArena();
}
inline void TradeField::set_client_id(const ::std::string& value) {
  
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LT.TradeField.client_id)
}
#if LANG_CXX11
inline void TradeField::set_client_id(::std::string&& value) {
  
  client_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LT.TradeField.client_id)
}
#endif
inline void TradeField::set_client_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LT.TradeField.client_id)
}
inline void TradeField::set_client_id(const char* value, size_t size) {
  
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LT.TradeField.client_id)
}
inline ::std::string* TradeField::mutable_client_id() {
  
  // @@protoc_insertion_point(field_mutable:LT.TradeField.client_id)
  return client_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TradeField::release_client_id() {
  // @@protoc_insertion_point(field_release:LT.TradeField.client_id)
  
  return client_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TradeField::set_allocated_client_id(::std::string* client_id) {
  if (client_id != NULL) {
    
  } else {
    
  }
  client_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_id);
  // @@protoc_insertion_point(field_set_allocated:LT.TradeField.client_id)
}

// string account_id = 6;
inline void TradeField::clear_account_id() {
  account_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TradeField::account_id() const {
  // @@protoc_insertion_point(field_get:LT.TradeField.account_id)
  return account_id_.GetNoArena();
}
inline void TradeField::set_account_id(const ::std::string& value) {
  
  account_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LT.TradeField.account_id)
}
#if LANG_CXX11
inline void TradeField::set_account_id(::std::string&& value) {
  
  account_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LT.TradeField.account_id)
}
#endif
inline void TradeField::set_account_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  account_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LT.TradeField.account_id)
}
inline void TradeField::set_account_id(const char* value, size_t size) {
  
  account_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LT.TradeField.account_id)
}
inline ::std::string* TradeField::mutable_account_id() {
  
  // @@protoc_insertion_point(field_mutable:LT.TradeField.account_id)
  return account_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TradeField::release_account_id() {
  // @@protoc_insertion_point(field_release:LT.TradeField.account_id)
  
  return account_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TradeField::set_allocated_account_id(::std::string* account_id) {
  if (account_id != NULL) {
    
  } else {
    
  }
  account_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account_id);
  // @@protoc_insertion_point(field_set_allocated:LT.TradeField.account_id)
}

// .LT.OrderSide side = 7;
inline void TradeField::clear_side() {
  side_ = 0;
}
inline ::LT::OrderSide TradeField::side() const {
  // @@protoc_insertion_point(field_get:LT.TradeField.side)
  return static_cast< ::LT::OrderSide >(side_);
}
inline void TradeField::set_side(::LT::OrderSide value) {
  
  side_ = value;
  // @@protoc_insertion_point(field_set:LT.TradeField.side)
}

// double qty = 8;
inline void TradeField::clear_qty() {
  qty_ = 0;
}
inline double TradeField::qty() const {
  // @@protoc_insertion_point(field_get:LT.TradeField.qty)
  return qty_;
}
inline void TradeField::set_qty(double value) {
  
  qty_ = value;
  // @@protoc_insertion_point(field_set:LT.TradeField.qty)
}

// double price = 9;
inline void TradeField::clear_price() {
  price_ = 0;
}
inline double TradeField::price() const {
  // @@protoc_insertion_point(field_get:LT.TradeField.price)
  return price_;
}
inline void TradeField::set_price(double value) {
  
  price_ = value;
  // @@protoc_insertion_point(field_set:LT.TradeField.price)
}

// .LT.OpenCloseType open_close = 10;
inline void TradeField::clear_open_close() {
  open_close_ = 0;
}
inline ::LT::OpenCloseType TradeField::open_close() const {
  // @@protoc_insertion_point(field_get:LT.TradeField.open_close)
  return static_cast< ::LT::OpenCloseType >(open_close_);
}
inline void TradeField::set_open_close(::LT::OpenCloseType value) {
  
  open_close_ = value;
  // @@protoc_insertion_point(field_set:LT.TradeField.open_close)
}

// .LT.HedgeFlagType hedge_flag = 11;
inline void TradeField::clear_hedge_flag() {
  hedge_flag_ = 0;
}
inline ::LT::HedgeFlagType TradeField::hedge_flag() const {
  // @@protoc_insertion_point(field_get:LT.TradeField.hedge_flag)
  return static_cast< ::LT::HedgeFlagType >(hedge_flag_);
}
inline void TradeField::set_hedge_flag(::LT::HedgeFlagType value) {
  
  hedge_flag_ = value;
  // @@protoc_insertion_point(field_set:LT.TradeField.hedge_flag)
}

// int32 date = 12;
inline void TradeField::clear_date() {
  date_ = 0;
}
inline ::google::protobuf::int32 TradeField::date() const {
  // @@protoc_insertion_point(field_get:LT.TradeField.date)
  return date_;
}
inline void TradeField::set_date(::google::protobuf::int32 value) {
  
  date_ = value;
  // @@protoc_insertion_point(field_set:LT.TradeField.date)
}

// int64 time = 13;
inline void TradeField::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 TradeField::time() const {
  // @@protoc_insertion_point(field_get:LT.TradeField.time)
  return time_;
}
inline void TradeField::set_time(::google::protobuf::int64 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:LT.TradeField.time)
}

// string id = 14;
inline void TradeField::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TradeField::id() const {
  // @@protoc_insertion_point(field_get:LT.TradeField.id)
  return id_.GetNoArena();
}
inline void TradeField::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LT.TradeField.id)
}
#if LANG_CXX11
inline void TradeField::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LT.TradeField.id)
}
#endif
inline void TradeField::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LT.TradeField.id)
}
inline void TradeField::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LT.TradeField.id)
}
inline ::std::string* TradeField::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:LT.TradeField.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TradeField::release_id() {
  // @@protoc_insertion_point(field_release:LT.TradeField.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TradeField::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:LT.TradeField.id)
}

// string tradeid = 15;
inline void TradeField::clear_tradeid() {
  tradeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TradeField::tradeid() const {
  // @@protoc_insertion_point(field_get:LT.TradeField.tradeid)
  return tradeid_.GetNoArena();
}
inline void TradeField::set_tradeid(const ::std::string& value) {
  
  tradeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LT.TradeField.tradeid)
}
#if LANG_CXX11
inline void TradeField::set_tradeid(::std::string&& value) {
  
  tradeid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LT.TradeField.tradeid)
}
#endif
inline void TradeField::set_tradeid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  tradeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LT.TradeField.tradeid)
}
inline void TradeField::set_tradeid(const char* value, size_t size) {
  
  tradeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LT.TradeField.tradeid)
}
inline ::std::string* TradeField::mutable_tradeid() {
  
  // @@protoc_insertion_point(field_mutable:LT.TradeField.tradeid)
  return tradeid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TradeField::release_tradeid() {
  // @@protoc_insertion_point(field_release:LT.TradeField.tradeid)
  
  return tradeid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TradeField::set_allocated_tradeid(::std::string* tradeid) {
  if (tradeid != NULL) {
    
  } else {
    
  }
  tradeid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tradeid);
  // @@protoc_insertion_point(field_set_allocated:LT.TradeField.tradeid)
}

// double commission = 16;
inline void TradeField::clear_commission() {
  commission_ = 0;
}
inline double TradeField::commission() const {
  // @@protoc_insertion_point(field_get:LT.TradeField.commission)
  return commission_;
}
inline void TradeField::set_commission(double value) {
  
  commission_ = value;
  // @@protoc_insertion_point(field_set:LT.TradeField.commission)
}

// int32 reserveint32 = 17;
inline void TradeField::clear_reserveint32() {
  reserveint32_ = 0;
}
inline ::google::protobuf::int32 TradeField::reserveint32() const {
  // @@protoc_insertion_point(field_get:LT.TradeField.reserveint32)
  return reserveint32_;
}
inline void TradeField::set_reserveint32(::google::protobuf::int32 value) {
  
  reserveint32_ = value;
  // @@protoc_insertion_point(field_set:LT.TradeField.reserveint32)
}

// string reservechar64 = 18;
inline void TradeField::clear_reservechar64() {
  reservechar64_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TradeField::reservechar64() const {
  // @@protoc_insertion_point(field_get:LT.TradeField.reservechar64)
  return reservechar64_.GetNoArena();
}
inline void TradeField::set_reservechar64(const ::std::string& value) {
  
  reservechar64_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LT.TradeField.reservechar64)
}
#if LANG_CXX11
inline void TradeField::set_reservechar64(::std::string&& value) {
  
  reservechar64_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LT.TradeField.reservechar64)
}
#endif
inline void TradeField::set_reservechar64(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  reservechar64_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LT.TradeField.reservechar64)
}
inline void TradeField::set_reservechar64(const char* value, size_t size) {
  
  reservechar64_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LT.TradeField.reservechar64)
}
inline ::std::string* TradeField::mutable_reservechar64() {
  
  // @@protoc_insertion_point(field_mutable:LT.TradeField.reservechar64)
  return reservechar64_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TradeField::release_reservechar64() {
  // @@protoc_insertion_point(field_release:LT.TradeField.reservechar64)
  
  return reservechar64_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TradeField::set_allocated_reservechar64(::std::string* reservechar64) {
  if (reservechar64 != NULL) {
    
  } else {
    
  }
  reservechar64_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reservechar64);
  // @@protoc_insertion_point(field_set_allocated:LT.TradeField.reservechar64)
}

// string portfolioid1 = 19;
inline void TradeField::clear_portfolioid1() {
  portfolioid1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TradeField::portfolioid1() const {
  // @@protoc_insertion_point(field_get:LT.TradeField.portfolioid1)
  return portfolioid1_.GetNoArena();
}
inline void TradeField::set_portfolioid1(const ::std::string& value) {
  
  portfolioid1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LT.TradeField.portfolioid1)
}
#if LANG_CXX11
inline void TradeField::set_portfolioid1(::std::string&& value) {
  
  portfolioid1_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LT.TradeField.portfolioid1)
}
#endif
inline void TradeField::set_portfolioid1(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  portfolioid1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LT.TradeField.portfolioid1)
}
inline void TradeField::set_portfolioid1(const char* value, size_t size) {
  
  portfolioid1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LT.TradeField.portfolioid1)
}
inline ::std::string* TradeField::mutable_portfolioid1() {
  
  // @@protoc_insertion_point(field_mutable:LT.TradeField.portfolioid1)
  return portfolioid1_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TradeField::release_portfolioid1() {
  // @@protoc_insertion_point(field_release:LT.TradeField.portfolioid1)
  
  return portfolioid1_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TradeField::set_allocated_portfolioid1(::std::string* portfolioid1) {
  if (portfolioid1 != NULL) {
    
  } else {
    
  }
  portfolioid1_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), portfolioid1);
  // @@protoc_insertion_point(field_set_allocated:LT.TradeField.portfolioid1)
}

// string portfolioid2 = 20;
inline void TradeField::clear_portfolioid2() {
  portfolioid2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TradeField::portfolioid2() const {
  // @@protoc_insertion_point(field_get:LT.TradeField.portfolioid2)
  return portfolioid2_.GetNoArena();
}
inline void TradeField::set_portfolioid2(const ::std::string& value) {
  
  portfolioid2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LT.TradeField.portfolioid2)
}
#if LANG_CXX11
inline void TradeField::set_portfolioid2(::std::string&& value) {
  
  portfolioid2_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LT.TradeField.portfolioid2)
}
#endif
inline void TradeField::set_portfolioid2(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  portfolioid2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LT.TradeField.portfolioid2)
}
inline void TradeField::set_portfolioid2(const char* value, size_t size) {
  
  portfolioid2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LT.TradeField.portfolioid2)
}
inline ::std::string* TradeField::mutable_portfolioid2() {
  
  // @@protoc_insertion_point(field_mutable:LT.TradeField.portfolioid2)
  return portfolioid2_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TradeField::release_portfolioid2() {
  // @@protoc_insertion_point(field_release:LT.TradeField.portfolioid2)
  
  return portfolioid2_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TradeField::set_allocated_portfolioid2(::std::string* portfolioid2) {
  if (portfolioid2 != NULL) {
    
  } else {
    
  }
  portfolioid2_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), portfolioid2);
  // @@protoc_insertion_point(field_set_allocated:LT.TradeField.portfolioid2)
}

// string portfolioid3 = 21;
inline void TradeField::clear_portfolioid3() {
  portfolioid3_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TradeField::portfolioid3() const {
  // @@protoc_insertion_point(field_get:LT.TradeField.portfolioid3)
  return portfolioid3_.GetNoArena();
}
inline void TradeField::set_portfolioid3(const ::std::string& value) {
  
  portfolioid3_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LT.TradeField.portfolioid3)
}
#if LANG_CXX11
inline void TradeField::set_portfolioid3(::std::string&& value) {
  
  portfolioid3_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LT.TradeField.portfolioid3)
}
#endif
inline void TradeField::set_portfolioid3(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  portfolioid3_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LT.TradeField.portfolioid3)
}
inline void TradeField::set_portfolioid3(const char* value, size_t size) {
  
  portfolioid3_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LT.TradeField.portfolioid3)
}
inline ::std::string* TradeField::mutable_portfolioid3() {
  
  // @@protoc_insertion_point(field_mutable:LT.TradeField.portfolioid3)
  return portfolioid3_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TradeField::release_portfolioid3() {
  // @@protoc_insertion_point(field_release:LT.TradeField.portfolioid3)
  
  return portfolioid3_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TradeField::set_allocated_portfolioid3(::std::string* portfolioid3) {
  if (portfolioid3 != NULL) {
    
  } else {
    
  }
  portfolioid3_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), portfolioid3);
  // @@protoc_insertion_point(field_set_allocated:LT.TradeField.portfolioid3)
}

// .LT.BusinessType business = 22;
inline void TradeField::clear_business() {
  business_ = 0;
}
inline ::LT::BusinessType TradeField::business() const {
  // @@protoc_insertion_point(field_get:LT.TradeField.business)
  return static_cast< ::LT::BusinessType >(business_);
}
inline void TradeField::set_business(::LT::BusinessType value) {
  
  business_ = value;
  // @@protoc_insertion_point(field_set:LT.TradeField.business)
}

// -------------------------------------------------------------------

// ServerInfoField

// bool is_using_udp = 1;
inline void ServerInfoField::clear_is_using_udp() {
  is_using_udp_ = false;
}
inline bool ServerInfoField::is_using_udp() const {
  // @@protoc_insertion_point(field_get:LT.ServerInfoField.is_using_udp)
  return is_using_udp_;
}
inline void ServerInfoField::set_is_using_udp(bool value) {
  
  is_using_udp_ = value;
  // @@protoc_insertion_point(field_set:LT.ServerInfoField.is_using_udp)
}

// bool is_multicast = 2;
inline void ServerInfoField::clear_is_multicast() {
  is_multicast_ = false;
}
inline bool ServerInfoField::is_multicast() const {
  // @@protoc_insertion_point(field_get:LT.ServerInfoField.is_multicast)
  return is_multicast_;
}
inline void ServerInfoField::set_is_multicast(bool value) {
  
  is_multicast_ = value;
  // @@protoc_insertion_point(field_set:LT.ServerInfoField.is_multicast)
}

// int32 topicid = 3;
inline void ServerInfoField::clear_topicid() {
  topicid_ = 0;
}
inline ::google::protobuf::int32 ServerInfoField::topicid() const {
  // @@protoc_insertion_point(field_get:LT.ServerInfoField.topicid)
  return topicid_;
}
inline void ServerInfoField::set_topicid(::google::protobuf::int32 value) {
  
  topicid_ = value;
  // @@protoc_insertion_point(field_set:LT.ServerInfoField.topicid)
}

// int32 port = 4;
inline void ServerInfoField::clear_port() {
  port_ = 0;
}
inline ::google::protobuf::int32 ServerInfoField::port() const {
  // @@protoc_insertion_point(field_get:LT.ServerInfoField.port)
  return port_;
}
inline void ServerInfoField::set_port(::google::protobuf::int32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:LT.ServerInfoField.port)
}

// .LT.ResumeType marketdata_topic_resume_type = 5;
inline void ServerInfoField::clear_marketdata_topic_resume_type() {
  marketdata_topic_resume_type_ = 0;
}
inline ::LT::ResumeType ServerInfoField::marketdata_topic_resume_type() const {
  // @@protoc_insertion_point(field_get:LT.ServerInfoField.marketdata_topic_resume_type)
  return static_cast< ::LT::ResumeType >(marketdata_topic_resume_type_);
}
inline void ServerInfoField::set_marketdata_topic_resume_type(::LT::ResumeType value) {
  
  marketdata_topic_resume_type_ = value;
  // @@protoc_insertion_point(field_set:LT.ServerInfoField.marketdata_topic_resume_type)
}

// .LT.ResumeType private_topic_resume_type = 6;
inline void ServerInfoField::clear_private_topic_resume_type() {
  private_topic_resume_type_ = 0;
}
inline ::LT::ResumeType ServerInfoField::private_topic_resume_type() const {
  // @@protoc_insertion_point(field_get:LT.ServerInfoField.private_topic_resume_type)
  return static_cast< ::LT::ResumeType >(private_topic_resume_type_);
}
inline void ServerInfoField::set_private_topic_resume_type(::LT::ResumeType value) {
  
  private_topic_resume_type_ = value;
  // @@protoc_insertion_point(field_set:LT.ServerInfoField.private_topic_resume_type)
}

// .LT.ResumeType public_topic_resume_type = 7;
inline void ServerInfoField::clear_public_topic_resume_type() {
  public_topic_resume_type_ = 0;
}
inline ::LT::ResumeType ServerInfoField::public_topic_resume_type() const {
  // @@protoc_insertion_point(field_get:LT.ServerInfoField.public_topic_resume_type)
  return static_cast< ::LT::ResumeType >(public_topic_resume_type_);
}
inline void ServerInfoField::set_public_topic_resume_type(::LT::ResumeType value) {
  
  public_topic_resume_type_ = value;
  // @@protoc_insertion_point(field_set:LT.ServerInfoField.public_topic_resume_type)
}

// .LT.ResumeType user_topic_resume_type = 8;
inline void ServerInfoField::clear_user_topic_resume_type() {
  user_topic_resume_type_ = 0;
}
inline ::LT::ResumeType ServerInfoField::user_topic_resume_type() const {
  // @@protoc_insertion_point(field_get:LT.ServerInfoField.user_topic_resume_type)
  return static_cast< ::LT::ResumeType >(user_topic_resume_type_);
}
inline void ServerInfoField::set_user_topic_resume_type(::LT::ResumeType value) {
  
  user_topic_resume_type_ = value;
  // @@protoc_insertion_point(field_set:LT.ServerInfoField.user_topic_resume_type)
}

// string broker_id = 9;
inline void ServerInfoField::clear_broker_id() {
  broker_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ServerInfoField::broker_id() const {
  // @@protoc_insertion_point(field_get:LT.ServerInfoField.broker_id)
  return broker_id_.GetNoArena();
}
inline void ServerInfoField::set_broker_id(const ::std::string& value) {
  
  broker_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LT.ServerInfoField.broker_id)
}
#if LANG_CXX11
inline void ServerInfoField::set_broker_id(::std::string&& value) {
  
  broker_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LT.ServerInfoField.broker_id)
}
#endif
inline void ServerInfoField::set_broker_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  broker_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LT.ServerInfoField.broker_id)
}
inline void ServerInfoField::set_broker_id(const char* value, size_t size) {
  
  broker_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LT.ServerInfoField.broker_id)
}
inline ::std::string* ServerInfoField::mutable_broker_id() {
  
  // @@protoc_insertion_point(field_mutable:LT.ServerInfoField.broker_id)
  return broker_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerInfoField::release_broker_id() {
  // @@protoc_insertion_point(field_release:LT.ServerInfoField.broker_id)
  
  return broker_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerInfoField::set_allocated_broker_id(::std::string* broker_id) {
  if (broker_id != NULL) {
    
  } else {
    
  }
  broker_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), broker_id);
  // @@protoc_insertion_point(field_set_allocated:LT.ServerInfoField.broker_id)
}

// string user_product_info = 10;
inline void ServerInfoField::clear_user_product_info() {
  user_product_info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ServerInfoField::user_product_info() const {
  // @@protoc_insertion_point(field_get:LT.ServerInfoField.user_product_info)
  return user_product_info_.GetNoArena();
}
inline void ServerInfoField::set_user_product_info(const ::std::string& value) {
  
  user_product_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LT.ServerInfoField.user_product_info)
}
#if LANG_CXX11
inline void ServerInfoField::set_user_product_info(::std::string&& value) {
  
  user_product_info_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LT.ServerInfoField.user_product_info)
}
#endif
inline void ServerInfoField::set_user_product_info(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  user_product_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LT.ServerInfoField.user_product_info)
}
inline void ServerInfoField::set_user_product_info(const char* value, size_t size) {
  
  user_product_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LT.ServerInfoField.user_product_info)
}
inline ::std::string* ServerInfoField::mutable_user_product_info() {
  
  // @@protoc_insertion_point(field_mutable:LT.ServerInfoField.user_product_info)
  return user_product_info_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerInfoField::release_user_product_info() {
  // @@protoc_insertion_point(field_release:LT.ServerInfoField.user_product_info)
  
  return user_product_info_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerInfoField::set_allocated_user_product_info(::std::string* user_product_info) {
  if (user_product_info != NULL) {
    
  } else {
    
  }
  user_product_info_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_product_info);
  // @@protoc_insertion_point(field_set_allocated:LT.ServerInfoField.user_product_info)
}

// string authcode = 11;
inline void ServerInfoField::clear_authcode() {
  authcode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ServerInfoField::authcode() const {
  // @@protoc_insertion_point(field_get:LT.ServerInfoField.authcode)
  return authcode_.GetNoArena();
}
inline void ServerInfoField::set_authcode(const ::std::string& value) {
  
  authcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LT.ServerInfoField.authcode)
}
#if LANG_CXX11
inline void ServerInfoField::set_authcode(::std::string&& value) {
  
  authcode_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LT.ServerInfoField.authcode)
}
#endif
inline void ServerInfoField::set_authcode(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  authcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LT.ServerInfoField.authcode)
}
inline void ServerInfoField::set_authcode(const char* value, size_t size) {
  
  authcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LT.ServerInfoField.authcode)
}
inline ::std::string* ServerInfoField::mutable_authcode() {
  
  // @@protoc_insertion_point(field_mutable:LT.ServerInfoField.authcode)
  return authcode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerInfoField::release_authcode() {
  // @@protoc_insertion_point(field_release:LT.ServerInfoField.authcode)
  
  return authcode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerInfoField::set_allocated_authcode(::std::string* authcode) {
  if (authcode != NULL) {
    
  } else {
    
  }
  authcode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), authcode);
  // @@protoc_insertion_point(field_set_allocated:LT.ServerInfoField.authcode)
}

// string address = 12;
inline void ServerInfoField::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ServerInfoField::address() const {
  // @@protoc_insertion_point(field_get:LT.ServerInfoField.address)
  return address_.GetNoArena();
}
inline void ServerInfoField::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LT.ServerInfoField.address)
}
#if LANG_CXX11
inline void ServerInfoField::set_address(::std::string&& value) {
  
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LT.ServerInfoField.address)
}
#endif
inline void ServerInfoField::set_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LT.ServerInfoField.address)
}
inline void ServerInfoField::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LT.ServerInfoField.address)
}
inline ::std::string* ServerInfoField::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:LT.ServerInfoField.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerInfoField::release_address() {
  // @@protoc_insertion_point(field_release:LT.ServerInfoField.address)
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerInfoField::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:LT.ServerInfoField.address)
}

// string config_path = 13;
inline void ServerInfoField::clear_config_path() {
  config_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ServerInfoField::config_path() const {
  // @@protoc_insertion_point(field_get:LT.ServerInfoField.config_path)
  return config_path_.GetNoArena();
}
inline void ServerInfoField::set_config_path(const ::std::string& value) {
  
  config_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LT.ServerInfoField.config_path)
}
#if LANG_CXX11
inline void ServerInfoField::set_config_path(::std::string&& value) {
  
  config_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LT.ServerInfoField.config_path)
}
#endif
inline void ServerInfoField::set_config_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  config_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LT.ServerInfoField.config_path)
}
inline void ServerInfoField::set_config_path(const char* value, size_t size) {
  
  config_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LT.ServerInfoField.config_path)
}
inline ::std::string* ServerInfoField::mutable_config_path() {
  
  // @@protoc_insertion_point(field_mutable:LT.ServerInfoField.config_path)
  return config_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerInfoField::release_config_path() {
  // @@protoc_insertion_point(field_release:LT.ServerInfoField.config_path)
  
  return config_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerInfoField::set_allocated_config_path(::std::string* config_path) {
  if (config_path != NULL) {
    
  } else {
    
  }
  config_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), config_path);
  // @@protoc_insertion_point(field_set_allocated:LT.ServerInfoField.config_path)
}

// string extinfo = 14;
inline void ServerInfoField::clear_extinfo() {
  extinfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ServerInfoField::extinfo() const {
  // @@protoc_insertion_point(field_get:LT.ServerInfoField.extinfo)
  return extinfo_.GetNoArena();
}
inline void ServerInfoField::set_extinfo(const ::std::string& value) {
  
  extinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LT.ServerInfoField.extinfo)
}
#if LANG_CXX11
inline void ServerInfoField::set_extinfo(::std::string&& value) {
  
  extinfo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LT.ServerInfoField.extinfo)
}
#endif
inline void ServerInfoField::set_extinfo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  extinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LT.ServerInfoField.extinfo)
}
inline void ServerInfoField::set_extinfo(const char* value, size_t size) {
  
  extinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LT.ServerInfoField.extinfo)
}
inline ::std::string* ServerInfoField::mutable_extinfo() {
  
  // @@protoc_insertion_point(field_mutable:LT.ServerInfoField.extinfo)
  return extinfo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerInfoField::release_extinfo() {
  // @@protoc_insertion_point(field_release:LT.ServerInfoField.extinfo)
  
  return extinfo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerInfoField::set_allocated_extinfo(::std::string* extinfo) {
  if (extinfo != NULL) {
    
  } else {
    
  }
  extinfo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extinfo);
  // @@protoc_insertion_point(field_set_allocated:LT.ServerInfoField.extinfo)
}

// -------------------------------------------------------------------

// UserInfoField

// string user_id = 1;
inline void UserInfoField::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserInfoField::user_id() const {
  // @@protoc_insertion_point(field_get:LT.UserInfoField.user_id)
  return user_id_.GetNoArena();
}
inline void UserInfoField::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LT.UserInfoField.user_id)
}
#if LANG_CXX11
inline void UserInfoField::set_user_id(::std::string&& value) {
  
  user_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LT.UserInfoField.user_id)
}
#endif
inline void UserInfoField::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LT.UserInfoField.user_id)
}
inline void UserInfoField::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LT.UserInfoField.user_id)
}
inline ::std::string* UserInfoField::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:LT.UserInfoField.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserInfoField::release_user_id() {
  // @@protoc_insertion_point(field_release:LT.UserInfoField.user_id)
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfoField::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:LT.UserInfoField.user_id)
}

// string password = 2;
inline void UserInfoField::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserInfoField::password() const {
  // @@protoc_insertion_point(field_get:LT.UserInfoField.password)
  return password_.GetNoArena();
}
inline void UserInfoField::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LT.UserInfoField.password)
}
#if LANG_CXX11
inline void UserInfoField::set_password(::std::string&& value) {
  
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LT.UserInfoField.password)
}
#endif
inline void UserInfoField::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LT.UserInfoField.password)
}
inline void UserInfoField::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LT.UserInfoField.password)
}
inline ::std::string* UserInfoField::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:LT.UserInfoField.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserInfoField::release_password() {
  // @@protoc_insertion_point(field_release:LT.UserInfoField.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfoField::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:LT.UserInfoField.password)
}

// string extinfo_string = 3;
inline void UserInfoField::clear_extinfo_string() {
  extinfo_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserInfoField::extinfo_string() const {
  // @@protoc_insertion_point(field_get:LT.UserInfoField.extinfo_string)
  return extinfo_string_.GetNoArena();
}
inline void UserInfoField::set_extinfo_string(const ::std::string& value) {
  
  extinfo_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LT.UserInfoField.extinfo_string)
}
#if LANG_CXX11
inline void UserInfoField::set_extinfo_string(::std::string&& value) {
  
  extinfo_string_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LT.UserInfoField.extinfo_string)
}
#endif
inline void UserInfoField::set_extinfo_string(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  extinfo_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LT.UserInfoField.extinfo_string)
}
inline void UserInfoField::set_extinfo_string(const char* value, size_t size) {
  
  extinfo_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LT.UserInfoField.extinfo_string)
}
inline ::std::string* UserInfoField::mutable_extinfo_string() {
  
  // @@protoc_insertion_point(field_mutable:LT.UserInfoField.extinfo_string)
  return extinfo_string_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserInfoField::release_extinfo_string() {
  // @@protoc_insertion_point(field_release:LT.UserInfoField.extinfo_string)
  
  return extinfo_string_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfoField::set_allocated_extinfo_string(::std::string* extinfo_string) {
  if (extinfo_string != NULL) {
    
  } else {
    
  }
  extinfo_string_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extinfo_string);
  // @@protoc_insertion_point(field_set_allocated:LT.UserInfoField.extinfo_string)
}

// int32 extinfo_int32 = 4;
inline void UserInfoField::clear_extinfo_int32() {
  extinfo_int32_ = 0;
}
inline ::google::protobuf::int32 UserInfoField::extinfo_int32() const {
  // @@protoc_insertion_point(field_get:LT.UserInfoField.extinfo_int32)
  return extinfo_int32_;
}
inline void UserInfoField::set_extinfo_int32(::google::protobuf::int32 value) {
  
  extinfo_int32_ = value;
  // @@protoc_insertion_point(field_set:LT.UserInfoField.extinfo_int32)
}

// -------------------------------------------------------------------

// ErrorField

// int32 xerror_id = 1;
inline void ErrorField::clear_xerror_id() {
  xerror_id_ = 0;
}
inline ::google::protobuf::int32 ErrorField::xerror_id() const {
  // @@protoc_insertion_point(field_get:LT.ErrorField.xerror_id)
  return xerror_id_;
}
inline void ErrorField::set_xerror_id(::google::protobuf::int32 value) {
  
  xerror_id_ = value;
  // @@protoc_insertion_point(field_set:LT.ErrorField.xerror_id)
}

// int32 raw_errorid = 2;
inline void ErrorField::clear_raw_errorid() {
  raw_errorid_ = 0;
}
inline ::google::protobuf::int32 ErrorField::raw_errorid() const {
  // @@protoc_insertion_point(field_get:LT.ErrorField.raw_errorid)
  return raw_errorid_;
}
inline void ErrorField::set_raw_errorid(::google::protobuf::int32 value) {
  
  raw_errorid_ = value;
  // @@protoc_insertion_point(field_set:LT.ErrorField.raw_errorid)
}

// string text = 3;
inline void ErrorField::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ErrorField::text() const {
  // @@protoc_insertion_point(field_get:LT.ErrorField.text)
  return text_.GetNoArena();
}
inline void ErrorField::set_text(const ::std::string& value) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LT.ErrorField.text)
}
#if LANG_CXX11
inline void ErrorField::set_text(::std::string&& value) {
  
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LT.ErrorField.text)
}
#endif
inline void ErrorField::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LT.ErrorField.text)
}
inline void ErrorField::set_text(const char* value, size_t size) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LT.ErrorField.text)
}
inline ::std::string* ErrorField::mutable_text() {
  
  // @@protoc_insertion_point(field_mutable:LT.ErrorField.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ErrorField::release_text() {
  // @@protoc_insertion_point(field_release:LT.ErrorField.text)
  
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ErrorField::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    
  } else {
    
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:LT.ErrorField.text)
}

// string source = 4;
inline void ErrorField::clear_source() {
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ErrorField::source() const {
  // @@protoc_insertion_point(field_get:LT.ErrorField.source)
  return source_.GetNoArena();
}
inline void ErrorField::set_source(const ::std::string& value) {
  
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LT.ErrorField.source)
}
#if LANG_CXX11
inline void ErrorField::set_source(::std::string&& value) {
  
  source_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LT.ErrorField.source)
}
#endif
inline void ErrorField::set_source(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LT.ErrorField.source)
}
inline void ErrorField::set_source(const char* value, size_t size) {
  
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LT.ErrorField.source)
}
inline ::std::string* ErrorField::mutable_source() {
  
  // @@protoc_insertion_point(field_mutable:LT.ErrorField.source)
  return source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ErrorField::release_source() {
  // @@protoc_insertion_point(field_release:LT.ErrorField.source)
  
  return source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ErrorField::set_allocated_source(::std::string* source) {
  if (source != NULL) {
    
  } else {
    
  }
  source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:LT.ErrorField.source)
}

// -------------------------------------------------------------------

// LogField

// .LT.LogLevel level = 1;
inline void LogField::clear_level() {
  level_ = 0;
}
inline ::LT::LogLevel LogField::level() const {
  // @@protoc_insertion_point(field_get:LT.LogField.level)
  return static_cast< ::LT::LogLevel >(level_);
}
inline void LogField::set_level(::LT::LogLevel value) {
  
  level_ = value;
  // @@protoc_insertion_point(field_set:LT.LogField.level)
}

// string message = 2;
inline void LogField::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LogField::message() const {
  // @@protoc_insertion_point(field_get:LT.LogField.message)
  return message_.GetNoArena();
}
inline void LogField::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LT.LogField.message)
}
#if LANG_CXX11
inline void LogField::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LT.LogField.message)
}
#endif
inline void LogField::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LT.LogField.message)
}
inline void LogField::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LT.LogField.message)
}
inline ::std::string* LogField::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:LT.LogField.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LogField::release_message() {
  // @@protoc_insertion_point(field_release:LT.LogField.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogField::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:LT.LogField.message)
}

// -------------------------------------------------------------------

// RspUserLoginField

// int64 trading_day = 1;
inline void RspUserLoginField::clear_trading_day() {
  trading_day_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 RspUserLoginField::trading_day() const {
  // @@protoc_insertion_point(field_get:LT.RspUserLoginField.trading_day)
  return trading_day_;
}
inline void RspUserLoginField::set_trading_day(::google::protobuf::int64 value) {
  
  trading_day_ = value;
  // @@protoc_insertion_point(field_set:LT.RspUserLoginField.trading_day)
}

// int64 login_time = 2;
inline void RspUserLoginField::clear_login_time() {
  login_time_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 RspUserLoginField::login_time() const {
  // @@protoc_insertion_point(field_get:LT.RspUserLoginField.login_time)
  return login_time_;
}
inline void RspUserLoginField::set_login_time(::google::protobuf::int64 value) {
  
  login_time_ = value;
  // @@protoc_insertion_point(field_set:LT.RspUserLoginField.login_time)
}

// string session_id = 4;
inline void RspUserLoginField::clear_session_id() {
  session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RspUserLoginField::session_id() const {
  // @@protoc_insertion_point(field_get:LT.RspUserLoginField.session_id)
  return session_id_.GetNoArena();
}
inline void RspUserLoginField::set_session_id(const ::std::string& value) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LT.RspUserLoginField.session_id)
}
#if LANG_CXX11
inline void RspUserLoginField::set_session_id(::std::string&& value) {
  
  session_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LT.RspUserLoginField.session_id)
}
#endif
inline void RspUserLoginField::set_session_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LT.RspUserLoginField.session_id)
}
inline void RspUserLoginField::set_session_id(const char* value, size_t size) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LT.RspUserLoginField.session_id)
}
inline ::std::string* RspUserLoginField::mutable_session_id() {
  
  // @@protoc_insertion_point(field_mutable:LT.RspUserLoginField.session_id)
  return session_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RspUserLoginField::release_session_id() {
  // @@protoc_insertion_point(field_release:LT.RspUserLoginField.session_id)
  
  return session_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RspUserLoginField::set_allocated_session_id(::std::string* session_id) {
  if (session_id != NULL) {
    
  } else {
    
  }
  session_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_id);
  // @@protoc_insertion_point(field_set_allocated:LT.RspUserLoginField.session_id)
}

// string user_id = 5;
inline void RspUserLoginField::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RspUserLoginField::user_id() const {
  // @@protoc_insertion_point(field_get:LT.RspUserLoginField.user_id)
  return user_id_.GetNoArena();
}
inline void RspUserLoginField::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LT.RspUserLoginField.user_id)
}
#if LANG_CXX11
inline void RspUserLoginField::set_user_id(::std::string&& value) {
  
  user_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LT.RspUserLoginField.user_id)
}
#endif
inline void RspUserLoginField::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LT.RspUserLoginField.user_id)
}
inline void RspUserLoginField::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LT.RspUserLoginField.user_id)
}
inline ::std::string* RspUserLoginField::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:LT.RspUserLoginField.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RspUserLoginField::release_user_id() {
  // @@protoc_insertion_point(field_release:LT.RspUserLoginField.user_id)
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RspUserLoginField::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:LT.RspUserLoginField.user_id)
}

// string accountid = 6;
inline void RspUserLoginField::clear_accountid() {
  accountid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RspUserLoginField::accountid() const {
  // @@protoc_insertion_point(field_get:LT.RspUserLoginField.accountid)
  return accountid_.GetNoArena();
}
inline void RspUserLoginField::set_accountid(const ::std::string& value) {
  
  accountid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LT.RspUserLoginField.accountid)
}
#if LANG_CXX11
inline void RspUserLoginField::set_accountid(::std::string&& value) {
  
  accountid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LT.RspUserLoginField.accountid)
}
#endif
inline void RspUserLoginField::set_accountid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  accountid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LT.RspUserLoginField.accountid)
}
inline void RspUserLoginField::set_accountid(const char* value, size_t size) {
  
  accountid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LT.RspUserLoginField.accountid)
}
inline ::std::string* RspUserLoginField::mutable_accountid() {
  
  // @@protoc_insertion_point(field_mutable:LT.RspUserLoginField.accountid)
  return accountid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RspUserLoginField::release_accountid() {
  // @@protoc_insertion_point(field_release:LT.RspUserLoginField.accountid)
  
  return accountid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RspUserLoginField::set_allocated_accountid(::std::string* accountid) {
  if (accountid != NULL) {
    
  } else {
    
  }
  accountid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), accountid);
  // @@protoc_insertion_point(field_set_allocated:LT.RspUserLoginField.accountid)
}

// string investor_name = 7;
inline void RspUserLoginField::clear_investor_name() {
  investor_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RspUserLoginField::investor_name() const {
  // @@protoc_insertion_point(field_get:LT.RspUserLoginField.investor_name)
  return investor_name_.GetNoArena();
}
inline void RspUserLoginField::set_investor_name(const ::std::string& value) {
  
  investor_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LT.RspUserLoginField.investor_name)
}
#if LANG_CXX11
inline void RspUserLoginField::set_investor_name(::std::string&& value) {
  
  investor_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LT.RspUserLoginField.investor_name)
}
#endif
inline void RspUserLoginField::set_investor_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  investor_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LT.RspUserLoginField.investor_name)
}
inline void RspUserLoginField::set_investor_name(const char* value, size_t size) {
  
  investor_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LT.RspUserLoginField.investor_name)
}
inline ::std::string* RspUserLoginField::mutable_investor_name() {
  
  // @@protoc_insertion_point(field_mutable:LT.RspUserLoginField.investor_name)
  return investor_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RspUserLoginField::release_investor_name() {
  // @@protoc_insertion_point(field_release:LT.RspUserLoginField.investor_name)
  
  return investor_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RspUserLoginField::set_allocated_investor_name(::std::string* investor_name) {
  if (investor_name != NULL) {
    
  } else {
    
  }
  investor_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), investor_name);
  // @@protoc_insertion_point(field_set_allocated:LT.RspUserLoginField.investor_name)
}

// int32 xerror_id = 8;
inline void RspUserLoginField::clear_xerror_id() {
  xerror_id_ = 0;
}
inline ::google::protobuf::int32 RspUserLoginField::xerror_id() const {
  // @@protoc_insertion_point(field_get:LT.RspUserLoginField.xerror_id)
  return xerror_id_;
}
inline void RspUserLoginField::set_xerror_id(::google::protobuf::int32 value) {
  
  xerror_id_ = value;
  // @@protoc_insertion_point(field_set:LT.RspUserLoginField.xerror_id)
}

// int32 raw_errorid = 9;
inline void RspUserLoginField::clear_raw_errorid() {
  raw_errorid_ = 0;
}
inline ::google::protobuf::int32 RspUserLoginField::raw_errorid() const {
  // @@protoc_insertion_point(field_get:LT.RspUserLoginField.raw_errorid)
  return raw_errorid_;
}
inline void RspUserLoginField::set_raw_errorid(::google::protobuf::int32 value) {
  
  raw_errorid_ = value;
  // @@protoc_insertion_point(field_set:LT.RspUserLoginField.raw_errorid)
}

// string text = 10;
inline void RspUserLoginField::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RspUserLoginField::text() const {
  // @@protoc_insertion_point(field_get:LT.RspUserLoginField.text)
  return text_.GetNoArena();
}
inline void RspUserLoginField::set_text(const ::std::string& value) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LT.RspUserLoginField.text)
}
#if LANG_CXX11
inline void RspUserLoginField::set_text(::std::string&& value) {
  
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LT.RspUserLoginField.text)
}
#endif
inline void RspUserLoginField::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LT.RspUserLoginField.text)
}
inline void RspUserLoginField::set_text(const char* value, size_t size) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LT.RspUserLoginField.text)
}
inline ::std::string* RspUserLoginField::mutable_text() {
  
  // @@protoc_insertion_point(field_mutable:LT.RspUserLoginField.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RspUserLoginField::release_text() {
  // @@protoc_insertion_point(field_release:LT.RspUserLoginField.text)
  
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RspUserLoginField::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    
  } else {
    
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:LT.RspUserLoginField.text)
}

// string version = 11;
inline void RspUserLoginField::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RspUserLoginField::version() const {
  // @@protoc_insertion_point(field_get:LT.RspUserLoginField.version)
  return version_.GetNoArena();
}
inline void RspUserLoginField::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LT.RspUserLoginField.version)
}
#if LANG_CXX11
inline void RspUserLoginField::set_version(::std::string&& value) {
  
  version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LT.RspUserLoginField.version)
}
#endif
inline void RspUserLoginField::set_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LT.RspUserLoginField.version)
}
inline void RspUserLoginField::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LT.RspUserLoginField.version)
}
inline ::std::string* RspUserLoginField::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:LT.RspUserLoginField.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RspUserLoginField::release_version() {
  // @@protoc_insertion_point(field_release:LT.RspUserLoginField.version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RspUserLoginField::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:LT.RspUserLoginField.version)
}

// string lang = 12;
inline void RspUserLoginField::clear_lang() {
  lang_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RspUserLoginField::lang() const {
  // @@protoc_insertion_point(field_get:LT.RspUserLoginField.lang)
  return lang_.GetNoArena();
}
inline void RspUserLoginField::set_lang(const ::std::string& value) {
  
  lang_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LT.RspUserLoginField.lang)
}
#if LANG_CXX11
inline void RspUserLoginField::set_lang(::std::string&& value) {
  
  lang_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LT.RspUserLoginField.lang)
}
#endif
inline void RspUserLoginField::set_lang(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  lang_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LT.RspUserLoginField.lang)
}
inline void RspUserLoginField::set_lang(const char* value, size_t size) {
  
  lang_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LT.RspUserLoginField.lang)
}
inline ::std::string* RspUserLoginField::mutable_lang() {
  
  // @@protoc_insertion_point(field_mutable:LT.RspUserLoginField.lang)
  return lang_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RspUserLoginField::release_lang() {
  // @@protoc_insertion_point(field_release:LT.RspUserLoginField.lang)
  
  return lang_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RspUserLoginField::set_allocated_lang(::std::string* lang) {
  if (lang != NULL) {
    
  } else {
    
  }
  lang_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lang);
  // @@protoc_insertion_point(field_set_allocated:LT.RspUserLoginField.lang)
}

// -------------------------------------------------------------------

// DepthMarketDataNField

// int32 size = 1;
inline void DepthMarketDataNField::clear_size() {
  size_ = 0;
}
inline ::google::protobuf::int32 DepthMarketDataNField::size() const {
  // @@protoc_insertion_point(field_get:LT.DepthMarketDataNField.size)
  return size_;
}
inline void DepthMarketDataNField::set_size(::google::protobuf::int32 value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:LT.DepthMarketDataNField.size)
}

// int64 trading_day = 2;
inline void DepthMarketDataNField::clear_trading_day() {
  trading_day_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 DepthMarketDataNField::trading_day() const {
  // @@protoc_insertion_point(field_get:LT.DepthMarketDataNField.trading_day)
  return trading_day_;
}
inline void DepthMarketDataNField::set_trading_day(::google::protobuf::int64 value) {
  
  trading_day_ = value;
  // @@protoc_insertion_point(field_set:LT.DepthMarketDataNField.trading_day)
}

// int64 action_day = 3;
inline void DepthMarketDataNField::clear_action_day() {
  action_day_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 DepthMarketDataNField::action_day() const {
  // @@protoc_insertion_point(field_get:LT.DepthMarketDataNField.action_day)
  return action_day_;
}
inline void DepthMarketDataNField::set_action_day(::google::protobuf::int64 value) {
  
  action_day_ = value;
  // @@protoc_insertion_point(field_set:LT.DepthMarketDataNField.action_day)
}

// int64 update_time = 4;
inline void DepthMarketDataNField::clear_update_time() {
  update_time_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 DepthMarketDataNField::update_time() const {
  // @@protoc_insertion_point(field_get:LT.DepthMarketDataNField.update_time)
  return update_time_;
}
inline void DepthMarketDataNField::set_update_time(::google::protobuf::int64 value) {
  
  update_time_ = value;
  // @@protoc_insertion_point(field_set:LT.DepthMarketDataNField.update_time)
}

// int64 update_millisec = 5;
inline void DepthMarketDataNField::clear_update_millisec() {
  update_millisec_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 DepthMarketDataNField::update_millisec() const {
  // @@protoc_insertion_point(field_get:LT.DepthMarketDataNField.update_millisec)
  return update_millisec_;
}
inline void DepthMarketDataNField::set_update_millisec(::google::protobuf::int64 value) {
  
  update_millisec_ = value;
  // @@protoc_insertion_point(field_set:LT.DepthMarketDataNField.update_millisec)
}

// string symbol = 6;
inline void DepthMarketDataNField::clear_symbol() {
  symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DepthMarketDataNField::symbol() const {
  // @@protoc_insertion_point(field_get:LT.DepthMarketDataNField.symbol)
  return symbol_.GetNoArena();
}
inline void DepthMarketDataNField::set_symbol(const ::std::string& value) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LT.DepthMarketDataNField.symbol)
}
#if LANG_CXX11
inline void DepthMarketDataNField::set_symbol(::std::string&& value) {
  
  symbol_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LT.DepthMarketDataNField.symbol)
}
#endif
inline void DepthMarketDataNField::set_symbol(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LT.DepthMarketDataNField.symbol)
}
inline void DepthMarketDataNField::set_symbol(const char* value, size_t size) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LT.DepthMarketDataNField.symbol)
}
inline ::std::string* DepthMarketDataNField::mutable_symbol() {
  
  // @@protoc_insertion_point(field_mutable:LT.DepthMarketDataNField.symbol)
  return symbol_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DepthMarketDataNField::release_symbol() {
  // @@protoc_insertion_point(field_release:LT.DepthMarketDataNField.symbol)
  
  return symbol_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DepthMarketDataNField::set_allocated_symbol(::std::string* symbol) {
  if (symbol != NULL) {
    
  } else {
    
  }
  symbol_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), symbol);
  // @@protoc_insertion_point(field_set_allocated:LT.DepthMarketDataNField.symbol)
}

// string instrument_id = 7;
inline void DepthMarketDataNField::clear_instrument_id() {
  instrument_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DepthMarketDataNField::instrument_id() const {
  // @@protoc_insertion_point(field_get:LT.DepthMarketDataNField.instrument_id)
  return instrument_id_.GetNoArena();
}
inline void DepthMarketDataNField::set_instrument_id(const ::std::string& value) {
  
  instrument_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LT.DepthMarketDataNField.instrument_id)
}
#if LANG_CXX11
inline void DepthMarketDataNField::set_instrument_id(::std::string&& value) {
  
  instrument_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LT.DepthMarketDataNField.instrument_id)
}
#endif
inline void DepthMarketDataNField::set_instrument_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  instrument_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LT.DepthMarketDataNField.instrument_id)
}
inline void DepthMarketDataNField::set_instrument_id(const char* value, size_t size) {
  
  instrument_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LT.DepthMarketDataNField.instrument_id)
}
inline ::std::string* DepthMarketDataNField::mutable_instrument_id() {
  
  // @@protoc_insertion_point(field_mutable:LT.DepthMarketDataNField.instrument_id)
  return instrument_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DepthMarketDataNField::release_instrument_id() {
  // @@protoc_insertion_point(field_release:LT.DepthMarketDataNField.instrument_id)
  
  return instrument_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DepthMarketDataNField::set_allocated_instrument_id(::std::string* instrument_id) {
  if (instrument_id != NULL) {
    
  } else {
    
  }
  instrument_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instrument_id);
  // @@protoc_insertion_point(field_set_allocated:LT.DepthMarketDataNField.instrument_id)
}

// string exchange_id = 8;
inline void DepthMarketDataNField::clear_exchange_id() {
  exchange_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DepthMarketDataNField::exchange_id() const {
  // @@protoc_insertion_point(field_get:LT.DepthMarketDataNField.exchange_id)
  return exchange_id_.GetNoArena();
}
inline void DepthMarketDataNField::set_exchange_id(const ::std::string& value) {
  
  exchange_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LT.DepthMarketDataNField.exchange_id)
}
#if LANG_CXX11
inline void DepthMarketDataNField::set_exchange_id(::std::string&& value) {
  
  exchange_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LT.DepthMarketDataNField.exchange_id)
}
#endif
inline void DepthMarketDataNField::set_exchange_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  exchange_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LT.DepthMarketDataNField.exchange_id)
}
inline void DepthMarketDataNField::set_exchange_id(const char* value, size_t size) {
  
  exchange_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LT.DepthMarketDataNField.exchange_id)
}
inline ::std::string* DepthMarketDataNField::mutable_exchange_id() {
  
  // @@protoc_insertion_point(field_mutable:LT.DepthMarketDataNField.exchange_id)
  return exchange_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DepthMarketDataNField::release_exchange_id() {
  // @@protoc_insertion_point(field_release:LT.DepthMarketDataNField.exchange_id)
  
  return exchange_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DepthMarketDataNField::set_allocated_exchange_id(::std::string* exchange_id) {
  if (exchange_id != NULL) {
    
  } else {
    
  }
  exchange_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchange_id);
  // @@protoc_insertion_point(field_set_allocated:LT.DepthMarketDataNField.exchange_id)
}

// .LT.ExchangeType exchange = 9;
inline void DepthMarketDataNField::clear_exchange() {
  exchange_ = 0;
}
inline ::LT::ExchangeType DepthMarketDataNField::exchange() const {
  // @@protoc_insertion_point(field_get:LT.DepthMarketDataNField.exchange)
  return static_cast< ::LT::ExchangeType >(exchange_);
}
inline void DepthMarketDataNField::set_exchange(::LT::ExchangeType value) {
  
  exchange_ = value;
  // @@protoc_insertion_point(field_set:LT.DepthMarketDataNField.exchange)
}

// double last_price = 10;
inline void DepthMarketDataNField::clear_last_price() {
  last_price_ = 0;
}
inline double DepthMarketDataNField::last_price() const {
  // @@protoc_insertion_point(field_get:LT.DepthMarketDataNField.last_price)
  return last_price_;
}
inline void DepthMarketDataNField::set_last_price(double value) {
  
  last_price_ = value;
  // @@protoc_insertion_point(field_set:LT.DepthMarketDataNField.last_price)
}

// double volume = 11;
inline void DepthMarketDataNField::clear_volume() {
  volume_ = 0;
}
inline double DepthMarketDataNField::volume() const {
  // @@protoc_insertion_point(field_get:LT.DepthMarketDataNField.volume)
  return volume_;
}
inline void DepthMarketDataNField::set_volume(double value) {
  
  volume_ = value;
  // @@protoc_insertion_point(field_set:LT.DepthMarketDataNField.volume)
}

// double turnover = 12;
inline void DepthMarketDataNField::clear_turnover() {
  turnover_ = 0;
}
inline double DepthMarketDataNField::turnover() const {
  // @@protoc_insertion_point(field_get:LT.DepthMarketDataNField.turnover)
  return turnover_;
}
inline void DepthMarketDataNField::set_turnover(double value) {
  
  turnover_ = value;
  // @@protoc_insertion_point(field_set:LT.DepthMarketDataNField.turnover)
}

// double openinterest = 13;
inline void DepthMarketDataNField::clear_openinterest() {
  openinterest_ = 0;
}
inline double DepthMarketDataNField::openinterest() const {
  // @@protoc_insertion_point(field_get:LT.DepthMarketDataNField.openinterest)
  return openinterest_;
}
inline void DepthMarketDataNField::set_openinterest(double value) {
  
  openinterest_ = value;
  // @@protoc_insertion_point(field_set:LT.DepthMarketDataNField.openinterest)
}

// double average_price = 14;
inline void DepthMarketDataNField::clear_average_price() {
  average_price_ = 0;
}
inline double DepthMarketDataNField::average_price() const {
  // @@protoc_insertion_point(field_get:LT.DepthMarketDataNField.average_price)
  return average_price_;
}
inline void DepthMarketDataNField::set_average_price(double value) {
  
  average_price_ = value;
  // @@protoc_insertion_point(field_set:LT.DepthMarketDataNField.average_price)
}

// double open_price = 15;
inline void DepthMarketDataNField::clear_open_price() {
  open_price_ = 0;
}
inline double DepthMarketDataNField::open_price() const {
  // @@protoc_insertion_point(field_get:LT.DepthMarketDataNField.open_price)
  return open_price_;
}
inline void DepthMarketDataNField::set_open_price(double value) {
  
  open_price_ = value;
  // @@protoc_insertion_point(field_set:LT.DepthMarketDataNField.open_price)
}

// double highest_price = 16;
inline void DepthMarketDataNField::clear_highest_price() {
  highest_price_ = 0;
}
inline double DepthMarketDataNField::highest_price() const {
  // @@protoc_insertion_point(field_get:LT.DepthMarketDataNField.highest_price)
  return highest_price_;
}
inline void DepthMarketDataNField::set_highest_price(double value) {
  
  highest_price_ = value;
  // @@protoc_insertion_point(field_set:LT.DepthMarketDataNField.highest_price)
}

// double lowest_price = 17;
inline void DepthMarketDataNField::clear_lowest_price() {
  lowest_price_ = 0;
}
inline double DepthMarketDataNField::lowest_price() const {
  // @@protoc_insertion_point(field_get:LT.DepthMarketDataNField.lowest_price)
  return lowest_price_;
}
inline void DepthMarketDataNField::set_lowest_price(double value) {
  
  lowest_price_ = value;
  // @@protoc_insertion_point(field_set:LT.DepthMarketDataNField.lowest_price)
}

// double close_price = 18;
inline void DepthMarketDataNField::clear_close_price() {
  close_price_ = 0;
}
inline double DepthMarketDataNField::close_price() const {
  // @@protoc_insertion_point(field_get:LT.DepthMarketDataNField.close_price)
  return close_price_;
}
inline void DepthMarketDataNField::set_close_price(double value) {
  
  close_price_ = value;
  // @@protoc_insertion_point(field_set:LT.DepthMarketDataNField.close_price)
}

// double settlement_price = 19;
inline void DepthMarketDataNField::clear_settlement_price() {
  settlement_price_ = 0;
}
inline double DepthMarketDataNField::settlement_price() const {
  // @@protoc_insertion_point(field_get:LT.DepthMarketDataNField.settlement_price)
  return settlement_price_;
}
inline void DepthMarketDataNField::set_settlement_price(double value) {
  
  settlement_price_ = value;
  // @@protoc_insertion_point(field_set:LT.DepthMarketDataNField.settlement_price)
}

// double upperlimit_price = 20;
inline void DepthMarketDataNField::clear_upperlimit_price() {
  upperlimit_price_ = 0;
}
inline double DepthMarketDataNField::upperlimit_price() const {
  // @@protoc_insertion_point(field_get:LT.DepthMarketDataNField.upperlimit_price)
  return upperlimit_price_;
}
inline void DepthMarketDataNField::set_upperlimit_price(double value) {
  
  upperlimit_price_ = value;
  // @@protoc_insertion_point(field_set:LT.DepthMarketDataNField.upperlimit_price)
}

// double lowerlimit_price = 21;
inline void DepthMarketDataNField::clear_lowerlimit_price() {
  lowerlimit_price_ = 0;
}
inline double DepthMarketDataNField::lowerlimit_price() const {
  // @@protoc_insertion_point(field_get:LT.DepthMarketDataNField.lowerlimit_price)
  return lowerlimit_price_;
}
inline void DepthMarketDataNField::set_lowerlimit_price(double value) {
  
  lowerlimit_price_ = value;
  // @@protoc_insertion_point(field_set:LT.DepthMarketDataNField.lowerlimit_price)
}

// double preclose_price = 22;
inline void DepthMarketDataNField::clear_preclose_price() {
  preclose_price_ = 0;
}
inline double DepthMarketDataNField::preclose_price() const {
  // @@protoc_insertion_point(field_get:LT.DepthMarketDataNField.preclose_price)
  return preclose_price_;
}
inline void DepthMarketDataNField::set_preclose_price(double value) {
  
  preclose_price_ = value;
  // @@protoc_insertion_point(field_set:LT.DepthMarketDataNField.preclose_price)
}

// double presettlement_price = 23;
inline void DepthMarketDataNField::clear_presettlement_price() {
  presettlement_price_ = 0;
}
inline double DepthMarketDataNField::presettlement_price() const {
  // @@protoc_insertion_point(field_get:LT.DepthMarketDataNField.presettlement_price)
  return presettlement_price_;
}
inline void DepthMarketDataNField::set_presettlement_price(double value) {
  
  presettlement_price_ = value;
  // @@protoc_insertion_point(field_set:LT.DepthMarketDataNField.presettlement_price)
}

// double preopeninterest = 24;
inline void DepthMarketDataNField::clear_preopeninterest() {
  preopeninterest_ = 0;
}
inline double DepthMarketDataNField::preopeninterest() const {
  // @@protoc_insertion_point(field_get:LT.DepthMarketDataNField.preopeninterest)
  return preopeninterest_;
}
inline void DepthMarketDataNField::set_preopeninterest(double value) {
  
  preopeninterest_ = value;
  // @@protoc_insertion_point(field_set:LT.DepthMarketDataNField.preopeninterest)
}

// .LT.TradingPhaseType trading_phase = 25;
inline void DepthMarketDataNField::clear_trading_phase() {
  trading_phase_ = 0;
}
inline ::LT::TradingPhaseType DepthMarketDataNField::trading_phase() const {
  // @@protoc_insertion_point(field_get:LT.DepthMarketDataNField.trading_phase)
  return static_cast< ::LT::TradingPhaseType >(trading_phase_);
}
inline void DepthMarketDataNField::set_trading_phase(::LT::TradingPhaseType value) {
  
  trading_phase_ = value;
  // @@protoc_insertion_point(field_set:LT.DepthMarketDataNField.trading_phase)
}

// int32 bidcount = 26;
inline void DepthMarketDataNField::clear_bidcount() {
  bidcount_ = 0;
}
inline ::google::protobuf::int32 DepthMarketDataNField::bidcount() const {
  // @@protoc_insertion_point(field_get:LT.DepthMarketDataNField.bidcount)
  return bidcount_;
}
inline void DepthMarketDataNField::set_bidcount(::google::protobuf::int32 value) {
  
  bidcount_ = value;
  // @@protoc_insertion_point(field_set:LT.DepthMarketDataNField.bidcount)
}

// -------------------------------------------------------------------

// DepthField

// double price = 1;
inline void DepthField::clear_price() {
  price_ = 0;
}
inline double DepthField::price() const {
  // @@protoc_insertion_point(field_get:LT.DepthField.price)
  return price_;
}
inline void DepthField::set_price(double value) {
  
  price_ = value;
  // @@protoc_insertion_point(field_set:LT.DepthField.price)
}

// double size = 2;
inline void DepthField::clear_size() {
  size_ = 0;
}
inline double DepthField::size() const {
  // @@protoc_insertion_point(field_get:LT.DepthField.size)
  return size_;
}
inline void DepthField::set_size(double value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:LT.DepthField.size)
}

// double count = 3;
inline void DepthField::clear_count() {
  count_ = 0;
}
inline double DepthField::count() const {
  // @@protoc_insertion_point(field_get:LT.DepthField.count)
  return count_;
}
inline void DepthField::set_count(double value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:LT.DepthField.count)
}

// -------------------------------------------------------------------

// InstrumentField

// string instrument_name = 1;
inline void InstrumentField::clear_instrument_name() {
  instrument_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InstrumentField::instrument_name() const {
  // @@protoc_insertion_point(field_get:LT.InstrumentField.instrument_name)
  return instrument_name_.GetNoArena();
}
inline void InstrumentField::set_instrument_name(const ::std::string& value) {
  
  instrument_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LT.InstrumentField.instrument_name)
}
#if LANG_CXX11
inline void InstrumentField::set_instrument_name(::std::string&& value) {
  
  instrument_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LT.InstrumentField.instrument_name)
}
#endif
inline void InstrumentField::set_instrument_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  instrument_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LT.InstrumentField.instrument_name)
}
inline void InstrumentField::set_instrument_name(const char* value, size_t size) {
  
  instrument_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LT.InstrumentField.instrument_name)
}
inline ::std::string* InstrumentField::mutable_instrument_name() {
  
  // @@protoc_insertion_point(field_mutable:LT.InstrumentField.instrument_name)
  return instrument_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InstrumentField::release_instrument_name() {
  // @@protoc_insertion_point(field_release:LT.InstrumentField.instrument_name)
  
  return instrument_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InstrumentField::set_allocated_instrument_name(::std::string* instrument_name) {
  if (instrument_name != NULL) {
    
  } else {
    
  }
  instrument_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instrument_name);
  // @@protoc_insertion_point(field_set_allocated:LT.InstrumentField.instrument_name)
}

// string symbol = 2;
inline void InstrumentField::clear_symbol() {
  symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InstrumentField::symbol() const {
  // @@protoc_insertion_point(field_get:LT.InstrumentField.symbol)
  return symbol_.GetNoArena();
}
inline void InstrumentField::set_symbol(const ::std::string& value) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LT.InstrumentField.symbol)
}
#if LANG_CXX11
inline void InstrumentField::set_symbol(::std::string&& value) {
  
  symbol_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LT.InstrumentField.symbol)
}
#endif
inline void InstrumentField::set_symbol(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LT.InstrumentField.symbol)
}
inline void InstrumentField::set_symbol(const char* value, size_t size) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LT.InstrumentField.symbol)
}
inline ::std::string* InstrumentField::mutable_symbol() {
  
  // @@protoc_insertion_point(field_mutable:LT.InstrumentField.symbol)
  return symbol_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InstrumentField::release_symbol() {
  // @@protoc_insertion_point(field_release:LT.InstrumentField.symbol)
  
  return symbol_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InstrumentField::set_allocated_symbol(::std::string* symbol) {
  if (symbol != NULL) {
    
  } else {
    
  }
  symbol_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), symbol);
  // @@protoc_insertion_point(field_set_allocated:LT.InstrumentField.symbol)
}

// string instrument_id = 3;
inline void InstrumentField::clear_instrument_id() {
  instrument_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InstrumentField::instrument_id() const {
  // @@protoc_insertion_point(field_get:LT.InstrumentField.instrument_id)
  return instrument_id_.GetNoArena();
}
inline void InstrumentField::set_instrument_id(const ::std::string& value) {
  
  instrument_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LT.InstrumentField.instrument_id)
}
#if LANG_CXX11
inline void InstrumentField::set_instrument_id(::std::string&& value) {
  
  instrument_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LT.InstrumentField.instrument_id)
}
#endif
inline void InstrumentField::set_instrument_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  instrument_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LT.InstrumentField.instrument_id)
}
inline void InstrumentField::set_instrument_id(const char* value, size_t size) {
  
  instrument_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LT.InstrumentField.instrument_id)
}
inline ::std::string* InstrumentField::mutable_instrument_id() {
  
  // @@protoc_insertion_point(field_mutable:LT.InstrumentField.instrument_id)
  return instrument_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InstrumentField::release_instrument_id() {
  // @@protoc_insertion_point(field_release:LT.InstrumentField.instrument_id)
  
  return instrument_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InstrumentField::set_allocated_instrument_id(::std::string* instrument_id) {
  if (instrument_id != NULL) {
    
  } else {
    
  }
  instrument_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instrument_id);
  // @@protoc_insertion_point(field_set_allocated:LT.InstrumentField.instrument_id)
}

// string exchange_id = 4;
inline void InstrumentField::clear_exchange_id() {
  exchange_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InstrumentField::exchange_id() const {
  // @@protoc_insertion_point(field_get:LT.InstrumentField.exchange_id)
  return exchange_id_.GetNoArena();
}
inline void InstrumentField::set_exchange_id(const ::std::string& value) {
  
  exchange_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LT.InstrumentField.exchange_id)
}
#if LANG_CXX11
inline void InstrumentField::set_exchange_id(::std::string&& value) {
  
  exchange_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LT.InstrumentField.exchange_id)
}
#endif
inline void InstrumentField::set_exchange_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  exchange_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LT.InstrumentField.exchange_id)
}
inline void InstrumentField::set_exchange_id(const char* value, size_t size) {
  
  exchange_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LT.InstrumentField.exchange_id)
}
inline ::std::string* InstrumentField::mutable_exchange_id() {
  
  // @@protoc_insertion_point(field_mutable:LT.InstrumentField.exchange_id)
  return exchange_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InstrumentField::release_exchange_id() {
  // @@protoc_insertion_point(field_release:LT.InstrumentField.exchange_id)
  
  return exchange_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InstrumentField::set_allocated_exchange_id(::std::string* exchange_id) {
  if (exchange_id != NULL) {
    
  } else {
    
  }
  exchange_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchange_id);
  // @@protoc_insertion_point(field_set_allocated:LT.InstrumentField.exchange_id)
}

// string client_id = 5;
inline void InstrumentField::clear_client_id() {
  client_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InstrumentField::client_id() const {
  // @@protoc_insertion_point(field_get:LT.InstrumentField.client_id)
  return client_id_.GetNoArena();
}
inline void InstrumentField::set_client_id(const ::std::string& value) {
  
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LT.InstrumentField.client_id)
}
#if LANG_CXX11
inline void InstrumentField::set_client_id(::std::string&& value) {
  
  client_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LT.InstrumentField.client_id)
}
#endif
inline void InstrumentField::set_client_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LT.InstrumentField.client_id)
}
inline void InstrumentField::set_client_id(const char* value, size_t size) {
  
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LT.InstrumentField.client_id)
}
inline ::std::string* InstrumentField::mutable_client_id() {
  
  // @@protoc_insertion_point(field_mutable:LT.InstrumentField.client_id)
  return client_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InstrumentField::release_client_id() {
  // @@protoc_insertion_point(field_release:LT.InstrumentField.client_id)
  
  return client_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InstrumentField::set_allocated_client_id(::std::string* client_id) {
  if (client_id != NULL) {
    
  } else {
    
  }
  client_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_id);
  // @@protoc_insertion_point(field_set_allocated:LT.InstrumentField.client_id)
}

// string account_id = 6;
inline void InstrumentField::clear_account_id() {
  account_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InstrumentField::account_id() const {
  // @@protoc_insertion_point(field_get:LT.InstrumentField.account_id)
  return account_id_.GetNoArena();
}
inline void InstrumentField::set_account_id(const ::std::string& value) {
  
  account_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LT.InstrumentField.account_id)
}
#if LANG_CXX11
inline void InstrumentField::set_account_id(::std::string&& value) {
  
  account_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LT.InstrumentField.account_id)
}
#endif
inline void InstrumentField::set_account_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  account_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LT.InstrumentField.account_id)
}
inline void InstrumentField::set_account_id(const char* value, size_t size) {
  
  account_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LT.InstrumentField.account_id)
}
inline ::std::string* InstrumentField::mutable_account_id() {
  
  // @@protoc_insertion_point(field_mutable:LT.InstrumentField.account_id)
  return account_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InstrumentField::release_account_id() {
  // @@protoc_insertion_point(field_release:LT.InstrumentField.account_id)
  
  return account_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InstrumentField::set_allocated_account_id(::std::string* account_id) {
  if (account_id != NULL) {
    
  } else {
    
  }
  account_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account_id);
  // @@protoc_insertion_point(field_set_allocated:LT.InstrumentField.account_id)
}

// string exchange_instid = 7;
inline void InstrumentField::clear_exchange_instid() {
  exchange_instid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InstrumentField::exchange_instid() const {
  // @@protoc_insertion_point(field_get:LT.InstrumentField.exchange_instid)
  return exchange_instid_.GetNoArena();
}
inline void InstrumentField::set_exchange_instid(const ::std::string& value) {
  
  exchange_instid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LT.InstrumentField.exchange_instid)
}
#if LANG_CXX11
inline void InstrumentField::set_exchange_instid(::std::string&& value) {
  
  exchange_instid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LT.InstrumentField.exchange_instid)
}
#endif
inline void InstrumentField::set_exchange_instid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  exchange_instid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LT.InstrumentField.exchange_instid)
}
inline void InstrumentField::set_exchange_instid(const char* value, size_t size) {
  
  exchange_instid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LT.InstrumentField.exchange_instid)
}
inline ::std::string* InstrumentField::mutable_exchange_instid() {
  
  // @@protoc_insertion_point(field_mutable:LT.InstrumentField.exchange_instid)
  return exchange_instid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InstrumentField::release_exchange_instid() {
  // @@protoc_insertion_point(field_release:LT.InstrumentField.exchange_instid)
  
  return exchange_instid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InstrumentField::set_allocated_exchange_instid(::std::string* exchange_instid) {
  if (exchange_instid != NULL) {
    
  } else {
    
  }
  exchange_instid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchange_instid);
  // @@protoc_insertion_point(field_set_allocated:LT.InstrumentField.exchange_instid)
}

// .LT.InstrumentType type = 8;
inline void InstrumentField::clear_type() {
  type_ = 0;
}
inline ::LT::InstrumentType InstrumentField::type() const {
  // @@protoc_insertion_point(field_get:LT.InstrumentField.type)
  return static_cast< ::LT::InstrumentType >(type_);
}
inline void InstrumentField::set_type(::LT::InstrumentType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:LT.InstrumentField.type)
}

// int32 volume_multiple = 9;
inline void InstrumentField::clear_volume_multiple() {
  volume_multiple_ = 0;
}
inline ::google::protobuf::int32 InstrumentField::volume_multiple() const {
  // @@protoc_insertion_point(field_get:LT.InstrumentField.volume_multiple)
  return volume_multiple_;
}
inline void InstrumentField::set_volume_multiple(::google::protobuf::int32 value) {
  
  volume_multiple_ = value;
  // @@protoc_insertion_point(field_set:LT.InstrumentField.volume_multiple)
}

// double price_tick = 10;
inline void InstrumentField::clear_price_tick() {
  price_tick_ = 0;
}
inline double InstrumentField::price_tick() const {
  // @@protoc_insertion_point(field_get:LT.InstrumentField.price_tick)
  return price_tick_;
}
inline void InstrumentField::set_price_tick(double value) {
  
  price_tick_ = value;
  // @@protoc_insertion_point(field_set:LT.InstrumentField.price_tick)
}

// int32 expire_date = 11;
inline void InstrumentField::clear_expire_date() {
  expire_date_ = 0;
}
inline ::google::protobuf::int32 InstrumentField::expire_date() const {
  // @@protoc_insertion_point(field_get:LT.InstrumentField.expire_date)
  return expire_date_;
}
inline void InstrumentField::set_expire_date(::google::protobuf::int32 value) {
  
  expire_date_ = value;
  // @@protoc_insertion_point(field_set:LT.InstrumentField.expire_date)
}

// double strike_price = 12;
inline void InstrumentField::clear_strike_price() {
  strike_price_ = 0;
}
inline double InstrumentField::strike_price() const {
  // @@protoc_insertion_point(field_get:LT.InstrumentField.strike_price)
  return strike_price_;
}
inline void InstrumentField::set_strike_price(double value) {
  
  strike_price_ = value;
  // @@protoc_insertion_point(field_set:LT.InstrumentField.strike_price)
}

// .LT.PutCall options_type = 13;
inline void InstrumentField::clear_options_type() {
  options_type_ = 0;
}
inline ::LT::PutCall InstrumentField::options_type() const {
  // @@protoc_insertion_point(field_get:LT.InstrumentField.options_type)
  return static_cast< ::LT::PutCall >(options_type_);
}
inline void InstrumentField::set_options_type(::LT::PutCall value) {
  
  options_type_ = value;
  // @@protoc_insertion_point(field_set:LT.InstrumentField.options_type)
}

// string product_id = 14;
inline void InstrumentField::clear_product_id() {
  product_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InstrumentField::product_id() const {
  // @@protoc_insertion_point(field_get:LT.InstrumentField.product_id)
  return product_id_.GetNoArena();
}
inline void InstrumentField::set_product_id(const ::std::string& value) {
  
  product_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LT.InstrumentField.product_id)
}
#if LANG_CXX11
inline void InstrumentField::set_product_id(::std::string&& value) {
  
  product_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LT.InstrumentField.product_id)
}
#endif
inline void InstrumentField::set_product_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  product_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LT.InstrumentField.product_id)
}
inline void InstrumentField::set_product_id(const char* value, size_t size) {
  
  product_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LT.InstrumentField.product_id)
}
inline ::std::string* InstrumentField::mutable_product_id() {
  
  // @@protoc_insertion_point(field_mutable:LT.InstrumentField.product_id)
  return product_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InstrumentField::release_product_id() {
  // @@protoc_insertion_point(field_release:LT.InstrumentField.product_id)
  
  return product_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InstrumentField::set_allocated_product_id(::std::string* product_id) {
  if (product_id != NULL) {
    
  } else {
    
  }
  product_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), product_id);
  // @@protoc_insertion_point(field_set_allocated:LT.InstrumentField.product_id)
}

// string underlying_instrid = 15;
inline void InstrumentField::clear_underlying_instrid() {
  underlying_instrid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InstrumentField::underlying_instrid() const {
  // @@protoc_insertion_point(field_get:LT.InstrumentField.underlying_instrid)
  return underlying_instrid_.GetNoArena();
}
inline void InstrumentField::set_underlying_instrid(const ::std::string& value) {
  
  underlying_instrid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LT.InstrumentField.underlying_instrid)
}
#if LANG_CXX11
inline void InstrumentField::set_underlying_instrid(::std::string&& value) {
  
  underlying_instrid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LT.InstrumentField.underlying_instrid)
}
#endif
inline void InstrumentField::set_underlying_instrid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  underlying_instrid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LT.InstrumentField.underlying_instrid)
}
inline void InstrumentField::set_underlying_instrid(const char* value, size_t size) {
  
  underlying_instrid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LT.InstrumentField.underlying_instrid)
}
inline ::std::string* InstrumentField::mutable_underlying_instrid() {
  
  // @@protoc_insertion_point(field_mutable:LT.InstrumentField.underlying_instrid)
  return underlying_instrid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InstrumentField::release_underlying_instrid() {
  // @@protoc_insertion_point(field_release:LT.InstrumentField.underlying_instrid)
  
  return underlying_instrid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InstrumentField::set_allocated_underlying_instrid(::std::string* underlying_instrid) {
  if (underlying_instrid != NULL) {
    
  } else {
    
  }
  underlying_instrid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), underlying_instrid);
  // @@protoc_insertion_point(field_set_allocated:LT.InstrumentField.underlying_instrid)
}

// .LT.InstLifePhaseType instlife_phase = 16;
inline void InstrumentField::clear_instlife_phase() {
  instlife_phase_ = 0;
}
inline ::LT::InstLifePhaseType InstrumentField::instlife_phase() const {
  // @@protoc_insertion_point(field_get:LT.InstrumentField.instlife_phase)
  return static_cast< ::LT::InstLifePhaseType >(instlife_phase_);
}
inline void InstrumentField::set_instlife_phase(::LT::InstLifePhaseType value) {
  
  instlife_phase_ = value;
  // @@protoc_insertion_point(field_set:LT.InstrumentField.instlife_phase)
}

// -------------------------------------------------------------------

// AccountField

// string client_id = 1;
inline void AccountField::clear_client_id() {
  client_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AccountField::client_id() const {
  // @@protoc_insertion_point(field_get:LT.AccountField.client_id)
  return client_id_.GetNoArena();
}
inline void AccountField::set_client_id(const ::std::string& value) {
  
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LT.AccountField.client_id)
}
#if LANG_CXX11
inline void AccountField::set_client_id(::std::string&& value) {
  
  client_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LT.AccountField.client_id)
}
#endif
inline void AccountField::set_client_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LT.AccountField.client_id)
}
inline void AccountField::set_client_id(const char* value, size_t size) {
  
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LT.AccountField.client_id)
}
inline ::std::string* AccountField::mutable_client_id() {
  
  // @@protoc_insertion_point(field_mutable:LT.AccountField.client_id)
  return client_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AccountField::release_client_id() {
  // @@protoc_insertion_point(field_release:LT.AccountField.client_id)
  
  return client_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AccountField::set_allocated_client_id(::std::string* client_id) {
  if (client_id != NULL) {
    
  } else {
    
  }
  client_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_id);
  // @@protoc_insertion_point(field_set_allocated:LT.AccountField.client_id)
}

// string account_id = 2;
inline void AccountField::clear_account_id() {
  account_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AccountField::account_id() const {
  // @@protoc_insertion_point(field_get:LT.AccountField.account_id)
  return account_id_.GetNoArena();
}
inline void AccountField::set_account_id(const ::std::string& value) {
  
  account_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LT.AccountField.account_id)
}
#if LANG_CXX11
inline void AccountField::set_account_id(::std::string&& value) {
  
  account_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LT.AccountField.account_id)
}
#endif
inline void AccountField::set_account_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  account_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LT.AccountField.account_id)
}
inline void AccountField::set_account_id(const char* value, size_t size) {
  
  account_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LT.AccountField.account_id)
}
inline ::std::string* AccountField::mutable_account_id() {
  
  // @@protoc_insertion_point(field_mutable:LT.AccountField.account_id)
  return account_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AccountField::release_account_id() {
  // @@protoc_insertion_point(field_release:LT.AccountField.account_id)
  
  return account_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AccountField::set_allocated_account_id(::std::string* account_id) {
  if (account_id != NULL) {
    
  } else {
    
  }
  account_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account_id);
  // @@protoc_insertion_point(field_set_allocated:LT.AccountField.account_id)
}

// string currency_id = 3;
inline void AccountField::clear_currency_id() {
  currency_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AccountField::currency_id() const {
  // @@protoc_insertion_point(field_get:LT.AccountField.currency_id)
  return currency_id_.GetNoArena();
}
inline void AccountField::set_currency_id(const ::std::string& value) {
  
  currency_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LT.AccountField.currency_id)
}
#if LANG_CXX11
inline void AccountField::set_currency_id(::std::string&& value) {
  
  currency_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LT.AccountField.currency_id)
}
#endif
inline void AccountField::set_currency_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  currency_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LT.AccountField.currency_id)
}
inline void AccountField::set_currency_id(const char* value, size_t size) {
  
  currency_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LT.AccountField.currency_id)
}
inline ::std::string* AccountField::mutable_currency_id() {
  
  // @@protoc_insertion_point(field_mutable:LT.AccountField.currency_id)
  return currency_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AccountField::release_currency_id() {
  // @@protoc_insertion_point(field_release:LT.AccountField.currency_id)
  
  return currency_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AccountField::set_allocated_currency_id(::std::string* currency_id) {
  if (currency_id != NULL) {
    
  } else {
    
  }
  currency_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), currency_id);
  // @@protoc_insertion_point(field_set_allocated:LT.AccountField.currency_id)
}

// double pre_balance = 4;
inline void AccountField::clear_pre_balance() {
  pre_balance_ = 0;
}
inline double AccountField::pre_balance() const {
  // @@protoc_insertion_point(field_get:LT.AccountField.pre_balance)
  return pre_balance_;
}
inline void AccountField::set_pre_balance(double value) {
  
  pre_balance_ = value;
  // @@protoc_insertion_point(field_set:LT.AccountField.pre_balance)
}

// double curr_margin = 5;
inline void AccountField::clear_curr_margin() {
  curr_margin_ = 0;
}
inline double AccountField::curr_margin() const {
  // @@protoc_insertion_point(field_get:LT.AccountField.curr_margin)
  return curr_margin_;
}
inline void AccountField::set_curr_margin(double value) {
  
  curr_margin_ = value;
  // @@protoc_insertion_point(field_set:LT.AccountField.curr_margin)
}

// double close_profit = 6;
inline void AccountField::clear_close_profit() {
  close_profit_ = 0;
}
inline double AccountField::close_profit() const {
  // @@protoc_insertion_point(field_get:LT.AccountField.close_profit)
  return close_profit_;
}
inline void AccountField::set_close_profit(double value) {
  
  close_profit_ = value;
  // @@protoc_insertion_point(field_set:LT.AccountField.close_profit)
}

// double position_profit = 7;
inline void AccountField::clear_position_profit() {
  position_profit_ = 0;
}
inline double AccountField::position_profit() const {
  // @@protoc_insertion_point(field_get:LT.AccountField.position_profit)
  return position_profit_;
}
inline void AccountField::set_position_profit(double value) {
  
  position_profit_ = value;
  // @@protoc_insertion_point(field_set:LT.AccountField.position_profit)
}

// double balance = 8;
inline void AccountField::clear_balance() {
  balance_ = 0;
}
inline double AccountField::balance() const {
  // @@protoc_insertion_point(field_get:LT.AccountField.balance)
  return balance_;
}
inline void AccountField::set_balance(double value) {
  
  balance_ = value;
  // @@protoc_insertion_point(field_set:LT.AccountField.balance)
}

// double available = 9;
inline void AccountField::clear_available() {
  available_ = 0;
}
inline double AccountField::available() const {
  // @@protoc_insertion_point(field_get:LT.AccountField.available)
  return available_;
}
inline void AccountField::set_available(double value) {
  
  available_ = value;
  // @@protoc_insertion_point(field_set:LT.AccountField.available)
}

// double deposit = 10;
inline void AccountField::clear_deposit() {
  deposit_ = 0;
}
inline double AccountField::deposit() const {
  // @@protoc_insertion_point(field_get:LT.AccountField.deposit)
  return deposit_;
}
inline void AccountField::set_deposit(double value) {
  
  deposit_ = value;
  // @@protoc_insertion_point(field_set:LT.AccountField.deposit)
}

// double withdraw = 11;
inline void AccountField::clear_withdraw() {
  withdraw_ = 0;
}
inline double AccountField::withdraw() const {
  // @@protoc_insertion_point(field_get:LT.AccountField.withdraw)
  return withdraw_;
}
inline void AccountField::set_withdraw(double value) {
  
  withdraw_ = value;
  // @@protoc_insertion_point(field_set:LT.AccountField.withdraw)
}

// double withdrawquota = 12;
inline void AccountField::clear_withdrawquota() {
  withdrawquota_ = 0;
}
inline double AccountField::withdrawquota() const {
  // @@protoc_insertion_point(field_get:LT.AccountField.withdrawquota)
  return withdrawquota_;
}
inline void AccountField::set_withdrawquota(double value) {
  
  withdrawquota_ = value;
  // @@protoc_insertion_point(field_set:LT.AccountField.withdrawquota)
}

// double frozen_transfer_fee = 13;
inline void AccountField::clear_frozen_transfer_fee() {
  frozen_transfer_fee_ = 0;
}
inline double AccountField::frozen_transfer_fee() const {
  // @@protoc_insertion_point(field_get:LT.AccountField.frozen_transfer_fee)
  return frozen_transfer_fee_;
}
inline void AccountField::set_frozen_transfer_fee(double value) {
  
  frozen_transfer_fee_ = value;
  // @@protoc_insertion_point(field_set:LT.AccountField.frozen_transfer_fee)
}

// double frozen_stamp_tax = 14;
inline void AccountField::clear_frozen_stamp_tax() {
  frozen_stamp_tax_ = 0;
}
inline double AccountField::frozen_stamp_tax() const {
  // @@protoc_insertion_point(field_get:LT.AccountField.frozen_stamp_tax)
  return frozen_stamp_tax_;
}
inline void AccountField::set_frozen_stamp_tax(double value) {
  
  frozen_stamp_tax_ = value;
  // @@protoc_insertion_point(field_set:LT.AccountField.frozen_stamp_tax)
}

// double frozen_commission = 15;
inline void AccountField::clear_frozen_commission() {
  frozen_commission_ = 0;
}
inline double AccountField::frozen_commission() const {
  // @@protoc_insertion_point(field_get:LT.AccountField.frozen_commission)
  return frozen_commission_;
}
inline void AccountField::set_frozen_commission(double value) {
  
  frozen_commission_ = value;
  // @@protoc_insertion_point(field_set:LT.AccountField.frozen_commission)
}

// double frozen_cash = 16;
inline void AccountField::clear_frozen_cash() {
  frozen_cash_ = 0;
}
inline double AccountField::frozen_cash() const {
  // @@protoc_insertion_point(field_get:LT.AccountField.frozen_cash)
  return frozen_cash_;
}
inline void AccountField::set_frozen_cash(double value) {
  
  frozen_cash_ = value;
  // @@protoc_insertion_point(field_set:LT.AccountField.frozen_cash)
}

// double transfer_fee = 17;
inline void AccountField::clear_transfer_fee() {
  transfer_fee_ = 0;
}
inline double AccountField::transfer_fee() const {
  // @@protoc_insertion_point(field_get:LT.AccountField.transfer_fee)
  return transfer_fee_;
}
inline void AccountField::set_transfer_fee(double value) {
  
  transfer_fee_ = value;
  // @@protoc_insertion_point(field_set:LT.AccountField.transfer_fee)
}

// double stamp_tax = 18;
inline void AccountField::clear_stamp_tax() {
  stamp_tax_ = 0;
}
inline double AccountField::stamp_tax() const {
  // @@protoc_insertion_point(field_get:LT.AccountField.stamp_tax)
  return stamp_tax_;
}
inline void AccountField::set_stamp_tax(double value) {
  
  stamp_tax_ = value;
  // @@protoc_insertion_point(field_set:LT.AccountField.stamp_tax)
}

// double commission = 19;
inline void AccountField::clear_commission() {
  commission_ = 0;
}
inline double AccountField::commission() const {
  // @@protoc_insertion_point(field_get:LT.AccountField.commission)
  return commission_;
}
inline void AccountField::set_commission(double value) {
  
  commission_ = value;
  // @@protoc_insertion_point(field_set:LT.AccountField.commission)
}

// double cashin = 20;
inline void AccountField::clear_cashin() {
  cashin_ = 0;
}
inline double AccountField::cashin() const {
  // @@protoc_insertion_point(field_get:LT.AccountField.cashin)
  return cashin_;
}
inline void AccountField::set_cashin(double value) {
  
  cashin_ = value;
  // @@protoc_insertion_point(field_set:LT.AccountField.cashin)
}

// -------------------------------------------------------------------

// QuoteRequestField

// string symbol = 1;
inline void QuoteRequestField::clear_symbol() {
  symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QuoteRequestField::symbol() const {
  // @@protoc_insertion_point(field_get:LT.QuoteRequestField.symbol)
  return symbol_.GetNoArena();
}
inline void QuoteRequestField::set_symbol(const ::std::string& value) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LT.QuoteRequestField.symbol)
}
#if LANG_CXX11
inline void QuoteRequestField::set_symbol(::std::string&& value) {
  
  symbol_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LT.QuoteRequestField.symbol)
}
#endif
inline void QuoteRequestField::set_symbol(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LT.QuoteRequestField.symbol)
}
inline void QuoteRequestField::set_symbol(const char* value, size_t size) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LT.QuoteRequestField.symbol)
}
inline ::std::string* QuoteRequestField::mutable_symbol() {
  
  // @@protoc_insertion_point(field_mutable:LT.QuoteRequestField.symbol)
  return symbol_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QuoteRequestField::release_symbol() {
  // @@protoc_insertion_point(field_release:LT.QuoteRequestField.symbol)
  
  return symbol_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QuoteRequestField::set_allocated_symbol(::std::string* symbol) {
  if (symbol != NULL) {
    
  } else {
    
  }
  symbol_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), symbol);
  // @@protoc_insertion_point(field_set_allocated:LT.QuoteRequestField.symbol)
}

// string instrument_id = 2;
inline void QuoteRequestField::clear_instrument_id() {
  instrument_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QuoteRequestField::instrument_id() const {
  // @@protoc_insertion_point(field_get:LT.QuoteRequestField.instrument_id)
  return instrument_id_.GetNoArena();
}
inline void QuoteRequestField::set_instrument_id(const ::std::string& value) {
  
  instrument_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LT.QuoteRequestField.instrument_id)
}
#if LANG_CXX11
inline void QuoteRequestField::set_instrument_id(::std::string&& value) {
  
  instrument_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LT.QuoteRequestField.instrument_id)
}
#endif
inline void QuoteRequestField::set_instrument_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  instrument_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LT.QuoteRequestField.instrument_id)
}
inline void QuoteRequestField::set_instrument_id(const char* value, size_t size) {
  
  instrument_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LT.QuoteRequestField.instrument_id)
}
inline ::std::string* QuoteRequestField::mutable_instrument_id() {
  
  // @@protoc_insertion_point(field_mutable:LT.QuoteRequestField.instrument_id)
  return instrument_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QuoteRequestField::release_instrument_id() {
  // @@protoc_insertion_point(field_release:LT.QuoteRequestField.instrument_id)
  
  return instrument_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QuoteRequestField::set_allocated_instrument_id(::std::string* instrument_id) {
  if (instrument_id != NULL) {
    
  } else {
    
  }
  instrument_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instrument_id);
  // @@protoc_insertion_point(field_set_allocated:LT.QuoteRequestField.instrument_id)
}

// string exchange_id = 3;
inline void QuoteRequestField::clear_exchange_id() {
  exchange_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QuoteRequestField::exchange_id() const {
  // @@protoc_insertion_point(field_get:LT.QuoteRequestField.exchange_id)
  return exchange_id_.GetNoArena();
}
inline void QuoteRequestField::set_exchange_id(const ::std::string& value) {
  
  exchange_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LT.QuoteRequestField.exchange_id)
}
#if LANG_CXX11
inline void QuoteRequestField::set_exchange_id(::std::string&& value) {
  
  exchange_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LT.QuoteRequestField.exchange_id)
}
#endif
inline void QuoteRequestField::set_exchange_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  exchange_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LT.QuoteRequestField.exchange_id)
}
inline void QuoteRequestField::set_exchange_id(const char* value, size_t size) {
  
  exchange_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LT.QuoteRequestField.exchange_id)
}
inline ::std::string* QuoteRequestField::mutable_exchange_id() {
  
  // @@protoc_insertion_point(field_mutable:LT.QuoteRequestField.exchange_id)
  return exchange_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QuoteRequestField::release_exchange_id() {
  // @@protoc_insertion_point(field_release:LT.QuoteRequestField.exchange_id)
  
  return exchange_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QuoteRequestField::set_allocated_exchange_id(::std::string* exchange_id) {
  if (exchange_id != NULL) {
    
  } else {
    
  }
  exchange_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchange_id);
  // @@protoc_insertion_point(field_set_allocated:LT.QuoteRequestField.exchange_id)
}

// int32 trading_day = 4;
inline void QuoteRequestField::clear_trading_day() {
  trading_day_ = 0;
}
inline ::google::protobuf::int32 QuoteRequestField::trading_day() const {
  // @@protoc_insertion_point(field_get:LT.QuoteRequestField.trading_day)
  return trading_day_;
}
inline void QuoteRequestField::set_trading_day(::google::protobuf::int32 value) {
  
  trading_day_ = value;
  // @@protoc_insertion_point(field_set:LT.QuoteRequestField.trading_day)
}

// int64 quote_time = 5;
inline void QuoteRequestField::clear_quote_time() {
  quote_time_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 QuoteRequestField::quote_time() const {
  // @@protoc_insertion_point(field_get:LT.QuoteRequestField.quote_time)
  return quote_time_;
}
inline void QuoteRequestField::set_quote_time(::google::protobuf::int64 value) {
  
  quote_time_ = value;
  // @@protoc_insertion_point(field_set:LT.QuoteRequestField.quote_time)
}

// string quote_id = 6;
inline void QuoteRequestField::clear_quote_id() {
  quote_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QuoteRequestField::quote_id() const {
  // @@protoc_insertion_point(field_get:LT.QuoteRequestField.quote_id)
  return quote_id_.GetNoArena();
}
inline void QuoteRequestField::set_quote_id(const ::std::string& value) {
  
  quote_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LT.QuoteRequestField.quote_id)
}
#if LANG_CXX11
inline void QuoteRequestField::set_quote_id(::std::string&& value) {
  
  quote_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LT.QuoteRequestField.quote_id)
}
#endif
inline void QuoteRequestField::set_quote_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  quote_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LT.QuoteRequestField.quote_id)
}
inline void QuoteRequestField::set_quote_id(const char* value, size_t size) {
  
  quote_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LT.QuoteRequestField.quote_id)
}
inline ::std::string* QuoteRequestField::mutable_quote_id() {
  
  // @@protoc_insertion_point(field_mutable:LT.QuoteRequestField.quote_id)
  return quote_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QuoteRequestField::release_quote_id() {
  // @@protoc_insertion_point(field_release:LT.QuoteRequestField.quote_id)
  
  return quote_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QuoteRequestField::set_allocated_quote_id(::std::string* quote_id) {
  if (quote_id != NULL) {
    
  } else {
    
  }
  quote_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), quote_id);
  // @@protoc_insertion_point(field_set_allocated:LT.QuoteRequestField.quote_id)
}

// -------------------------------------------------------------------

// SettlementInfoField

// int32 size = 1;
inline void SettlementInfoField::clear_size() {
  size_ = 0;
}
inline ::google::protobuf::int32 SettlementInfoField::size() const {
  // @@protoc_insertion_point(field_get:LT.SettlementInfoField.size)
  return size_;
}
inline void SettlementInfoField::set_size(::google::protobuf::int32 value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:LT.SettlementInfoField.size)
}

// int64 trading_day = 2;
inline void SettlementInfoField::clear_trading_day() {
  trading_day_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 SettlementInfoField::trading_day() const {
  // @@protoc_insertion_point(field_get:LT.SettlementInfoField.trading_day)
  return trading_day_;
}
inline void SettlementInfoField::set_trading_day(::google::protobuf::int64 value) {
  
  trading_day_ = value;
  // @@protoc_insertion_point(field_set:LT.SettlementInfoField.trading_day)
}

// -------------------------------------------------------------------

// InvestorField

// string investor_id = 1;
inline void InvestorField::clear_investor_id() {
  investor_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InvestorField::investor_id() const {
  // @@protoc_insertion_point(field_get:LT.InvestorField.investor_id)
  return investor_id_.GetNoArena();
}
inline void InvestorField::set_investor_id(const ::std::string& value) {
  
  investor_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LT.InvestorField.investor_id)
}
#if LANG_CXX11
inline void InvestorField::set_investor_id(::std::string&& value) {
  
  investor_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LT.InvestorField.investor_id)
}
#endif
inline void InvestorField::set_investor_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  investor_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LT.InvestorField.investor_id)
}
inline void InvestorField::set_investor_id(const char* value, size_t size) {
  
  investor_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LT.InvestorField.investor_id)
}
inline ::std::string* InvestorField::mutable_investor_id() {
  
  // @@protoc_insertion_point(field_mutable:LT.InvestorField.investor_id)
  return investor_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InvestorField::release_investor_id() {
  // @@protoc_insertion_point(field_release:LT.InvestorField.investor_id)
  
  return investor_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InvestorField::set_allocated_investor_id(::std::string* investor_id) {
  if (investor_id != NULL) {
    
  } else {
    
  }
  investor_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), investor_id);
  // @@protoc_insertion_point(field_set_allocated:LT.InvestorField.investor_id)
}

// string broker_id = 2;
inline void InvestorField::clear_broker_id() {
  broker_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InvestorField::broker_id() const {
  // @@protoc_insertion_point(field_get:LT.InvestorField.broker_id)
  return broker_id_.GetNoArena();
}
inline void InvestorField::set_broker_id(const ::std::string& value) {
  
  broker_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LT.InvestorField.broker_id)
}
#if LANG_CXX11
inline void InvestorField::set_broker_id(::std::string&& value) {
  
  broker_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LT.InvestorField.broker_id)
}
#endif
inline void InvestorField::set_broker_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  broker_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LT.InvestorField.broker_id)
}
inline void InvestorField::set_broker_id(const char* value, size_t size) {
  
  broker_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LT.InvestorField.broker_id)
}
inline ::std::string* InvestorField::mutable_broker_id() {
  
  // @@protoc_insertion_point(field_mutable:LT.InvestorField.broker_id)
  return broker_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InvestorField::release_broker_id() {
  // @@protoc_insertion_point(field_release:LT.InvestorField.broker_id)
  
  return broker_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InvestorField::set_allocated_broker_id(::std::string* broker_id) {
  if (broker_id != NULL) {
    
  } else {
    
  }
  broker_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), broker_id);
  // @@protoc_insertion_point(field_set_allocated:LT.InvestorField.broker_id)
}

// .LT.IdCardType identified_card_type = 3;
inline void InvestorField::clear_identified_card_type() {
  identified_card_type_ = 0;
}
inline ::LT::IdCardType InvestorField::identified_card_type() const {
  // @@protoc_insertion_point(field_get:LT.InvestorField.identified_card_type)
  return static_cast< ::LT::IdCardType >(identified_card_type_);
}
inline void InvestorField::set_identified_card_type(::LT::IdCardType value) {
  
  identified_card_type_ = value;
  // @@protoc_insertion_point(field_set:LT.InvestorField.identified_card_type)
}

// string identified_cardno = 4;
inline void InvestorField::clear_identified_cardno() {
  identified_cardno_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InvestorField::identified_cardno() const {
  // @@protoc_insertion_point(field_get:LT.InvestorField.identified_cardno)
  return identified_cardno_.GetNoArena();
}
inline void InvestorField::set_identified_cardno(const ::std::string& value) {
  
  identified_cardno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LT.InvestorField.identified_cardno)
}
#if LANG_CXX11
inline void InvestorField::set_identified_cardno(::std::string&& value) {
  
  identified_cardno_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LT.InvestorField.identified_cardno)
}
#endif
inline void InvestorField::set_identified_cardno(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  identified_cardno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LT.InvestorField.identified_cardno)
}
inline void InvestorField::set_identified_cardno(const char* value, size_t size) {
  
  identified_cardno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LT.InvestorField.identified_cardno)
}
inline ::std::string* InvestorField::mutable_identified_cardno() {
  
  // @@protoc_insertion_point(field_mutable:LT.InvestorField.identified_cardno)
  return identified_cardno_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InvestorField::release_identified_cardno() {
  // @@protoc_insertion_point(field_release:LT.InvestorField.identified_cardno)
  
  return identified_cardno_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InvestorField::set_allocated_identified_cardno(::std::string* identified_cardno) {
  if (identified_cardno != NULL) {
    
  } else {
    
  }
  identified_cardno_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), identified_cardno);
  // @@protoc_insertion_point(field_set_allocated:LT.InvestorField.identified_cardno)
}

// string investor_name = 5;
inline void InvestorField::clear_investor_name() {
  investor_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InvestorField::investor_name() const {
  // @@protoc_insertion_point(field_get:LT.InvestorField.investor_name)
  return investor_name_.GetNoArena();
}
inline void InvestorField::set_investor_name(const ::std::string& value) {
  
  investor_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LT.InvestorField.investor_name)
}
#if LANG_CXX11
inline void InvestorField::set_investor_name(::std::string&& value) {
  
  investor_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LT.InvestorField.investor_name)
}
#endif
inline void InvestorField::set_investor_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  investor_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LT.InvestorField.investor_name)
}
inline void InvestorField::set_investor_name(const char* value, size_t size) {
  
  investor_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LT.InvestorField.investor_name)
}
inline ::std::string* InvestorField::mutable_investor_name() {
  
  // @@protoc_insertion_point(field_mutable:LT.InvestorField.investor_name)
  return investor_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InvestorField::release_investor_name() {
  // @@protoc_insertion_point(field_release:LT.InvestorField.investor_name)
  
  return investor_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InvestorField::set_allocated_investor_name(::std::string* investor_name) {
  if (investor_name != NULL) {
    
  } else {
    
  }
  investor_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), investor_name);
  // @@protoc_insertion_point(field_set_allocated:LT.InvestorField.investor_name)
}

// -------------------------------------------------------------------

// InstrumentStatusField

// string symbol = 1;
inline void InstrumentStatusField::clear_symbol() {
  symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InstrumentStatusField::symbol() const {
  // @@protoc_insertion_point(field_get:LT.InstrumentStatusField.symbol)
  return symbol_.GetNoArena();
}
inline void InstrumentStatusField::set_symbol(const ::std::string& value) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LT.InstrumentStatusField.symbol)
}
#if LANG_CXX11
inline void InstrumentStatusField::set_symbol(::std::string&& value) {
  
  symbol_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LT.InstrumentStatusField.symbol)
}
#endif
inline void InstrumentStatusField::set_symbol(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LT.InstrumentStatusField.symbol)
}
inline void InstrumentStatusField::set_symbol(const char* value, size_t size) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LT.InstrumentStatusField.symbol)
}
inline ::std::string* InstrumentStatusField::mutable_symbol() {
  
  // @@protoc_insertion_point(field_mutable:LT.InstrumentStatusField.symbol)
  return symbol_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InstrumentStatusField::release_symbol() {
  // @@protoc_insertion_point(field_release:LT.InstrumentStatusField.symbol)
  
  return symbol_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InstrumentStatusField::set_allocated_symbol(::std::string* symbol) {
  if (symbol != NULL) {
    
  } else {
    
  }
  symbol_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), symbol);
  // @@protoc_insertion_point(field_set_allocated:LT.InstrumentStatusField.symbol)
}

// string instrument_id = 2;
inline void InstrumentStatusField::clear_instrument_id() {
  instrument_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InstrumentStatusField::instrument_id() const {
  // @@protoc_insertion_point(field_get:LT.InstrumentStatusField.instrument_id)
  return instrument_id_.GetNoArena();
}
inline void InstrumentStatusField::set_instrument_id(const ::std::string& value) {
  
  instrument_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LT.InstrumentStatusField.instrument_id)
}
#if LANG_CXX11
inline void InstrumentStatusField::set_instrument_id(::std::string&& value) {
  
  instrument_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LT.InstrumentStatusField.instrument_id)
}
#endif
inline void InstrumentStatusField::set_instrument_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  instrument_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LT.InstrumentStatusField.instrument_id)
}
inline void InstrumentStatusField::set_instrument_id(const char* value, size_t size) {
  
  instrument_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LT.InstrumentStatusField.instrument_id)
}
inline ::std::string* InstrumentStatusField::mutable_instrument_id() {
  
  // @@protoc_insertion_point(field_mutable:LT.InstrumentStatusField.instrument_id)
  return instrument_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InstrumentStatusField::release_instrument_id() {
  // @@protoc_insertion_point(field_release:LT.InstrumentStatusField.instrument_id)
  
  return instrument_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InstrumentStatusField::set_allocated_instrument_id(::std::string* instrument_id) {
  if (instrument_id != NULL) {
    
  } else {
    
  }
  instrument_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instrument_id);
  // @@protoc_insertion_point(field_set_allocated:LT.InstrumentStatusField.instrument_id)
}

// string exchange_id = 3;
inline void InstrumentStatusField::clear_exchange_id() {
  exchange_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InstrumentStatusField::exchange_id() const {
  // @@protoc_insertion_point(field_get:LT.InstrumentStatusField.exchange_id)
  return exchange_id_.GetNoArena();
}
inline void InstrumentStatusField::set_exchange_id(const ::std::string& value) {
  
  exchange_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LT.InstrumentStatusField.exchange_id)
}
#if LANG_CXX11
inline void InstrumentStatusField::set_exchange_id(::std::string&& value) {
  
  exchange_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LT.InstrumentStatusField.exchange_id)
}
#endif
inline void InstrumentStatusField::set_exchange_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  exchange_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LT.InstrumentStatusField.exchange_id)
}
inline void InstrumentStatusField::set_exchange_id(const char* value, size_t size) {
  
  exchange_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LT.InstrumentStatusField.exchange_id)
}
inline ::std::string* InstrumentStatusField::mutable_exchange_id() {
  
  // @@protoc_insertion_point(field_mutable:LT.InstrumentStatusField.exchange_id)
  return exchange_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InstrumentStatusField::release_exchange_id() {
  // @@protoc_insertion_point(field_release:LT.InstrumentStatusField.exchange_id)
  
  return exchange_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InstrumentStatusField::set_allocated_exchange_id(::std::string* exchange_id) {
  if (exchange_id != NULL) {
    
  } else {
    
  }
  exchange_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchange_id);
  // @@protoc_insertion_point(field_set_allocated:LT.InstrumentStatusField.exchange_id)
}

// .LT.TradingPhaseType instrument_status = 4;
inline void InstrumentStatusField::clear_instrument_status() {
  instrument_status_ = 0;
}
inline ::LT::TradingPhaseType InstrumentStatusField::instrument_status() const {
  // @@protoc_insertion_point(field_get:LT.InstrumentStatusField.instrument_status)
  return static_cast< ::LT::TradingPhaseType >(instrument_status_);
}
inline void InstrumentStatusField::set_instrument_status(::LT::TradingPhaseType value) {
  
  instrument_status_ = value;
  // @@protoc_insertion_point(field_set:LT.InstrumentStatusField.instrument_status)
}

// int64 enter_time = 5;
inline void InstrumentStatusField::clear_enter_time() {
  enter_time_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 InstrumentStatusField::enter_time() const {
  // @@protoc_insertion_point(field_get:LT.InstrumentStatusField.enter_time)
  return enter_time_;
}
inline void InstrumentStatusField::set_enter_time(::google::protobuf::int64 value) {
  
  enter_time_ = value;
  // @@protoc_insertion_point(field_set:LT.InstrumentStatusField.enter_time)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace LT

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_trader_2eproto
